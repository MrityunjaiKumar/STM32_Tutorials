
AnalogRead_16khz_SamplingRate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000345c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08003568  08003568  00013568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003650  08003650  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08003650  08003650  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003650  08003650  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003650  08003650  00013650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003654  08003654  00013654  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08003658  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  20000078  080036d0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  080036d0  000201c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a49d  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ad9  00000000  00000000  0002a53e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ac8  00000000  00000000  0002c018  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009e0  00000000  00000000  0002cae0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015020  00000000  00000000  0002d4c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008471  00000000  00000000  000424e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00074c80  00000000  00000000  0004a951  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bf5d1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003690  00000000  00000000  000bf64c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	08003550 	.word	0x08003550

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	08003550 	.word	0x08003550

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000160:	f000 fa90 	bl	8000684 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000164:	f000 f81e 	bl	80001a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000168:	f000 f904 	bl	8000374 <MX_GPIO_Init>
  MX_ADC1_Init();
 800016c:	f000 f876 	bl	800025c <MX_ADC1_Init>
  MX_TIM3_Init();
 8000170:	f000 f8b2 	bl	80002d8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim3);
 8000174:	4807      	ldr	r0, [pc, #28]	; (8000194 <main+0x38>)
 8000176:	f001 fe0e 	bl	8001d96 <HAL_TIM_Base_Start>
  HAL_ADC_Start_IT(&hadc1);
 800017a:	4807      	ldr	r0, [pc, #28]	; (8000198 <main+0x3c>)
 800017c:	f000 fbbc 	bl	80008f8 <HAL_ADC_Start_IT>
  initialise_monitor_handles();
 8000180:	f003 f96c 	bl	800345c <initialise_monitor_handles>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 printf("ADC value is%d\n", adcVal);
 8000184:	4b05      	ldr	r3, [pc, #20]	; (800019c <main+0x40>)
 8000186:	881b      	ldrh	r3, [r3, #0]
 8000188:	4619      	mov	r1, r3
 800018a:	4805      	ldr	r0, [pc, #20]	; (80001a0 <main+0x44>)
 800018c:	f002 f84c 	bl	8002228 <iprintf>
 8000190:	e7f8      	b.n	8000184 <main+0x28>
 8000192:	bf00      	nop
 8000194:	20000150 	.word	0x20000150
 8000198:	20000190 	.word	0x20000190
 800019c:	20000094 	.word	0x20000094
 80001a0:	08003568 	.word	0x08003568

080001a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001a4:	b580      	push	{r7, lr}
 80001a6:	b094      	sub	sp, #80	; 0x50
 80001a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001ae:	2228      	movs	r2, #40	; 0x28
 80001b0:	2100      	movs	r1, #0
 80001b2:	4618      	mov	r0, r3
 80001b4:	f002 f830 	bl	8002218 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001b8:	f107 0314 	add.w	r3, r7, #20
 80001bc:	2200      	movs	r2, #0
 80001be:	601a      	str	r2, [r3, #0]
 80001c0:	605a      	str	r2, [r3, #4]
 80001c2:	609a      	str	r2, [r3, #8]
 80001c4:	60da      	str	r2, [r3, #12]
 80001c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001c8:	1d3b      	adds	r3, r7, #4
 80001ca:	2200      	movs	r2, #0
 80001cc:	601a      	str	r2, [r3, #0]
 80001ce:	605a      	str	r2, [r3, #4]
 80001d0:	609a      	str	r2, [r3, #8]
 80001d2:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001d4:	2301      	movs	r3, #1
 80001d6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001de:	2300      	movs	r3, #0
 80001e0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001e2:	2301      	movs	r3, #1
 80001e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001e6:	2302      	movs	r3, #2
 80001e8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001f0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001fa:	4618      	mov	r0, r3
 80001fc:	f001 f900 	bl	8001400 <HAL_RCC_OscConfig>
 8000200:	4603      	mov	r3, r0
 8000202:	2b00      	cmp	r3, #0
 8000204:	d001      	beq.n	800020a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000206:	f000 f8e9 	bl	80003dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800020a:	230f      	movs	r3, #15
 800020c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800020e:	2302      	movs	r3, #2
 8000210:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000212:	2300      	movs	r3, #0
 8000214:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000216:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800021a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800021c:	2300      	movs	r3, #0
 800021e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000220:	f107 0314 	add.w	r3, r7, #20
 8000224:	2102      	movs	r1, #2
 8000226:	4618      	mov	r0, r3
 8000228:	f001 fb6a 	bl	8001900 <HAL_RCC_ClockConfig>
 800022c:	4603      	mov	r3, r0
 800022e:	2b00      	cmp	r3, #0
 8000230:	d001      	beq.n	8000236 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000232:	f000 f8d3 	bl	80003dc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000236:	2302      	movs	r3, #2
 8000238:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800023a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800023e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000240:	1d3b      	adds	r3, r7, #4
 8000242:	4618      	mov	r0, r3
 8000244:	f001 fcc6 	bl	8001bd4 <HAL_RCCEx_PeriphCLKConfig>
 8000248:	4603      	mov	r3, r0
 800024a:	2b00      	cmp	r3, #0
 800024c:	d001      	beq.n	8000252 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800024e:	f000 f8c5 	bl	80003dc <Error_Handler>
  }
}
 8000252:	bf00      	nop
 8000254:	3750      	adds	r7, #80	; 0x50
 8000256:	46bd      	mov	sp, r7
 8000258:	bd80      	pop	{r7, pc}
	...

0800025c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b084      	sub	sp, #16
 8000260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000262:	1d3b      	adds	r3, r7, #4
 8000264:	2200      	movs	r2, #0
 8000266:	601a      	str	r2, [r3, #0]
 8000268:	605a      	str	r2, [r3, #4]
 800026a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 800026c:	4b18      	ldr	r3, [pc, #96]	; (80002d0 <MX_ADC1_Init+0x74>)
 800026e:	4a19      	ldr	r2, [pc, #100]	; (80002d4 <MX_ADC1_Init+0x78>)
 8000270:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000272:	4b17      	ldr	r3, [pc, #92]	; (80002d0 <MX_ADC1_Init+0x74>)
 8000274:	2200      	movs	r2, #0
 8000276:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000278:	4b15      	ldr	r3, [pc, #84]	; (80002d0 <MX_ADC1_Init+0x74>)
 800027a:	2200      	movs	r2, #0
 800027c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800027e:	4b14      	ldr	r3, [pc, #80]	; (80002d0 <MX_ADC1_Init+0x74>)
 8000280:	2200      	movs	r2, #0
 8000282:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8000284:	4b12      	ldr	r3, [pc, #72]	; (80002d0 <MX_ADC1_Init+0x74>)
 8000286:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800028a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800028c:	4b10      	ldr	r3, [pc, #64]	; (80002d0 <MX_ADC1_Init+0x74>)
 800028e:	2200      	movs	r2, #0
 8000290:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000292:	4b0f      	ldr	r3, [pc, #60]	; (80002d0 <MX_ADC1_Init+0x74>)
 8000294:	2201      	movs	r2, #1
 8000296:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000298:	480d      	ldr	r0, [pc, #52]	; (80002d0 <MX_ADC1_Init+0x74>)
 800029a:	f000 fa55 	bl	8000748 <HAL_ADC_Init>
 800029e:	4603      	mov	r3, r0
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d001      	beq.n	80002a8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80002a4:	f000 f89a 	bl	80003dc <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80002a8:	2300      	movs	r3, #0
 80002aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002ac:	2301      	movs	r3, #1
 80002ae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80002b0:	2300      	movs	r3, #0
 80002b2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002b4:	1d3b      	adds	r3, r7, #4
 80002b6:	4619      	mov	r1, r3
 80002b8:	4805      	ldr	r0, [pc, #20]	; (80002d0 <MX_ADC1_Init+0x74>)
 80002ba:	f000 fcab 	bl	8000c14 <HAL_ADC_ConfigChannel>
 80002be:	4603      	mov	r3, r0
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d001      	beq.n	80002c8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80002c4:	f000 f88a 	bl	80003dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002c8:	bf00      	nop
 80002ca:	3710      	adds	r7, #16
 80002cc:	46bd      	mov	sp, r7
 80002ce:	bd80      	pop	{r7, pc}
 80002d0:	20000190 	.word	0x20000190
 80002d4:	40012400 	.word	0x40012400

080002d8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b086      	sub	sp, #24
 80002dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002de:	f107 0308 	add.w	r3, r7, #8
 80002e2:	2200      	movs	r2, #0
 80002e4:	601a      	str	r2, [r3, #0]
 80002e6:	605a      	str	r2, [r3, #4]
 80002e8:	609a      	str	r2, [r3, #8]
 80002ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002ec:	463b      	mov	r3, r7
 80002ee:	2200      	movs	r2, #0
 80002f0:	601a      	str	r2, [r3, #0]
 80002f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80002f4:	4b1d      	ldr	r3, [pc, #116]	; (800036c <MX_TIM3_Init+0x94>)
 80002f6:	4a1e      	ldr	r2, [pc, #120]	; (8000370 <MX_TIM3_Init+0x98>)
 80002f8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 80002fa:	4b1c      	ldr	r3, [pc, #112]	; (800036c <MX_TIM3_Init+0x94>)
 80002fc:	2201      	movs	r2, #1
 80002fe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000300:	4b1a      	ldr	r3, [pc, #104]	; (800036c <MX_TIM3_Init+0x94>)
 8000302:	2200      	movs	r2, #0
 8000304:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2249;
 8000306:	4b19      	ldr	r3, [pc, #100]	; (800036c <MX_TIM3_Init+0x94>)
 8000308:	f640 02c9 	movw	r2, #2249	; 0x8c9
 800030c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800030e:	4b17      	ldr	r3, [pc, #92]	; (800036c <MX_TIM3_Init+0x94>)
 8000310:	2200      	movs	r2, #0
 8000312:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000314:	4b15      	ldr	r3, [pc, #84]	; (800036c <MX_TIM3_Init+0x94>)
 8000316:	2200      	movs	r2, #0
 8000318:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800031a:	4814      	ldr	r0, [pc, #80]	; (800036c <MX_TIM3_Init+0x94>)
 800031c:	f001 fd10 	bl	8001d40 <HAL_TIM_Base_Init>
 8000320:	4603      	mov	r3, r0
 8000322:	2b00      	cmp	r3, #0
 8000324:	d001      	beq.n	800032a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000326:	f000 f859 	bl	80003dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800032a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800032e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000330:	f107 0308 	add.w	r3, r7, #8
 8000334:	4619      	mov	r1, r3
 8000336:	480d      	ldr	r0, [pc, #52]	; (800036c <MX_TIM3_Init+0x94>)
 8000338:	f001 fd50 	bl	8001ddc <HAL_TIM_ConfigClockSource>
 800033c:	4603      	mov	r3, r0
 800033e:	2b00      	cmp	r3, #0
 8000340:	d001      	beq.n	8000346 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000342:	f000 f84b 	bl	80003dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000346:	2320      	movs	r3, #32
 8000348:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800034a:	2300      	movs	r3, #0
 800034c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800034e:	463b      	mov	r3, r7
 8000350:	4619      	mov	r1, r3
 8000352:	4806      	ldr	r0, [pc, #24]	; (800036c <MX_TIM3_Init+0x94>)
 8000354:	f001 fef2 	bl	800213c <HAL_TIMEx_MasterConfigSynchronization>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800035e:	f000 f83d 	bl	80003dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000362:	bf00      	nop
 8000364:	3718      	adds	r7, #24
 8000366:	46bd      	mov	sp, r7
 8000368:	bd80      	pop	{r7, pc}
 800036a:	bf00      	nop
 800036c:	20000150 	.word	0x20000150
 8000370:	40000400 	.word	0x40000400

08000374 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000374:	b480      	push	{r7}
 8000376:	b083      	sub	sp, #12
 8000378:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800037a:	4b0e      	ldr	r3, [pc, #56]	; (80003b4 <MX_GPIO_Init+0x40>)
 800037c:	699b      	ldr	r3, [r3, #24]
 800037e:	4a0d      	ldr	r2, [pc, #52]	; (80003b4 <MX_GPIO_Init+0x40>)
 8000380:	f043 0320 	orr.w	r3, r3, #32
 8000384:	6193      	str	r3, [r2, #24]
 8000386:	4b0b      	ldr	r3, [pc, #44]	; (80003b4 <MX_GPIO_Init+0x40>)
 8000388:	699b      	ldr	r3, [r3, #24]
 800038a:	f003 0320 	and.w	r3, r3, #32
 800038e:	607b      	str	r3, [r7, #4]
 8000390:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000392:	4b08      	ldr	r3, [pc, #32]	; (80003b4 <MX_GPIO_Init+0x40>)
 8000394:	699b      	ldr	r3, [r3, #24]
 8000396:	4a07      	ldr	r2, [pc, #28]	; (80003b4 <MX_GPIO_Init+0x40>)
 8000398:	f043 0304 	orr.w	r3, r3, #4
 800039c:	6193      	str	r3, [r2, #24]
 800039e:	4b05      	ldr	r3, [pc, #20]	; (80003b4 <MX_GPIO_Init+0x40>)
 80003a0:	699b      	ldr	r3, [r3, #24]
 80003a2:	f003 0304 	and.w	r3, r3, #4
 80003a6:	603b      	str	r3, [r7, #0]
 80003a8:	683b      	ldr	r3, [r7, #0]

}
 80003aa:	bf00      	nop
 80003ac:	370c      	adds	r7, #12
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bc80      	pop	{r7}
 80003b2:	4770      	bx	lr
 80003b4:	40021000 	.word	0x40021000

080003b8 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b082      	sub	sp, #8
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
  adcVal = HAL_ADC_GetValue(hadc);
 80003c0:	6878      	ldr	r0, [r7, #4]
 80003c2:	f000 fb4f 	bl	8000a64 <HAL_ADC_GetValue>
 80003c6:	4603      	mov	r3, r0
 80003c8:	b29a      	uxth	r2, r3
 80003ca:	4b03      	ldr	r3, [pc, #12]	; (80003d8 <HAL_ADC_ConvCpltCallback+0x20>)
 80003cc:	801a      	strh	r2, [r3, #0]

}
 80003ce:	bf00      	nop
 80003d0:	3708      	adds	r7, #8
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	bf00      	nop
 80003d8:	20000094 	.word	0x20000094

080003dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003dc:	b480      	push	{r7}
 80003de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80003e0:	bf00      	nop
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bc80      	pop	{r7}
 80003e6:	4770      	bx	lr

080003e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003e8:	b480      	push	{r7}
 80003ea:	b085      	sub	sp, #20
 80003ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003ee:	4b15      	ldr	r3, [pc, #84]	; (8000444 <HAL_MspInit+0x5c>)
 80003f0:	699b      	ldr	r3, [r3, #24]
 80003f2:	4a14      	ldr	r2, [pc, #80]	; (8000444 <HAL_MspInit+0x5c>)
 80003f4:	f043 0301 	orr.w	r3, r3, #1
 80003f8:	6193      	str	r3, [r2, #24]
 80003fa:	4b12      	ldr	r3, [pc, #72]	; (8000444 <HAL_MspInit+0x5c>)
 80003fc:	699b      	ldr	r3, [r3, #24]
 80003fe:	f003 0301 	and.w	r3, r3, #1
 8000402:	60bb      	str	r3, [r7, #8]
 8000404:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000406:	4b0f      	ldr	r3, [pc, #60]	; (8000444 <HAL_MspInit+0x5c>)
 8000408:	69db      	ldr	r3, [r3, #28]
 800040a:	4a0e      	ldr	r2, [pc, #56]	; (8000444 <HAL_MspInit+0x5c>)
 800040c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000410:	61d3      	str	r3, [r2, #28]
 8000412:	4b0c      	ldr	r3, [pc, #48]	; (8000444 <HAL_MspInit+0x5c>)
 8000414:	69db      	ldr	r3, [r3, #28]
 8000416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800041a:	607b      	str	r3, [r7, #4]
 800041c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800041e:	4b0a      	ldr	r3, [pc, #40]	; (8000448 <HAL_MspInit+0x60>)
 8000420:	685b      	ldr	r3, [r3, #4]
 8000422:	60fb      	str	r3, [r7, #12]
 8000424:	68fb      	ldr	r3, [r7, #12]
 8000426:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800042a:	60fb      	str	r3, [r7, #12]
 800042c:	68fb      	ldr	r3, [r7, #12]
 800042e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000432:	60fb      	str	r3, [r7, #12]
 8000434:	4a04      	ldr	r2, [pc, #16]	; (8000448 <HAL_MspInit+0x60>)
 8000436:	68fb      	ldr	r3, [r7, #12]
 8000438:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800043a:	bf00      	nop
 800043c:	3714      	adds	r7, #20
 800043e:	46bd      	mov	sp, r7
 8000440:	bc80      	pop	{r7}
 8000442:	4770      	bx	lr
 8000444:	40021000 	.word	0x40021000
 8000448:	40010000 	.word	0x40010000

0800044c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b088      	sub	sp, #32
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000454:	f107 0310 	add.w	r3, r7, #16
 8000458:	2200      	movs	r2, #0
 800045a:	601a      	str	r2, [r3, #0]
 800045c:	605a      	str	r2, [r3, #4]
 800045e:	609a      	str	r2, [r3, #8]
 8000460:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	4a18      	ldr	r2, [pc, #96]	; (80004c8 <HAL_ADC_MspInit+0x7c>)
 8000468:	4293      	cmp	r3, r2
 800046a:	d129      	bne.n	80004c0 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800046c:	4b17      	ldr	r3, [pc, #92]	; (80004cc <HAL_ADC_MspInit+0x80>)
 800046e:	699b      	ldr	r3, [r3, #24]
 8000470:	4a16      	ldr	r2, [pc, #88]	; (80004cc <HAL_ADC_MspInit+0x80>)
 8000472:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000476:	6193      	str	r3, [r2, #24]
 8000478:	4b14      	ldr	r3, [pc, #80]	; (80004cc <HAL_ADC_MspInit+0x80>)
 800047a:	699b      	ldr	r3, [r3, #24]
 800047c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000480:	60fb      	str	r3, [r7, #12]
 8000482:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000484:	4b11      	ldr	r3, [pc, #68]	; (80004cc <HAL_ADC_MspInit+0x80>)
 8000486:	699b      	ldr	r3, [r3, #24]
 8000488:	4a10      	ldr	r2, [pc, #64]	; (80004cc <HAL_ADC_MspInit+0x80>)
 800048a:	f043 0304 	orr.w	r3, r3, #4
 800048e:	6193      	str	r3, [r2, #24]
 8000490:	4b0e      	ldr	r3, [pc, #56]	; (80004cc <HAL_ADC_MspInit+0x80>)
 8000492:	699b      	ldr	r3, [r3, #24]
 8000494:	f003 0304 	and.w	r3, r3, #4
 8000498:	60bb      	str	r3, [r7, #8]
 800049a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800049c:	2301      	movs	r3, #1
 800049e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004a0:	2303      	movs	r3, #3
 80004a2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004a4:	f107 0310 	add.w	r3, r7, #16
 80004a8:	4619      	mov	r1, r3
 80004aa:	4809      	ldr	r0, [pc, #36]	; (80004d0 <HAL_ADC_MspInit+0x84>)
 80004ac:	f000 fe4e 	bl	800114c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80004b0:	2200      	movs	r2, #0
 80004b2:	2100      	movs	r1, #0
 80004b4:	2012      	movs	r0, #18
 80004b6:	f000 fe12 	bl	80010de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80004ba:	2012      	movs	r0, #18
 80004bc:	f000 fe2b 	bl	8001116 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80004c0:	bf00      	nop
 80004c2:	3720      	adds	r7, #32
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	40012400 	.word	0x40012400
 80004cc:	40021000 	.word	0x40021000
 80004d0:	40010800 	.word	0x40010800

080004d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80004d4:	b480      	push	{r7}
 80004d6:	b085      	sub	sp, #20
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4a09      	ldr	r2, [pc, #36]	; (8000508 <HAL_TIM_Base_MspInit+0x34>)
 80004e2:	4293      	cmp	r3, r2
 80004e4:	d10b      	bne.n	80004fe <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80004e6:	4b09      	ldr	r3, [pc, #36]	; (800050c <HAL_TIM_Base_MspInit+0x38>)
 80004e8:	69db      	ldr	r3, [r3, #28]
 80004ea:	4a08      	ldr	r2, [pc, #32]	; (800050c <HAL_TIM_Base_MspInit+0x38>)
 80004ec:	f043 0302 	orr.w	r3, r3, #2
 80004f0:	61d3      	str	r3, [r2, #28]
 80004f2:	4b06      	ldr	r3, [pc, #24]	; (800050c <HAL_TIM_Base_MspInit+0x38>)
 80004f4:	69db      	ldr	r3, [r3, #28]
 80004f6:	f003 0302 	and.w	r3, r3, #2
 80004fa:	60fb      	str	r3, [r7, #12]
 80004fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80004fe:	bf00      	nop
 8000500:	3714      	adds	r7, #20
 8000502:	46bd      	mov	sp, r7
 8000504:	bc80      	pop	{r7}
 8000506:	4770      	bx	lr
 8000508:	40000400 	.word	0x40000400
 800050c:	40021000 	.word	0x40021000

08000510 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000514:	bf00      	nop
 8000516:	46bd      	mov	sp, r7
 8000518:	bc80      	pop	{r7}
 800051a:	4770      	bx	lr

0800051c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000520:	e7fe      	b.n	8000520 <HardFault_Handler+0x4>

08000522 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000522:	b480      	push	{r7}
 8000524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000526:	e7fe      	b.n	8000526 <MemManage_Handler+0x4>

08000528 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800052c:	e7fe      	b.n	800052c <BusFault_Handler+0x4>

0800052e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800052e:	b480      	push	{r7}
 8000530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000532:	e7fe      	b.n	8000532 <UsageFault_Handler+0x4>

08000534 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000538:	bf00      	nop
 800053a:	46bd      	mov	sp, r7
 800053c:	bc80      	pop	{r7}
 800053e:	4770      	bx	lr

08000540 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000544:	bf00      	nop
 8000546:	46bd      	mov	sp, r7
 8000548:	bc80      	pop	{r7}
 800054a:	4770      	bx	lr

0800054c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000550:	bf00      	nop
 8000552:	46bd      	mov	sp, r7
 8000554:	bc80      	pop	{r7}
 8000556:	4770      	bx	lr

08000558 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800055c:	f000 f8d8 	bl	8000710 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000560:	bf00      	nop
 8000562:	bd80      	pop	{r7, pc}

08000564 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000568:	4802      	ldr	r0, [pc, #8]	; (8000574 <ADC1_2_IRQHandler+0x10>)
 800056a:	f000 fa87 	bl	8000a7c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800056e:	bf00      	nop
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	20000190 	.word	0x20000190

08000578 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000580:	4b11      	ldr	r3, [pc, #68]	; (80005c8 <_sbrk+0x50>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d102      	bne.n	800058e <_sbrk+0x16>
		heap_end = &end;
 8000588:	4b0f      	ldr	r3, [pc, #60]	; (80005c8 <_sbrk+0x50>)
 800058a:	4a10      	ldr	r2, [pc, #64]	; (80005cc <_sbrk+0x54>)
 800058c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800058e:	4b0e      	ldr	r3, [pc, #56]	; (80005c8 <_sbrk+0x50>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000594:	4b0c      	ldr	r3, [pc, #48]	; (80005c8 <_sbrk+0x50>)
 8000596:	681a      	ldr	r2, [r3, #0]
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	4413      	add	r3, r2
 800059c:	466a      	mov	r2, sp
 800059e:	4293      	cmp	r3, r2
 80005a0:	d907      	bls.n	80005b2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80005a2:	f001 fe0f 	bl	80021c4 <__errno>
 80005a6:	4602      	mov	r2, r0
 80005a8:	230c      	movs	r3, #12
 80005aa:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80005ac:	f04f 33ff 	mov.w	r3, #4294967295
 80005b0:	e006      	b.n	80005c0 <_sbrk+0x48>
	}

	heap_end += incr;
 80005b2:	4b05      	ldr	r3, [pc, #20]	; (80005c8 <_sbrk+0x50>)
 80005b4:	681a      	ldr	r2, [r3, #0]
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	4413      	add	r3, r2
 80005ba:	4a03      	ldr	r2, [pc, #12]	; (80005c8 <_sbrk+0x50>)
 80005bc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80005be:	68fb      	ldr	r3, [r7, #12]
}
 80005c0:	4618      	mov	r0, r3
 80005c2:	3710      	adds	r7, #16
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	20000098 	.word	0x20000098
 80005cc:	200001c8 	.word	0x200001c8

080005d0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80005d4:	4b15      	ldr	r3, [pc, #84]	; (800062c <SystemInit+0x5c>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a14      	ldr	r2, [pc, #80]	; (800062c <SystemInit+0x5c>)
 80005da:	f043 0301 	orr.w	r3, r3, #1
 80005de:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80005e0:	4b12      	ldr	r3, [pc, #72]	; (800062c <SystemInit+0x5c>)
 80005e2:	685a      	ldr	r2, [r3, #4]
 80005e4:	4911      	ldr	r1, [pc, #68]	; (800062c <SystemInit+0x5c>)
 80005e6:	4b12      	ldr	r3, [pc, #72]	; (8000630 <SystemInit+0x60>)
 80005e8:	4013      	ands	r3, r2
 80005ea:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80005ec:	4b0f      	ldr	r3, [pc, #60]	; (800062c <SystemInit+0x5c>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a0e      	ldr	r2, [pc, #56]	; (800062c <SystemInit+0x5c>)
 80005f2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80005f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80005fa:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80005fc:	4b0b      	ldr	r3, [pc, #44]	; (800062c <SystemInit+0x5c>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a0a      	ldr	r2, [pc, #40]	; (800062c <SystemInit+0x5c>)
 8000602:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000606:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000608:	4b08      	ldr	r3, [pc, #32]	; (800062c <SystemInit+0x5c>)
 800060a:	685b      	ldr	r3, [r3, #4]
 800060c:	4a07      	ldr	r2, [pc, #28]	; (800062c <SystemInit+0x5c>)
 800060e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000612:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000614:	4b05      	ldr	r3, [pc, #20]	; (800062c <SystemInit+0x5c>)
 8000616:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800061a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800061c:	4b05      	ldr	r3, [pc, #20]	; (8000634 <SystemInit+0x64>)
 800061e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000622:	609a      	str	r2, [r3, #8]
#endif 
}
 8000624:	bf00      	nop
 8000626:	46bd      	mov	sp, r7
 8000628:	bc80      	pop	{r7}
 800062a:	4770      	bx	lr
 800062c:	40021000 	.word	0x40021000
 8000630:	f8ff0000 	.word	0xf8ff0000
 8000634:	e000ed00 	.word	0xe000ed00

08000638 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000638:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800063a:	e003      	b.n	8000644 <LoopCopyDataInit>

0800063c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800063c:	4b0b      	ldr	r3, [pc, #44]	; (800066c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800063e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000640:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000642:	3104      	adds	r1, #4

08000644 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000644:	480a      	ldr	r0, [pc, #40]	; (8000670 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000646:	4b0b      	ldr	r3, [pc, #44]	; (8000674 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000648:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800064a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800064c:	d3f6      	bcc.n	800063c <CopyDataInit>
  ldr r2, =_sbss
 800064e:	4a0a      	ldr	r2, [pc, #40]	; (8000678 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000650:	e002      	b.n	8000658 <LoopFillZerobss>

08000652 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000652:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000654:	f842 3b04 	str.w	r3, [r2], #4

08000658 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000658:	4b08      	ldr	r3, [pc, #32]	; (800067c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800065a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800065c:	d3f9      	bcc.n	8000652 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800065e:	f7ff ffb7 	bl	80005d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000662:	f001 fdb5 	bl	80021d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000666:	f7ff fd79 	bl	800015c <main>
  bx lr
 800066a:	4770      	bx	lr
  ldr r3, =_sidata
 800066c:	08003658 	.word	0x08003658
  ldr r0, =_sdata
 8000670:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000674:	20000078 	.word	0x20000078
  ldr r2, =_sbss
 8000678:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 800067c:	200001c8 	.word	0x200001c8

08000680 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000680:	e7fe      	b.n	8000680 <CAN1_RX1_IRQHandler>
	...

08000684 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000688:	4b08      	ldr	r3, [pc, #32]	; (80006ac <HAL_Init+0x28>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a07      	ldr	r2, [pc, #28]	; (80006ac <HAL_Init+0x28>)
 800068e:	f043 0310 	orr.w	r3, r3, #16
 8000692:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000694:	2003      	movs	r0, #3
 8000696:	f000 fd17 	bl	80010c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800069a:	2000      	movs	r0, #0
 800069c:	f000 f808 	bl	80006b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006a0:	f7ff fea2 	bl	80003e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006a4:	2300      	movs	r3, #0
}
 80006a6:	4618      	mov	r0, r3
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	40022000 	.word	0x40022000

080006b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006b8:	4b12      	ldr	r3, [pc, #72]	; (8000704 <HAL_InitTick+0x54>)
 80006ba:	681a      	ldr	r2, [r3, #0]
 80006bc:	4b12      	ldr	r3, [pc, #72]	; (8000708 <HAL_InitTick+0x58>)
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	4619      	mov	r1, r3
 80006c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80006ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80006ce:	4618      	mov	r0, r3
 80006d0:	f000 fd2f 	bl	8001132 <HAL_SYSTICK_Config>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006da:	2301      	movs	r3, #1
 80006dc:	e00e      	b.n	80006fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	2b0f      	cmp	r3, #15
 80006e2:	d80a      	bhi.n	80006fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006e4:	2200      	movs	r2, #0
 80006e6:	6879      	ldr	r1, [r7, #4]
 80006e8:	f04f 30ff 	mov.w	r0, #4294967295
 80006ec:	f000 fcf7 	bl	80010de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006f0:	4a06      	ldr	r2, [pc, #24]	; (800070c <HAL_InitTick+0x5c>)
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006f6:	2300      	movs	r3, #0
 80006f8:	e000      	b.n	80006fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006fa:	2301      	movs	r3, #1
}
 80006fc:	4618      	mov	r0, r3
 80006fe:	3708      	adds	r7, #8
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	20000000 	.word	0x20000000
 8000708:	20000008 	.word	0x20000008
 800070c:	20000004 	.word	0x20000004

08000710 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000714:	4b05      	ldr	r3, [pc, #20]	; (800072c <HAL_IncTick+0x1c>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	461a      	mov	r2, r3
 800071a:	4b05      	ldr	r3, [pc, #20]	; (8000730 <HAL_IncTick+0x20>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	4413      	add	r3, r2
 8000720:	4a03      	ldr	r2, [pc, #12]	; (8000730 <HAL_IncTick+0x20>)
 8000722:	6013      	str	r3, [r2, #0]
}
 8000724:	bf00      	nop
 8000726:	46bd      	mov	sp, r7
 8000728:	bc80      	pop	{r7}
 800072a:	4770      	bx	lr
 800072c:	20000008 	.word	0x20000008
 8000730:	200001c0 	.word	0x200001c0

08000734 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  return uwTick;
 8000738:	4b02      	ldr	r3, [pc, #8]	; (8000744 <HAL_GetTick+0x10>)
 800073a:	681b      	ldr	r3, [r3, #0]
}
 800073c:	4618      	mov	r0, r3
 800073e:	46bd      	mov	sp, r7
 8000740:	bc80      	pop	{r7}
 8000742:	4770      	bx	lr
 8000744:	200001c0 	.word	0x200001c0

08000748 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b086      	sub	sp, #24
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000750:	2300      	movs	r3, #0
 8000752:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000754:	2300      	movs	r3, #0
 8000756:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000758:	2300      	movs	r3, #0
 800075a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800075c:	2300      	movs	r3, #0
 800075e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d101      	bne.n	800076a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000766:	2301      	movs	r3, #1
 8000768:	e0be      	b.n	80008e8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	689b      	ldr	r3, [r3, #8]
 800076e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000774:	2b00      	cmp	r3, #0
 8000776:	d109      	bne.n	800078c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	2200      	movs	r2, #0
 800077c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	2200      	movs	r2, #0
 8000782:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000786:	6878      	ldr	r0, [r7, #4]
 8000788:	f7ff fe60 	bl	800044c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800078c:	6878      	ldr	r0, [r7, #4]
 800078e:	f000 fb8b 	bl	8000ea8 <ADC_ConversionStop_Disable>
 8000792:	4603      	mov	r3, r0
 8000794:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800079a:	f003 0310 	and.w	r3, r3, #16
 800079e:	2b00      	cmp	r3, #0
 80007a0:	f040 8099 	bne.w	80008d6 <HAL_ADC_Init+0x18e>
 80007a4:	7dfb      	ldrb	r3, [r7, #23]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	f040 8095 	bne.w	80008d6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007b0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80007b4:	f023 0302 	bic.w	r3, r3, #2
 80007b8:	f043 0202 	orr.w	r2, r3, #2
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80007c8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	7b1b      	ldrb	r3, [r3, #12]
 80007ce:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80007d0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80007d2:	68ba      	ldr	r2, [r7, #8]
 80007d4:	4313      	orrs	r3, r2
 80007d6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	689b      	ldr	r3, [r3, #8]
 80007dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80007e0:	d003      	beq.n	80007ea <HAL_ADC_Init+0xa2>
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	689b      	ldr	r3, [r3, #8]
 80007e6:	2b01      	cmp	r3, #1
 80007e8:	d102      	bne.n	80007f0 <HAL_ADC_Init+0xa8>
 80007ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007ee:	e000      	b.n	80007f2 <HAL_ADC_Init+0xaa>
 80007f0:	2300      	movs	r3, #0
 80007f2:	693a      	ldr	r2, [r7, #16]
 80007f4:	4313      	orrs	r3, r2
 80007f6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	7d1b      	ldrb	r3, [r3, #20]
 80007fc:	2b01      	cmp	r3, #1
 80007fe:	d119      	bne.n	8000834 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	7b1b      	ldrb	r3, [r3, #12]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d109      	bne.n	800081c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	699b      	ldr	r3, [r3, #24]
 800080c:	3b01      	subs	r3, #1
 800080e:	035a      	lsls	r2, r3, #13
 8000810:	693b      	ldr	r3, [r7, #16]
 8000812:	4313      	orrs	r3, r2
 8000814:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000818:	613b      	str	r3, [r7, #16]
 800081a:	e00b      	b.n	8000834 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000820:	f043 0220 	orr.w	r2, r3, #32
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800082c:	f043 0201 	orr.w	r2, r3, #1
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	685b      	ldr	r3, [r3, #4]
 800083a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	693a      	ldr	r2, [r7, #16]
 8000844:	430a      	orrs	r2, r1
 8000846:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	689a      	ldr	r2, [r3, #8]
 800084e:	4b28      	ldr	r3, [pc, #160]	; (80008f0 <HAL_ADC_Init+0x1a8>)
 8000850:	4013      	ands	r3, r2
 8000852:	687a      	ldr	r2, [r7, #4]
 8000854:	6812      	ldr	r2, [r2, #0]
 8000856:	68b9      	ldr	r1, [r7, #8]
 8000858:	430b      	orrs	r3, r1
 800085a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	689b      	ldr	r3, [r3, #8]
 8000860:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000864:	d003      	beq.n	800086e <HAL_ADC_Init+0x126>
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	689b      	ldr	r3, [r3, #8]
 800086a:	2b01      	cmp	r3, #1
 800086c:	d104      	bne.n	8000878 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	691b      	ldr	r3, [r3, #16]
 8000872:	3b01      	subs	r3, #1
 8000874:	051b      	lsls	r3, r3, #20
 8000876:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800087e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	68fa      	ldr	r2, [r7, #12]
 8000888:	430a      	orrs	r2, r1
 800088a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	689a      	ldr	r2, [r3, #8]
 8000892:	4b18      	ldr	r3, [pc, #96]	; (80008f4 <HAL_ADC_Init+0x1ac>)
 8000894:	4013      	ands	r3, r2
 8000896:	68ba      	ldr	r2, [r7, #8]
 8000898:	429a      	cmp	r2, r3
 800089a:	d10b      	bne.n	80008b4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	2200      	movs	r2, #0
 80008a0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008a6:	f023 0303 	bic.w	r3, r3, #3
 80008aa:	f043 0201 	orr.w	r2, r3, #1
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80008b2:	e018      	b.n	80008e6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008b8:	f023 0312 	bic.w	r3, r3, #18
 80008bc:	f043 0210 	orr.w	r2, r3, #16
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008c8:	f043 0201 	orr.w	r2, r3, #1
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80008d0:	2301      	movs	r3, #1
 80008d2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80008d4:	e007      	b.n	80008e6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008da:	f043 0210 	orr.w	r2, r3, #16
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80008e2:	2301      	movs	r3, #1
 80008e4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80008e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80008e8:	4618      	mov	r0, r3
 80008ea:	3718      	adds	r7, #24
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	ffe1f7fd 	.word	0xffe1f7fd
 80008f4:	ff1f0efe 	.word	0xff1f0efe

080008f8 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b084      	sub	sp, #16
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000900:	2300      	movs	r3, #0
 8000902:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800090a:	2b01      	cmp	r3, #1
 800090c:	d101      	bne.n	8000912 <HAL_ADC_Start_IT+0x1a>
 800090e:	2302      	movs	r3, #2
 8000910:	e0a0      	b.n	8000a54 <HAL_ADC_Start_IT+0x15c>
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	2201      	movs	r2, #1
 8000916:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800091a:	6878      	ldr	r0, [r7, #4]
 800091c:	f000 fa72 	bl	8000e04 <ADC_Enable>
 8000920:	4603      	mov	r3, r0
 8000922:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000924:	7bfb      	ldrb	r3, [r7, #15]
 8000926:	2b00      	cmp	r3, #0
 8000928:	f040 808f 	bne.w	8000a4a <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000930:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000934:	f023 0301 	bic.w	r3, r3, #1
 8000938:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a45      	ldr	r2, [pc, #276]	; (8000a5c <HAL_ADC_Start_IT+0x164>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d105      	bne.n	8000956 <HAL_ADC_Start_IT+0x5e>
 800094a:	4b45      	ldr	r3, [pc, #276]	; (8000a60 <HAL_ADC_Start_IT+0x168>)
 800094c:	685b      	ldr	r3, [r3, #4]
 800094e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000952:	2b00      	cmp	r3, #0
 8000954:	d115      	bne.n	8000982 <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800095a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	685b      	ldr	r3, [r3, #4]
 8000968:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800096c:	2b00      	cmp	r3, #0
 800096e:	d026      	beq.n	80009be <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000974:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000978:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000980:	e01d      	b.n	80009be <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000986:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	4a33      	ldr	r2, [pc, #204]	; (8000a60 <HAL_ADC_Start_IT+0x168>)
 8000994:	4293      	cmp	r3, r2
 8000996:	d004      	beq.n	80009a2 <HAL_ADC_Start_IT+0xaa>
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a2f      	ldr	r2, [pc, #188]	; (8000a5c <HAL_ADC_Start_IT+0x164>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d10d      	bne.n	80009be <HAL_ADC_Start_IT+0xc6>
 80009a2:	4b2f      	ldr	r3, [pc, #188]	; (8000a60 <HAL_ADC_Start_IT+0x168>)
 80009a4:	685b      	ldr	r3, [r3, #4]
 80009a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d007      	beq.n	80009be <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009b2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80009b6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d006      	beq.n	80009d8 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009ce:	f023 0206 	bic.w	r2, r3, #6
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	62da      	str	r2, [r3, #44]	; 0x2c
 80009d6:	e002      	b.n	80009de <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	2200      	movs	r2, #0
 80009dc:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	2200      	movs	r2, #0
 80009e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	f06f 0202 	mvn.w	r2, #2
 80009ee:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	685a      	ldr	r2, [r3, #4]
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	f042 0220 	orr.w	r2, r2, #32
 80009fe:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	689b      	ldr	r3, [r3, #8]
 8000a06:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000a0a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000a0e:	d113      	bne.n	8000a38 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000a14:	4a11      	ldr	r2, [pc, #68]	; (8000a5c <HAL_ADC_Start_IT+0x164>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d105      	bne.n	8000a26 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000a1a:	4b11      	ldr	r3, [pc, #68]	; (8000a60 <HAL_ADC_Start_IT+0x168>)
 8000a1c:	685b      	ldr	r3, [r3, #4]
 8000a1e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d108      	bne.n	8000a38 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	689a      	ldr	r2, [r3, #8]
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000a34:	609a      	str	r2, [r3, #8]
 8000a36:	e00c      	b.n	8000a52 <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	689a      	ldr	r2, [r3, #8]
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000a46:	609a      	str	r2, [r3, #8]
 8000a48:	e003      	b.n	8000a52 <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000a52:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	3710      	adds	r7, #16
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	40012800 	.word	0x40012800
 8000a60:	40012400 	.word	0x40012400

08000a64 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b083      	sub	sp, #12
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	370c      	adds	r7, #12
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bc80      	pop	{r7}
 8000a7a:	4770      	bx	lr

08000a7c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	685b      	ldr	r3, [r3, #4]
 8000a8a:	f003 0320 	and.w	r3, r3, #32
 8000a8e:	2b20      	cmp	r3, #32
 8000a90:	d140      	bne.n	8000b14 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f003 0302 	and.w	r3, r3, #2
 8000a9c:	2b02      	cmp	r3, #2
 8000a9e:	d139      	bne.n	8000b14 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000aa4:	f003 0310 	and.w	r3, r3, #16
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d105      	bne.n	8000ab8 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ab0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	689b      	ldr	r3, [r3, #8]
 8000abe:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000ac2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000ac6:	d11d      	bne.n	8000b04 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d119      	bne.n	8000b04 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	685a      	ldr	r2, [r3, #4]
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	f022 0220 	bic.w	r2, r2, #32
 8000ade:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ae4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000af0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d105      	bne.n	8000b04 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000afc:	f043 0201 	orr.w	r2, r3, #1
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8000b04:	6878      	ldr	r0, [r7, #4]
 8000b06:	f7ff fc57 	bl	80003b8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	f06f 0212 	mvn.w	r2, #18
 8000b12:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	685b      	ldr	r3, [r3, #4]
 8000b1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b1e:	2b80      	cmp	r3, #128	; 0x80
 8000b20:	d14f      	bne.n	8000bc2 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	f003 0304 	and.w	r3, r3, #4
 8000b2c:	2b04      	cmp	r3, #4
 8000b2e:	d148      	bne.n	8000bc2 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b34:	f003 0310 	and.w	r3, r3, #16
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d105      	bne.n	8000b48 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b40:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	689b      	ldr	r3, [r3, #8]
 8000b4e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8000b52:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8000b56:	d012      	beq.n	8000b7e <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	685b      	ldr	r3, [r3, #4]
 8000b5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d125      	bne.n	8000bb2 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	689b      	ldr	r3, [r3, #8]
 8000b6c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000b70:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000b74:	d11d      	bne.n	8000bb2 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d119      	bne.n	8000bb2 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	685a      	ldr	r2, [r3, #4]
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000b8c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d105      	bne.n	8000bb2 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000baa:	f043 0201 	orr.w	r2, r3, #1
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000bb2:	6878      	ldr	r0, [r7, #4]
 8000bb4:	f000 f9b2 	bl	8000f1c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f06f 020c 	mvn.w	r2, #12
 8000bc0:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bcc:	2b40      	cmp	r3, #64	; 0x40
 8000bce:	d114      	bne.n	8000bfa <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	f003 0301 	and.w	r3, r3, #1
 8000bda:	2b01      	cmp	r3, #1
 8000bdc:	d10d      	bne.n	8000bfa <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000be2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000bea:	6878      	ldr	r0, [r7, #4]
 8000bec:	f000 f809 	bl	8000c02 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	f06f 0201 	mvn.w	r2, #1
 8000bf8:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8000bfa:	bf00      	nop
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}

08000c02 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000c02:	b480      	push	{r7}
 8000c04:	b083      	sub	sp, #12
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8000c0a:	bf00      	nop
 8000c0c:	370c      	adds	r7, #12
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bc80      	pop	{r7}
 8000c12:	4770      	bx	lr

08000c14 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000c14:	b480      	push	{r7}
 8000c16:	b085      	sub	sp, #20
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
 8000c1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000c22:	2300      	movs	r3, #0
 8000c24:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d101      	bne.n	8000c34 <HAL_ADC_ConfigChannel+0x20>
 8000c30:	2302      	movs	r3, #2
 8000c32:	e0dc      	b.n	8000dee <HAL_ADC_ConfigChannel+0x1da>
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	2201      	movs	r2, #1
 8000c38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	2b06      	cmp	r3, #6
 8000c42:	d81c      	bhi.n	8000c7e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	685a      	ldr	r2, [r3, #4]
 8000c4e:	4613      	mov	r3, r2
 8000c50:	009b      	lsls	r3, r3, #2
 8000c52:	4413      	add	r3, r2
 8000c54:	3b05      	subs	r3, #5
 8000c56:	221f      	movs	r2, #31
 8000c58:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5c:	43db      	mvns	r3, r3
 8000c5e:	4019      	ands	r1, r3
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	6818      	ldr	r0, [r3, #0]
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	685a      	ldr	r2, [r3, #4]
 8000c68:	4613      	mov	r3, r2
 8000c6a:	009b      	lsls	r3, r3, #2
 8000c6c:	4413      	add	r3, r2
 8000c6e:	3b05      	subs	r3, #5
 8000c70:	fa00 f203 	lsl.w	r2, r0, r3
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	430a      	orrs	r2, r1
 8000c7a:	635a      	str	r2, [r3, #52]	; 0x34
 8000c7c:	e03c      	b.n	8000cf8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	2b0c      	cmp	r3, #12
 8000c84:	d81c      	bhi.n	8000cc0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	685a      	ldr	r2, [r3, #4]
 8000c90:	4613      	mov	r3, r2
 8000c92:	009b      	lsls	r3, r3, #2
 8000c94:	4413      	add	r3, r2
 8000c96:	3b23      	subs	r3, #35	; 0x23
 8000c98:	221f      	movs	r2, #31
 8000c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9e:	43db      	mvns	r3, r3
 8000ca0:	4019      	ands	r1, r3
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	6818      	ldr	r0, [r3, #0]
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	685a      	ldr	r2, [r3, #4]
 8000caa:	4613      	mov	r3, r2
 8000cac:	009b      	lsls	r3, r3, #2
 8000cae:	4413      	add	r3, r2
 8000cb0:	3b23      	subs	r3, #35	; 0x23
 8000cb2:	fa00 f203 	lsl.w	r2, r0, r3
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	430a      	orrs	r2, r1
 8000cbc:	631a      	str	r2, [r3, #48]	; 0x30
 8000cbe:	e01b      	b.n	8000cf8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	685a      	ldr	r2, [r3, #4]
 8000cca:	4613      	mov	r3, r2
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	4413      	add	r3, r2
 8000cd0:	3b41      	subs	r3, #65	; 0x41
 8000cd2:	221f      	movs	r2, #31
 8000cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd8:	43db      	mvns	r3, r3
 8000cda:	4019      	ands	r1, r3
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	6818      	ldr	r0, [r3, #0]
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	685a      	ldr	r2, [r3, #4]
 8000ce4:	4613      	mov	r3, r2
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	4413      	add	r3, r2
 8000cea:	3b41      	subs	r3, #65	; 0x41
 8000cec:	fa00 f203 	lsl.w	r2, r0, r3
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	430a      	orrs	r2, r1
 8000cf6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	2b09      	cmp	r3, #9
 8000cfe:	d91c      	bls.n	8000d3a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	68d9      	ldr	r1, [r3, #12]
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	681a      	ldr	r2, [r3, #0]
 8000d0a:	4613      	mov	r3, r2
 8000d0c:	005b      	lsls	r3, r3, #1
 8000d0e:	4413      	add	r3, r2
 8000d10:	3b1e      	subs	r3, #30
 8000d12:	2207      	movs	r2, #7
 8000d14:	fa02 f303 	lsl.w	r3, r2, r3
 8000d18:	43db      	mvns	r3, r3
 8000d1a:	4019      	ands	r1, r3
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	6898      	ldr	r0, [r3, #8]
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	4613      	mov	r3, r2
 8000d26:	005b      	lsls	r3, r3, #1
 8000d28:	4413      	add	r3, r2
 8000d2a:	3b1e      	subs	r3, #30
 8000d2c:	fa00 f203 	lsl.w	r2, r0, r3
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	430a      	orrs	r2, r1
 8000d36:	60da      	str	r2, [r3, #12]
 8000d38:	e019      	b.n	8000d6e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	6919      	ldr	r1, [r3, #16]
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	4613      	mov	r3, r2
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	4413      	add	r3, r2
 8000d4a:	2207      	movs	r2, #7
 8000d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d50:	43db      	mvns	r3, r3
 8000d52:	4019      	ands	r1, r3
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	6898      	ldr	r0, [r3, #8]
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	4613      	mov	r3, r2
 8000d5e:	005b      	lsls	r3, r3, #1
 8000d60:	4413      	add	r3, r2
 8000d62:	fa00 f203 	lsl.w	r2, r0, r3
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	430a      	orrs	r2, r1
 8000d6c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	2b10      	cmp	r3, #16
 8000d74:	d003      	beq.n	8000d7e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000d7a:	2b11      	cmp	r3, #17
 8000d7c:	d132      	bne.n	8000de4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4a1d      	ldr	r2, [pc, #116]	; (8000df8 <HAL_ADC_ConfigChannel+0x1e4>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d125      	bne.n	8000dd4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	689b      	ldr	r3, [r3, #8]
 8000d8e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d126      	bne.n	8000de4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	689a      	ldr	r2, [r3, #8]
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000da4:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	2b10      	cmp	r3, #16
 8000dac:	d11a      	bne.n	8000de4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000dae:	4b13      	ldr	r3, [pc, #76]	; (8000dfc <HAL_ADC_ConfigChannel+0x1e8>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a13      	ldr	r2, [pc, #76]	; (8000e00 <HAL_ADC_ConfigChannel+0x1ec>)
 8000db4:	fba2 2303 	umull	r2, r3, r2, r3
 8000db8:	0c9a      	lsrs	r2, r3, #18
 8000dba:	4613      	mov	r3, r2
 8000dbc:	009b      	lsls	r3, r3, #2
 8000dbe:	4413      	add	r3, r2
 8000dc0:	005b      	lsls	r3, r3, #1
 8000dc2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000dc4:	e002      	b.n	8000dcc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000dc6:	68bb      	ldr	r3, [r7, #8]
 8000dc8:	3b01      	subs	r3, #1
 8000dca:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d1f9      	bne.n	8000dc6 <HAL_ADC_ConfigChannel+0x1b2>
 8000dd2:	e007      	b.n	8000de4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dd8:	f043 0220 	orr.w	r2, r3, #32
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000de0:	2301      	movs	r3, #1
 8000de2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2200      	movs	r2, #0
 8000de8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3714      	adds	r7, #20
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bc80      	pop	{r7}
 8000df6:	4770      	bx	lr
 8000df8:	40012400 	.word	0x40012400
 8000dfc:	20000000 	.word	0x20000000
 8000e00:	431bde83 	.word	0x431bde83

08000e04 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b084      	sub	sp, #16
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000e10:	2300      	movs	r3, #0
 8000e12:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	689b      	ldr	r3, [r3, #8]
 8000e1a:	f003 0301 	and.w	r3, r3, #1
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	d039      	beq.n	8000e96 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	689a      	ldr	r2, [r3, #8]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f042 0201 	orr.w	r2, r2, #1
 8000e30:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000e32:	4b1b      	ldr	r3, [pc, #108]	; (8000ea0 <ADC_Enable+0x9c>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a1b      	ldr	r2, [pc, #108]	; (8000ea4 <ADC_Enable+0xa0>)
 8000e38:	fba2 2303 	umull	r2, r3, r2, r3
 8000e3c:	0c9b      	lsrs	r3, r3, #18
 8000e3e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000e40:	e002      	b.n	8000e48 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	3b01      	subs	r3, #1
 8000e46:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d1f9      	bne.n	8000e42 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000e4e:	f7ff fc71 	bl	8000734 <HAL_GetTick>
 8000e52:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000e54:	e018      	b.n	8000e88 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000e56:	f7ff fc6d 	bl	8000734 <HAL_GetTick>
 8000e5a:	4602      	mov	r2, r0
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	1ad3      	subs	r3, r2, r3
 8000e60:	2b02      	cmp	r3, #2
 8000e62:	d911      	bls.n	8000e88 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e68:	f043 0210 	orr.w	r2, r3, #16
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e74:	f043 0201 	orr.w	r2, r3, #1
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2200      	movs	r2, #0
 8000e80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8000e84:	2301      	movs	r3, #1
 8000e86:	e007      	b.n	8000e98 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	689b      	ldr	r3, [r3, #8]
 8000e8e:	f003 0301 	and.w	r3, r3, #1
 8000e92:	2b01      	cmp	r3, #1
 8000e94:	d1df      	bne.n	8000e56 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000e96:	2300      	movs	r3, #0
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	3710      	adds	r7, #16
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	20000000 	.word	0x20000000
 8000ea4:	431bde83 	.word	0x431bde83

08000ea8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	689b      	ldr	r3, [r3, #8]
 8000eba:	f003 0301 	and.w	r3, r3, #1
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d127      	bne.n	8000f12 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	689a      	ldr	r2, [r3, #8]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f022 0201 	bic.w	r2, r2, #1
 8000ed0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000ed2:	f7ff fc2f 	bl	8000734 <HAL_GetTick>
 8000ed6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000ed8:	e014      	b.n	8000f04 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000eda:	f7ff fc2b 	bl	8000734 <HAL_GetTick>
 8000ede:	4602      	mov	r2, r0
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	1ad3      	subs	r3, r2, r3
 8000ee4:	2b02      	cmp	r3, #2
 8000ee6:	d90d      	bls.n	8000f04 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eec:	f043 0210 	orr.w	r2, r3, #16
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ef8:	f043 0201 	orr.w	r2, r3, #1
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8000f00:	2301      	movs	r3, #1
 8000f02:	e007      	b.n	8000f14 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	689b      	ldr	r3, [r3, #8]
 8000f0a:	f003 0301 	and.w	r3, r3, #1
 8000f0e:	2b01      	cmp	r3, #1
 8000f10:	d0e3      	beq.n	8000eda <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000f12:	2300      	movs	r3, #0
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	3710      	adds	r7, #16
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8000f24:	bf00      	nop
 8000f26:	370c      	adds	r7, #12
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bc80      	pop	{r7}
 8000f2c:	4770      	bx	lr
	...

08000f30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b085      	sub	sp, #20
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	f003 0307 	and.w	r3, r3, #7
 8000f3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f40:	4b0c      	ldr	r3, [pc, #48]	; (8000f74 <__NVIC_SetPriorityGrouping+0x44>)
 8000f42:	68db      	ldr	r3, [r3, #12]
 8000f44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f46:	68ba      	ldr	r2, [r7, #8]
 8000f48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f62:	4a04      	ldr	r2, [pc, #16]	; (8000f74 <__NVIC_SetPriorityGrouping+0x44>)
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	60d3      	str	r3, [r2, #12]
}
 8000f68:	bf00      	nop
 8000f6a:	3714      	adds	r7, #20
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bc80      	pop	{r7}
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	e000ed00 	.word	0xe000ed00

08000f78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f7c:	4b04      	ldr	r3, [pc, #16]	; (8000f90 <__NVIC_GetPriorityGrouping+0x18>)
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	0a1b      	lsrs	r3, r3, #8
 8000f82:	f003 0307 	and.w	r3, r3, #7
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bc80      	pop	{r7}
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	e000ed00 	.word	0xe000ed00

08000f94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	db0b      	blt.n	8000fbe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
 8000fa8:	f003 021f 	and.w	r2, r3, #31
 8000fac:	4906      	ldr	r1, [pc, #24]	; (8000fc8 <__NVIC_EnableIRQ+0x34>)
 8000fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb2:	095b      	lsrs	r3, r3, #5
 8000fb4:	2001      	movs	r0, #1
 8000fb6:	fa00 f202 	lsl.w	r2, r0, r2
 8000fba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fbe:	bf00      	nop
 8000fc0:	370c      	adds	r7, #12
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bc80      	pop	{r7}
 8000fc6:	4770      	bx	lr
 8000fc8:	e000e100 	.word	0xe000e100

08000fcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	6039      	str	r1, [r7, #0]
 8000fd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	db0a      	blt.n	8000ff6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	b2da      	uxtb	r2, r3
 8000fe4:	490c      	ldr	r1, [pc, #48]	; (8001018 <__NVIC_SetPriority+0x4c>)
 8000fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fea:	0112      	lsls	r2, r2, #4
 8000fec:	b2d2      	uxtb	r2, r2
 8000fee:	440b      	add	r3, r1
 8000ff0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ff4:	e00a      	b.n	800100c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	b2da      	uxtb	r2, r3
 8000ffa:	4908      	ldr	r1, [pc, #32]	; (800101c <__NVIC_SetPriority+0x50>)
 8000ffc:	79fb      	ldrb	r3, [r7, #7]
 8000ffe:	f003 030f 	and.w	r3, r3, #15
 8001002:	3b04      	subs	r3, #4
 8001004:	0112      	lsls	r2, r2, #4
 8001006:	b2d2      	uxtb	r2, r2
 8001008:	440b      	add	r3, r1
 800100a:	761a      	strb	r2, [r3, #24]
}
 800100c:	bf00      	nop
 800100e:	370c      	adds	r7, #12
 8001010:	46bd      	mov	sp, r7
 8001012:	bc80      	pop	{r7}
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	e000e100 	.word	0xe000e100
 800101c:	e000ed00 	.word	0xe000ed00

08001020 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001020:	b480      	push	{r7}
 8001022:	b089      	sub	sp, #36	; 0x24
 8001024:	af00      	add	r7, sp, #0
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	60b9      	str	r1, [r7, #8]
 800102a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	f003 0307 	and.w	r3, r3, #7
 8001032:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	f1c3 0307 	rsb	r3, r3, #7
 800103a:	2b04      	cmp	r3, #4
 800103c:	bf28      	it	cs
 800103e:	2304      	movcs	r3, #4
 8001040:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	3304      	adds	r3, #4
 8001046:	2b06      	cmp	r3, #6
 8001048:	d902      	bls.n	8001050 <NVIC_EncodePriority+0x30>
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	3b03      	subs	r3, #3
 800104e:	e000      	b.n	8001052 <NVIC_EncodePriority+0x32>
 8001050:	2300      	movs	r3, #0
 8001052:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001054:	f04f 32ff 	mov.w	r2, #4294967295
 8001058:	69bb      	ldr	r3, [r7, #24]
 800105a:	fa02 f303 	lsl.w	r3, r2, r3
 800105e:	43da      	mvns	r2, r3
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	401a      	ands	r2, r3
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001068:	f04f 31ff 	mov.w	r1, #4294967295
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	fa01 f303 	lsl.w	r3, r1, r3
 8001072:	43d9      	mvns	r1, r3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001078:	4313      	orrs	r3, r2
         );
}
 800107a:	4618      	mov	r0, r3
 800107c:	3724      	adds	r7, #36	; 0x24
 800107e:	46bd      	mov	sp, r7
 8001080:	bc80      	pop	{r7}
 8001082:	4770      	bx	lr

08001084 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	3b01      	subs	r3, #1
 8001090:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001094:	d301      	bcc.n	800109a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001096:	2301      	movs	r3, #1
 8001098:	e00f      	b.n	80010ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800109a:	4a0a      	ldr	r2, [pc, #40]	; (80010c4 <SysTick_Config+0x40>)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	3b01      	subs	r3, #1
 80010a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010a2:	210f      	movs	r1, #15
 80010a4:	f04f 30ff 	mov.w	r0, #4294967295
 80010a8:	f7ff ff90 	bl	8000fcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010ac:	4b05      	ldr	r3, [pc, #20]	; (80010c4 <SysTick_Config+0x40>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010b2:	4b04      	ldr	r3, [pc, #16]	; (80010c4 <SysTick_Config+0x40>)
 80010b4:	2207      	movs	r2, #7
 80010b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010b8:	2300      	movs	r3, #0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	e000e010 	.word	0xe000e010

080010c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f7ff ff2d 	bl	8000f30 <__NVIC_SetPriorityGrouping>
}
 80010d6:	bf00      	nop
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010de:	b580      	push	{r7, lr}
 80010e0:	b086      	sub	sp, #24
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	4603      	mov	r3, r0
 80010e6:	60b9      	str	r1, [r7, #8]
 80010e8:	607a      	str	r2, [r7, #4]
 80010ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010ec:	2300      	movs	r3, #0
 80010ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010f0:	f7ff ff42 	bl	8000f78 <__NVIC_GetPriorityGrouping>
 80010f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010f6:	687a      	ldr	r2, [r7, #4]
 80010f8:	68b9      	ldr	r1, [r7, #8]
 80010fa:	6978      	ldr	r0, [r7, #20]
 80010fc:	f7ff ff90 	bl	8001020 <NVIC_EncodePriority>
 8001100:	4602      	mov	r2, r0
 8001102:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001106:	4611      	mov	r1, r2
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff ff5f 	bl	8000fcc <__NVIC_SetPriority>
}
 800110e:	bf00      	nop
 8001110:	3718      	adds	r7, #24
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}

08001116 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001116:	b580      	push	{r7, lr}
 8001118:	b082      	sub	sp, #8
 800111a:	af00      	add	r7, sp, #0
 800111c:	4603      	mov	r3, r0
 800111e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001120:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff ff35 	bl	8000f94 <__NVIC_EnableIRQ>
}
 800112a:	bf00      	nop
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}

08001132 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001132:	b580      	push	{r7, lr}
 8001134:	b082      	sub	sp, #8
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f7ff ffa2 	bl	8001084 <SysTick_Config>
 8001140:	4603      	mov	r3, r0
}
 8001142:	4618      	mov	r0, r3
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
	...

0800114c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800114c:	b480      	push	{r7}
 800114e:	b08b      	sub	sp, #44	; 0x2c
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001156:	2300      	movs	r3, #0
 8001158:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800115a:	2300      	movs	r3, #0
 800115c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800115e:	e127      	b.n	80013b0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001160:	2201      	movs	r2, #1
 8001162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	69fa      	ldr	r2, [r7, #28]
 8001170:	4013      	ands	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	429a      	cmp	r2, r3
 800117a:	f040 8116 	bne.w	80013aa <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	2b12      	cmp	r3, #18
 8001184:	d034      	beq.n	80011f0 <HAL_GPIO_Init+0xa4>
 8001186:	2b12      	cmp	r3, #18
 8001188:	d80d      	bhi.n	80011a6 <HAL_GPIO_Init+0x5a>
 800118a:	2b02      	cmp	r3, #2
 800118c:	d02b      	beq.n	80011e6 <HAL_GPIO_Init+0x9a>
 800118e:	2b02      	cmp	r3, #2
 8001190:	d804      	bhi.n	800119c <HAL_GPIO_Init+0x50>
 8001192:	2b00      	cmp	r3, #0
 8001194:	d031      	beq.n	80011fa <HAL_GPIO_Init+0xae>
 8001196:	2b01      	cmp	r3, #1
 8001198:	d01c      	beq.n	80011d4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800119a:	e048      	b.n	800122e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800119c:	2b03      	cmp	r3, #3
 800119e:	d043      	beq.n	8001228 <HAL_GPIO_Init+0xdc>
 80011a0:	2b11      	cmp	r3, #17
 80011a2:	d01b      	beq.n	80011dc <HAL_GPIO_Init+0x90>
          break;
 80011a4:	e043      	b.n	800122e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80011a6:	4a89      	ldr	r2, [pc, #548]	; (80013cc <HAL_GPIO_Init+0x280>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d026      	beq.n	80011fa <HAL_GPIO_Init+0xae>
 80011ac:	4a87      	ldr	r2, [pc, #540]	; (80013cc <HAL_GPIO_Init+0x280>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d806      	bhi.n	80011c0 <HAL_GPIO_Init+0x74>
 80011b2:	4a87      	ldr	r2, [pc, #540]	; (80013d0 <HAL_GPIO_Init+0x284>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d020      	beq.n	80011fa <HAL_GPIO_Init+0xae>
 80011b8:	4a86      	ldr	r2, [pc, #536]	; (80013d4 <HAL_GPIO_Init+0x288>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d01d      	beq.n	80011fa <HAL_GPIO_Init+0xae>
          break;
 80011be:	e036      	b.n	800122e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80011c0:	4a85      	ldr	r2, [pc, #532]	; (80013d8 <HAL_GPIO_Init+0x28c>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d019      	beq.n	80011fa <HAL_GPIO_Init+0xae>
 80011c6:	4a85      	ldr	r2, [pc, #532]	; (80013dc <HAL_GPIO_Init+0x290>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d016      	beq.n	80011fa <HAL_GPIO_Init+0xae>
 80011cc:	4a84      	ldr	r2, [pc, #528]	; (80013e0 <HAL_GPIO_Init+0x294>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d013      	beq.n	80011fa <HAL_GPIO_Init+0xae>
          break;
 80011d2:	e02c      	b.n	800122e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	623b      	str	r3, [r7, #32]
          break;
 80011da:	e028      	b.n	800122e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	3304      	adds	r3, #4
 80011e2:	623b      	str	r3, [r7, #32]
          break;
 80011e4:	e023      	b.n	800122e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	68db      	ldr	r3, [r3, #12]
 80011ea:	3308      	adds	r3, #8
 80011ec:	623b      	str	r3, [r7, #32]
          break;
 80011ee:	e01e      	b.n	800122e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	330c      	adds	r3, #12
 80011f6:	623b      	str	r3, [r7, #32]
          break;
 80011f8:	e019      	b.n	800122e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d102      	bne.n	8001208 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001202:	2304      	movs	r3, #4
 8001204:	623b      	str	r3, [r7, #32]
          break;
 8001206:	e012      	b.n	800122e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	2b01      	cmp	r3, #1
 800120e:	d105      	bne.n	800121c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001210:	2308      	movs	r3, #8
 8001212:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	69fa      	ldr	r2, [r7, #28]
 8001218:	611a      	str	r2, [r3, #16]
          break;
 800121a:	e008      	b.n	800122e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800121c:	2308      	movs	r3, #8
 800121e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	69fa      	ldr	r2, [r7, #28]
 8001224:	615a      	str	r2, [r3, #20]
          break;
 8001226:	e002      	b.n	800122e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001228:	2300      	movs	r3, #0
 800122a:	623b      	str	r3, [r7, #32]
          break;
 800122c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800122e:	69bb      	ldr	r3, [r7, #24]
 8001230:	2bff      	cmp	r3, #255	; 0xff
 8001232:	d801      	bhi.n	8001238 <HAL_GPIO_Init+0xec>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	e001      	b.n	800123c <HAL_GPIO_Init+0xf0>
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	3304      	adds	r3, #4
 800123c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800123e:	69bb      	ldr	r3, [r7, #24]
 8001240:	2bff      	cmp	r3, #255	; 0xff
 8001242:	d802      	bhi.n	800124a <HAL_GPIO_Init+0xfe>
 8001244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	e002      	b.n	8001250 <HAL_GPIO_Init+0x104>
 800124a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800124c:	3b08      	subs	r3, #8
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	210f      	movs	r1, #15
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	fa01 f303 	lsl.w	r3, r1, r3
 800125e:	43db      	mvns	r3, r3
 8001260:	401a      	ands	r2, r3
 8001262:	6a39      	ldr	r1, [r7, #32]
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	fa01 f303 	lsl.w	r3, r1, r3
 800126a:	431a      	orrs	r2, r3
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001278:	2b00      	cmp	r3, #0
 800127a:	f000 8096 	beq.w	80013aa <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800127e:	4b59      	ldr	r3, [pc, #356]	; (80013e4 <HAL_GPIO_Init+0x298>)
 8001280:	699b      	ldr	r3, [r3, #24]
 8001282:	4a58      	ldr	r2, [pc, #352]	; (80013e4 <HAL_GPIO_Init+0x298>)
 8001284:	f043 0301 	orr.w	r3, r3, #1
 8001288:	6193      	str	r3, [r2, #24]
 800128a:	4b56      	ldr	r3, [pc, #344]	; (80013e4 <HAL_GPIO_Init+0x298>)
 800128c:	699b      	ldr	r3, [r3, #24]
 800128e:	f003 0301 	and.w	r3, r3, #1
 8001292:	60bb      	str	r3, [r7, #8]
 8001294:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001296:	4a54      	ldr	r2, [pc, #336]	; (80013e8 <HAL_GPIO_Init+0x29c>)
 8001298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129a:	089b      	lsrs	r3, r3, #2
 800129c:	3302      	adds	r3, #2
 800129e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012a2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80012a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a6:	f003 0303 	and.w	r3, r3, #3
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	220f      	movs	r2, #15
 80012ae:	fa02 f303 	lsl.w	r3, r2, r3
 80012b2:	43db      	mvns	r3, r3
 80012b4:	68fa      	ldr	r2, [r7, #12]
 80012b6:	4013      	ands	r3, r2
 80012b8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a4b      	ldr	r2, [pc, #300]	; (80013ec <HAL_GPIO_Init+0x2a0>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d013      	beq.n	80012ea <HAL_GPIO_Init+0x19e>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a4a      	ldr	r2, [pc, #296]	; (80013f0 <HAL_GPIO_Init+0x2a4>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d00d      	beq.n	80012e6 <HAL_GPIO_Init+0x19a>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a49      	ldr	r2, [pc, #292]	; (80013f4 <HAL_GPIO_Init+0x2a8>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d007      	beq.n	80012e2 <HAL_GPIO_Init+0x196>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4a48      	ldr	r2, [pc, #288]	; (80013f8 <HAL_GPIO_Init+0x2ac>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d101      	bne.n	80012de <HAL_GPIO_Init+0x192>
 80012da:	2303      	movs	r3, #3
 80012dc:	e006      	b.n	80012ec <HAL_GPIO_Init+0x1a0>
 80012de:	2304      	movs	r3, #4
 80012e0:	e004      	b.n	80012ec <HAL_GPIO_Init+0x1a0>
 80012e2:	2302      	movs	r3, #2
 80012e4:	e002      	b.n	80012ec <HAL_GPIO_Init+0x1a0>
 80012e6:	2301      	movs	r3, #1
 80012e8:	e000      	b.n	80012ec <HAL_GPIO_Init+0x1a0>
 80012ea:	2300      	movs	r3, #0
 80012ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012ee:	f002 0203 	and.w	r2, r2, #3
 80012f2:	0092      	lsls	r2, r2, #2
 80012f4:	4093      	lsls	r3, r2
 80012f6:	68fa      	ldr	r2, [r7, #12]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80012fc:	493a      	ldr	r1, [pc, #232]	; (80013e8 <HAL_GPIO_Init+0x29c>)
 80012fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001300:	089b      	lsrs	r3, r3, #2
 8001302:	3302      	adds	r3, #2
 8001304:	68fa      	ldr	r2, [r7, #12]
 8001306:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d006      	beq.n	8001324 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001316:	4b39      	ldr	r3, [pc, #228]	; (80013fc <HAL_GPIO_Init+0x2b0>)
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	4938      	ldr	r1, [pc, #224]	; (80013fc <HAL_GPIO_Init+0x2b0>)
 800131c:	69bb      	ldr	r3, [r7, #24]
 800131e:	4313      	orrs	r3, r2
 8001320:	600b      	str	r3, [r1, #0]
 8001322:	e006      	b.n	8001332 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001324:	4b35      	ldr	r3, [pc, #212]	; (80013fc <HAL_GPIO_Init+0x2b0>)
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	43db      	mvns	r3, r3
 800132c:	4933      	ldr	r1, [pc, #204]	; (80013fc <HAL_GPIO_Init+0x2b0>)
 800132e:	4013      	ands	r3, r2
 8001330:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d006      	beq.n	800134c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800133e:	4b2f      	ldr	r3, [pc, #188]	; (80013fc <HAL_GPIO_Init+0x2b0>)
 8001340:	685a      	ldr	r2, [r3, #4]
 8001342:	492e      	ldr	r1, [pc, #184]	; (80013fc <HAL_GPIO_Init+0x2b0>)
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	4313      	orrs	r3, r2
 8001348:	604b      	str	r3, [r1, #4]
 800134a:	e006      	b.n	800135a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800134c:	4b2b      	ldr	r3, [pc, #172]	; (80013fc <HAL_GPIO_Init+0x2b0>)
 800134e:	685a      	ldr	r2, [r3, #4]
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	43db      	mvns	r3, r3
 8001354:	4929      	ldr	r1, [pc, #164]	; (80013fc <HAL_GPIO_Init+0x2b0>)
 8001356:	4013      	ands	r3, r2
 8001358:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d006      	beq.n	8001374 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001366:	4b25      	ldr	r3, [pc, #148]	; (80013fc <HAL_GPIO_Init+0x2b0>)
 8001368:	689a      	ldr	r2, [r3, #8]
 800136a:	4924      	ldr	r1, [pc, #144]	; (80013fc <HAL_GPIO_Init+0x2b0>)
 800136c:	69bb      	ldr	r3, [r7, #24]
 800136e:	4313      	orrs	r3, r2
 8001370:	608b      	str	r3, [r1, #8]
 8001372:	e006      	b.n	8001382 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001374:	4b21      	ldr	r3, [pc, #132]	; (80013fc <HAL_GPIO_Init+0x2b0>)
 8001376:	689a      	ldr	r2, [r3, #8]
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	43db      	mvns	r3, r3
 800137c:	491f      	ldr	r1, [pc, #124]	; (80013fc <HAL_GPIO_Init+0x2b0>)
 800137e:	4013      	ands	r3, r2
 8001380:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800138a:	2b00      	cmp	r3, #0
 800138c:	d006      	beq.n	800139c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800138e:	4b1b      	ldr	r3, [pc, #108]	; (80013fc <HAL_GPIO_Init+0x2b0>)
 8001390:	68da      	ldr	r2, [r3, #12]
 8001392:	491a      	ldr	r1, [pc, #104]	; (80013fc <HAL_GPIO_Init+0x2b0>)
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	4313      	orrs	r3, r2
 8001398:	60cb      	str	r3, [r1, #12]
 800139a:	e006      	b.n	80013aa <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800139c:	4b17      	ldr	r3, [pc, #92]	; (80013fc <HAL_GPIO_Init+0x2b0>)
 800139e:	68da      	ldr	r2, [r3, #12]
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	43db      	mvns	r3, r3
 80013a4:	4915      	ldr	r1, [pc, #84]	; (80013fc <HAL_GPIO_Init+0x2b0>)
 80013a6:	4013      	ands	r3, r2
 80013a8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80013aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ac:	3301      	adds	r3, #1
 80013ae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b6:	fa22 f303 	lsr.w	r3, r2, r3
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	f47f aed0 	bne.w	8001160 <HAL_GPIO_Init+0x14>
  }
}
 80013c0:	bf00      	nop
 80013c2:	372c      	adds	r7, #44	; 0x2c
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bc80      	pop	{r7}
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	10210000 	.word	0x10210000
 80013d0:	10110000 	.word	0x10110000
 80013d4:	10120000 	.word	0x10120000
 80013d8:	10310000 	.word	0x10310000
 80013dc:	10320000 	.word	0x10320000
 80013e0:	10220000 	.word	0x10220000
 80013e4:	40021000 	.word	0x40021000
 80013e8:	40010000 	.word	0x40010000
 80013ec:	40010800 	.word	0x40010800
 80013f0:	40010c00 	.word	0x40010c00
 80013f4:	40011000 	.word	0x40011000
 80013f8:	40011400 	.word	0x40011400
 80013fc:	40010400 	.word	0x40010400

08001400 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b086      	sub	sp, #24
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d101      	bne.n	8001412 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e26c      	b.n	80018ec <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 0301 	and.w	r3, r3, #1
 800141a:	2b00      	cmp	r3, #0
 800141c:	f000 8087 	beq.w	800152e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001420:	4b92      	ldr	r3, [pc, #584]	; (800166c <HAL_RCC_OscConfig+0x26c>)
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f003 030c 	and.w	r3, r3, #12
 8001428:	2b04      	cmp	r3, #4
 800142a:	d00c      	beq.n	8001446 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800142c:	4b8f      	ldr	r3, [pc, #572]	; (800166c <HAL_RCC_OscConfig+0x26c>)
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f003 030c 	and.w	r3, r3, #12
 8001434:	2b08      	cmp	r3, #8
 8001436:	d112      	bne.n	800145e <HAL_RCC_OscConfig+0x5e>
 8001438:	4b8c      	ldr	r3, [pc, #560]	; (800166c <HAL_RCC_OscConfig+0x26c>)
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001440:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001444:	d10b      	bne.n	800145e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001446:	4b89      	ldr	r3, [pc, #548]	; (800166c <HAL_RCC_OscConfig+0x26c>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d06c      	beq.n	800152c <HAL_RCC_OscConfig+0x12c>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d168      	bne.n	800152c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e246      	b.n	80018ec <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001466:	d106      	bne.n	8001476 <HAL_RCC_OscConfig+0x76>
 8001468:	4b80      	ldr	r3, [pc, #512]	; (800166c <HAL_RCC_OscConfig+0x26c>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a7f      	ldr	r2, [pc, #508]	; (800166c <HAL_RCC_OscConfig+0x26c>)
 800146e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001472:	6013      	str	r3, [r2, #0]
 8001474:	e02e      	b.n	80014d4 <HAL_RCC_OscConfig+0xd4>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d10c      	bne.n	8001498 <HAL_RCC_OscConfig+0x98>
 800147e:	4b7b      	ldr	r3, [pc, #492]	; (800166c <HAL_RCC_OscConfig+0x26c>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a7a      	ldr	r2, [pc, #488]	; (800166c <HAL_RCC_OscConfig+0x26c>)
 8001484:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001488:	6013      	str	r3, [r2, #0]
 800148a:	4b78      	ldr	r3, [pc, #480]	; (800166c <HAL_RCC_OscConfig+0x26c>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a77      	ldr	r2, [pc, #476]	; (800166c <HAL_RCC_OscConfig+0x26c>)
 8001490:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001494:	6013      	str	r3, [r2, #0]
 8001496:	e01d      	b.n	80014d4 <HAL_RCC_OscConfig+0xd4>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014a0:	d10c      	bne.n	80014bc <HAL_RCC_OscConfig+0xbc>
 80014a2:	4b72      	ldr	r3, [pc, #456]	; (800166c <HAL_RCC_OscConfig+0x26c>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a71      	ldr	r2, [pc, #452]	; (800166c <HAL_RCC_OscConfig+0x26c>)
 80014a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014ac:	6013      	str	r3, [r2, #0]
 80014ae:	4b6f      	ldr	r3, [pc, #444]	; (800166c <HAL_RCC_OscConfig+0x26c>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a6e      	ldr	r2, [pc, #440]	; (800166c <HAL_RCC_OscConfig+0x26c>)
 80014b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014b8:	6013      	str	r3, [r2, #0]
 80014ba:	e00b      	b.n	80014d4 <HAL_RCC_OscConfig+0xd4>
 80014bc:	4b6b      	ldr	r3, [pc, #428]	; (800166c <HAL_RCC_OscConfig+0x26c>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a6a      	ldr	r2, [pc, #424]	; (800166c <HAL_RCC_OscConfig+0x26c>)
 80014c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014c6:	6013      	str	r3, [r2, #0]
 80014c8:	4b68      	ldr	r3, [pc, #416]	; (800166c <HAL_RCC_OscConfig+0x26c>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a67      	ldr	r2, [pc, #412]	; (800166c <HAL_RCC_OscConfig+0x26c>)
 80014ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014d2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d013      	beq.n	8001504 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014dc:	f7ff f92a 	bl	8000734 <HAL_GetTick>
 80014e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014e2:	e008      	b.n	80014f6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014e4:	f7ff f926 	bl	8000734 <HAL_GetTick>
 80014e8:	4602      	mov	r2, r0
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	2b64      	cmp	r3, #100	; 0x64
 80014f0:	d901      	bls.n	80014f6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80014f2:	2303      	movs	r3, #3
 80014f4:	e1fa      	b.n	80018ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014f6:	4b5d      	ldr	r3, [pc, #372]	; (800166c <HAL_RCC_OscConfig+0x26c>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d0f0      	beq.n	80014e4 <HAL_RCC_OscConfig+0xe4>
 8001502:	e014      	b.n	800152e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001504:	f7ff f916 	bl	8000734 <HAL_GetTick>
 8001508:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800150a:	e008      	b.n	800151e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800150c:	f7ff f912 	bl	8000734 <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	2b64      	cmp	r3, #100	; 0x64
 8001518:	d901      	bls.n	800151e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e1e6      	b.n	80018ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800151e:	4b53      	ldr	r3, [pc, #332]	; (800166c <HAL_RCC_OscConfig+0x26c>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d1f0      	bne.n	800150c <HAL_RCC_OscConfig+0x10c>
 800152a:	e000      	b.n	800152e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800152c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 0302 	and.w	r3, r3, #2
 8001536:	2b00      	cmp	r3, #0
 8001538:	d063      	beq.n	8001602 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800153a:	4b4c      	ldr	r3, [pc, #304]	; (800166c <HAL_RCC_OscConfig+0x26c>)
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f003 030c 	and.w	r3, r3, #12
 8001542:	2b00      	cmp	r3, #0
 8001544:	d00b      	beq.n	800155e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001546:	4b49      	ldr	r3, [pc, #292]	; (800166c <HAL_RCC_OscConfig+0x26c>)
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	f003 030c 	and.w	r3, r3, #12
 800154e:	2b08      	cmp	r3, #8
 8001550:	d11c      	bne.n	800158c <HAL_RCC_OscConfig+0x18c>
 8001552:	4b46      	ldr	r3, [pc, #280]	; (800166c <HAL_RCC_OscConfig+0x26c>)
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d116      	bne.n	800158c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800155e:	4b43      	ldr	r3, [pc, #268]	; (800166c <HAL_RCC_OscConfig+0x26c>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 0302 	and.w	r3, r3, #2
 8001566:	2b00      	cmp	r3, #0
 8001568:	d005      	beq.n	8001576 <HAL_RCC_OscConfig+0x176>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	691b      	ldr	r3, [r3, #16]
 800156e:	2b01      	cmp	r3, #1
 8001570:	d001      	beq.n	8001576 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e1ba      	b.n	80018ec <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001576:	4b3d      	ldr	r3, [pc, #244]	; (800166c <HAL_RCC_OscConfig+0x26c>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	695b      	ldr	r3, [r3, #20]
 8001582:	00db      	lsls	r3, r3, #3
 8001584:	4939      	ldr	r1, [pc, #228]	; (800166c <HAL_RCC_OscConfig+0x26c>)
 8001586:	4313      	orrs	r3, r2
 8001588:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800158a:	e03a      	b.n	8001602 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	691b      	ldr	r3, [r3, #16]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d020      	beq.n	80015d6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001594:	4b36      	ldr	r3, [pc, #216]	; (8001670 <HAL_RCC_OscConfig+0x270>)
 8001596:	2201      	movs	r2, #1
 8001598:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800159a:	f7ff f8cb 	bl	8000734 <HAL_GetTick>
 800159e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015a0:	e008      	b.n	80015b4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015a2:	f7ff f8c7 	bl	8000734 <HAL_GetTick>
 80015a6:	4602      	mov	r2, r0
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d901      	bls.n	80015b4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80015b0:	2303      	movs	r3, #3
 80015b2:	e19b      	b.n	80018ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015b4:	4b2d      	ldr	r3, [pc, #180]	; (800166c <HAL_RCC_OscConfig+0x26c>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0302 	and.w	r3, r3, #2
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d0f0      	beq.n	80015a2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015c0:	4b2a      	ldr	r3, [pc, #168]	; (800166c <HAL_RCC_OscConfig+0x26c>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	695b      	ldr	r3, [r3, #20]
 80015cc:	00db      	lsls	r3, r3, #3
 80015ce:	4927      	ldr	r1, [pc, #156]	; (800166c <HAL_RCC_OscConfig+0x26c>)
 80015d0:	4313      	orrs	r3, r2
 80015d2:	600b      	str	r3, [r1, #0]
 80015d4:	e015      	b.n	8001602 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015d6:	4b26      	ldr	r3, [pc, #152]	; (8001670 <HAL_RCC_OscConfig+0x270>)
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015dc:	f7ff f8aa 	bl	8000734 <HAL_GetTick>
 80015e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015e2:	e008      	b.n	80015f6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015e4:	f7ff f8a6 	bl	8000734 <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d901      	bls.n	80015f6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e17a      	b.n	80018ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015f6:	4b1d      	ldr	r3, [pc, #116]	; (800166c <HAL_RCC_OscConfig+0x26c>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 0302 	and.w	r3, r3, #2
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d1f0      	bne.n	80015e4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0308 	and.w	r3, r3, #8
 800160a:	2b00      	cmp	r3, #0
 800160c:	d03a      	beq.n	8001684 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	699b      	ldr	r3, [r3, #24]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d019      	beq.n	800164a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001616:	4b17      	ldr	r3, [pc, #92]	; (8001674 <HAL_RCC_OscConfig+0x274>)
 8001618:	2201      	movs	r2, #1
 800161a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800161c:	f7ff f88a 	bl	8000734 <HAL_GetTick>
 8001620:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001622:	e008      	b.n	8001636 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001624:	f7ff f886 	bl	8000734 <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	2b02      	cmp	r3, #2
 8001630:	d901      	bls.n	8001636 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e15a      	b.n	80018ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001636:	4b0d      	ldr	r3, [pc, #52]	; (800166c <HAL_RCC_OscConfig+0x26c>)
 8001638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800163a:	f003 0302 	and.w	r3, r3, #2
 800163e:	2b00      	cmp	r3, #0
 8001640:	d0f0      	beq.n	8001624 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001642:	2001      	movs	r0, #1
 8001644:	f000 faa8 	bl	8001b98 <RCC_Delay>
 8001648:	e01c      	b.n	8001684 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800164a:	4b0a      	ldr	r3, [pc, #40]	; (8001674 <HAL_RCC_OscConfig+0x274>)
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001650:	f7ff f870 	bl	8000734 <HAL_GetTick>
 8001654:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001656:	e00f      	b.n	8001678 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001658:	f7ff f86c 	bl	8000734 <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	2b02      	cmp	r3, #2
 8001664:	d908      	bls.n	8001678 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	e140      	b.n	80018ec <HAL_RCC_OscConfig+0x4ec>
 800166a:	bf00      	nop
 800166c:	40021000 	.word	0x40021000
 8001670:	42420000 	.word	0x42420000
 8001674:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001678:	4b9e      	ldr	r3, [pc, #632]	; (80018f4 <HAL_RCC_OscConfig+0x4f4>)
 800167a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800167c:	f003 0302 	and.w	r3, r3, #2
 8001680:	2b00      	cmp	r3, #0
 8001682:	d1e9      	bne.n	8001658 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 0304 	and.w	r3, r3, #4
 800168c:	2b00      	cmp	r3, #0
 800168e:	f000 80a6 	beq.w	80017de <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001692:	2300      	movs	r3, #0
 8001694:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001696:	4b97      	ldr	r3, [pc, #604]	; (80018f4 <HAL_RCC_OscConfig+0x4f4>)
 8001698:	69db      	ldr	r3, [r3, #28]
 800169a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d10d      	bne.n	80016be <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016a2:	4b94      	ldr	r3, [pc, #592]	; (80018f4 <HAL_RCC_OscConfig+0x4f4>)
 80016a4:	69db      	ldr	r3, [r3, #28]
 80016a6:	4a93      	ldr	r2, [pc, #588]	; (80018f4 <HAL_RCC_OscConfig+0x4f4>)
 80016a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016ac:	61d3      	str	r3, [r2, #28]
 80016ae:	4b91      	ldr	r3, [pc, #580]	; (80018f4 <HAL_RCC_OscConfig+0x4f4>)
 80016b0:	69db      	ldr	r3, [r3, #28]
 80016b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b6:	60bb      	str	r3, [r7, #8]
 80016b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016ba:	2301      	movs	r3, #1
 80016bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016be:	4b8e      	ldr	r3, [pc, #568]	; (80018f8 <HAL_RCC_OscConfig+0x4f8>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d118      	bne.n	80016fc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016ca:	4b8b      	ldr	r3, [pc, #556]	; (80018f8 <HAL_RCC_OscConfig+0x4f8>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a8a      	ldr	r2, [pc, #552]	; (80018f8 <HAL_RCC_OscConfig+0x4f8>)
 80016d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016d6:	f7ff f82d 	bl	8000734 <HAL_GetTick>
 80016da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016dc:	e008      	b.n	80016f0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016de:	f7ff f829 	bl	8000734 <HAL_GetTick>
 80016e2:	4602      	mov	r2, r0
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	2b64      	cmp	r3, #100	; 0x64
 80016ea:	d901      	bls.n	80016f0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80016ec:	2303      	movs	r3, #3
 80016ee:	e0fd      	b.n	80018ec <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016f0:	4b81      	ldr	r3, [pc, #516]	; (80018f8 <HAL_RCC_OscConfig+0x4f8>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d0f0      	beq.n	80016de <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	2b01      	cmp	r3, #1
 8001702:	d106      	bne.n	8001712 <HAL_RCC_OscConfig+0x312>
 8001704:	4b7b      	ldr	r3, [pc, #492]	; (80018f4 <HAL_RCC_OscConfig+0x4f4>)
 8001706:	6a1b      	ldr	r3, [r3, #32]
 8001708:	4a7a      	ldr	r2, [pc, #488]	; (80018f4 <HAL_RCC_OscConfig+0x4f4>)
 800170a:	f043 0301 	orr.w	r3, r3, #1
 800170e:	6213      	str	r3, [r2, #32]
 8001710:	e02d      	b.n	800176e <HAL_RCC_OscConfig+0x36e>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d10c      	bne.n	8001734 <HAL_RCC_OscConfig+0x334>
 800171a:	4b76      	ldr	r3, [pc, #472]	; (80018f4 <HAL_RCC_OscConfig+0x4f4>)
 800171c:	6a1b      	ldr	r3, [r3, #32]
 800171e:	4a75      	ldr	r2, [pc, #468]	; (80018f4 <HAL_RCC_OscConfig+0x4f4>)
 8001720:	f023 0301 	bic.w	r3, r3, #1
 8001724:	6213      	str	r3, [r2, #32]
 8001726:	4b73      	ldr	r3, [pc, #460]	; (80018f4 <HAL_RCC_OscConfig+0x4f4>)
 8001728:	6a1b      	ldr	r3, [r3, #32]
 800172a:	4a72      	ldr	r2, [pc, #456]	; (80018f4 <HAL_RCC_OscConfig+0x4f4>)
 800172c:	f023 0304 	bic.w	r3, r3, #4
 8001730:	6213      	str	r3, [r2, #32]
 8001732:	e01c      	b.n	800176e <HAL_RCC_OscConfig+0x36e>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	2b05      	cmp	r3, #5
 800173a:	d10c      	bne.n	8001756 <HAL_RCC_OscConfig+0x356>
 800173c:	4b6d      	ldr	r3, [pc, #436]	; (80018f4 <HAL_RCC_OscConfig+0x4f4>)
 800173e:	6a1b      	ldr	r3, [r3, #32]
 8001740:	4a6c      	ldr	r2, [pc, #432]	; (80018f4 <HAL_RCC_OscConfig+0x4f4>)
 8001742:	f043 0304 	orr.w	r3, r3, #4
 8001746:	6213      	str	r3, [r2, #32]
 8001748:	4b6a      	ldr	r3, [pc, #424]	; (80018f4 <HAL_RCC_OscConfig+0x4f4>)
 800174a:	6a1b      	ldr	r3, [r3, #32]
 800174c:	4a69      	ldr	r2, [pc, #420]	; (80018f4 <HAL_RCC_OscConfig+0x4f4>)
 800174e:	f043 0301 	orr.w	r3, r3, #1
 8001752:	6213      	str	r3, [r2, #32]
 8001754:	e00b      	b.n	800176e <HAL_RCC_OscConfig+0x36e>
 8001756:	4b67      	ldr	r3, [pc, #412]	; (80018f4 <HAL_RCC_OscConfig+0x4f4>)
 8001758:	6a1b      	ldr	r3, [r3, #32]
 800175a:	4a66      	ldr	r2, [pc, #408]	; (80018f4 <HAL_RCC_OscConfig+0x4f4>)
 800175c:	f023 0301 	bic.w	r3, r3, #1
 8001760:	6213      	str	r3, [r2, #32]
 8001762:	4b64      	ldr	r3, [pc, #400]	; (80018f4 <HAL_RCC_OscConfig+0x4f4>)
 8001764:	6a1b      	ldr	r3, [r3, #32]
 8001766:	4a63      	ldr	r2, [pc, #396]	; (80018f4 <HAL_RCC_OscConfig+0x4f4>)
 8001768:	f023 0304 	bic.w	r3, r3, #4
 800176c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	68db      	ldr	r3, [r3, #12]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d015      	beq.n	80017a2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001776:	f7fe ffdd 	bl	8000734 <HAL_GetTick>
 800177a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800177c:	e00a      	b.n	8001794 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800177e:	f7fe ffd9 	bl	8000734 <HAL_GetTick>
 8001782:	4602      	mov	r2, r0
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	f241 3288 	movw	r2, #5000	; 0x1388
 800178c:	4293      	cmp	r3, r2
 800178e:	d901      	bls.n	8001794 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001790:	2303      	movs	r3, #3
 8001792:	e0ab      	b.n	80018ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001794:	4b57      	ldr	r3, [pc, #348]	; (80018f4 <HAL_RCC_OscConfig+0x4f4>)
 8001796:	6a1b      	ldr	r3, [r3, #32]
 8001798:	f003 0302 	and.w	r3, r3, #2
 800179c:	2b00      	cmp	r3, #0
 800179e:	d0ee      	beq.n	800177e <HAL_RCC_OscConfig+0x37e>
 80017a0:	e014      	b.n	80017cc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017a2:	f7fe ffc7 	bl	8000734 <HAL_GetTick>
 80017a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017a8:	e00a      	b.n	80017c0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017aa:	f7fe ffc3 	bl	8000734 <HAL_GetTick>
 80017ae:	4602      	mov	r2, r0
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d901      	bls.n	80017c0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80017bc:	2303      	movs	r3, #3
 80017be:	e095      	b.n	80018ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017c0:	4b4c      	ldr	r3, [pc, #304]	; (80018f4 <HAL_RCC_OscConfig+0x4f4>)
 80017c2:	6a1b      	ldr	r3, [r3, #32]
 80017c4:	f003 0302 	and.w	r3, r3, #2
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d1ee      	bne.n	80017aa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80017cc:	7dfb      	ldrb	r3, [r7, #23]
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d105      	bne.n	80017de <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017d2:	4b48      	ldr	r3, [pc, #288]	; (80018f4 <HAL_RCC_OscConfig+0x4f4>)
 80017d4:	69db      	ldr	r3, [r3, #28]
 80017d6:	4a47      	ldr	r2, [pc, #284]	; (80018f4 <HAL_RCC_OscConfig+0x4f4>)
 80017d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017dc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	69db      	ldr	r3, [r3, #28]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	f000 8081 	beq.w	80018ea <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017e8:	4b42      	ldr	r3, [pc, #264]	; (80018f4 <HAL_RCC_OscConfig+0x4f4>)
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f003 030c 	and.w	r3, r3, #12
 80017f0:	2b08      	cmp	r3, #8
 80017f2:	d061      	beq.n	80018b8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	69db      	ldr	r3, [r3, #28]
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d146      	bne.n	800188a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017fc:	4b3f      	ldr	r3, [pc, #252]	; (80018fc <HAL_RCC_OscConfig+0x4fc>)
 80017fe:	2200      	movs	r2, #0
 8001800:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001802:	f7fe ff97 	bl	8000734 <HAL_GetTick>
 8001806:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001808:	e008      	b.n	800181c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800180a:	f7fe ff93 	bl	8000734 <HAL_GetTick>
 800180e:	4602      	mov	r2, r0
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	2b02      	cmp	r3, #2
 8001816:	d901      	bls.n	800181c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001818:	2303      	movs	r3, #3
 800181a:	e067      	b.n	80018ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800181c:	4b35      	ldr	r3, [pc, #212]	; (80018f4 <HAL_RCC_OscConfig+0x4f4>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001824:	2b00      	cmp	r3, #0
 8001826:	d1f0      	bne.n	800180a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6a1b      	ldr	r3, [r3, #32]
 800182c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001830:	d108      	bne.n	8001844 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001832:	4b30      	ldr	r3, [pc, #192]	; (80018f4 <HAL_RCC_OscConfig+0x4f4>)
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	492d      	ldr	r1, [pc, #180]	; (80018f4 <HAL_RCC_OscConfig+0x4f4>)
 8001840:	4313      	orrs	r3, r2
 8001842:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001844:	4b2b      	ldr	r3, [pc, #172]	; (80018f4 <HAL_RCC_OscConfig+0x4f4>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6a19      	ldr	r1, [r3, #32]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001854:	430b      	orrs	r3, r1
 8001856:	4927      	ldr	r1, [pc, #156]	; (80018f4 <HAL_RCC_OscConfig+0x4f4>)
 8001858:	4313      	orrs	r3, r2
 800185a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800185c:	4b27      	ldr	r3, [pc, #156]	; (80018fc <HAL_RCC_OscConfig+0x4fc>)
 800185e:	2201      	movs	r2, #1
 8001860:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001862:	f7fe ff67 	bl	8000734 <HAL_GetTick>
 8001866:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001868:	e008      	b.n	800187c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800186a:	f7fe ff63 	bl	8000734 <HAL_GetTick>
 800186e:	4602      	mov	r2, r0
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	2b02      	cmp	r3, #2
 8001876:	d901      	bls.n	800187c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001878:	2303      	movs	r3, #3
 800187a:	e037      	b.n	80018ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800187c:	4b1d      	ldr	r3, [pc, #116]	; (80018f4 <HAL_RCC_OscConfig+0x4f4>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001884:	2b00      	cmp	r3, #0
 8001886:	d0f0      	beq.n	800186a <HAL_RCC_OscConfig+0x46a>
 8001888:	e02f      	b.n	80018ea <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800188a:	4b1c      	ldr	r3, [pc, #112]	; (80018fc <HAL_RCC_OscConfig+0x4fc>)
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001890:	f7fe ff50 	bl	8000734 <HAL_GetTick>
 8001894:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001896:	e008      	b.n	80018aa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001898:	f7fe ff4c 	bl	8000734 <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e020      	b.n	80018ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018aa:	4b12      	ldr	r3, [pc, #72]	; (80018f4 <HAL_RCC_OscConfig+0x4f4>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d1f0      	bne.n	8001898 <HAL_RCC_OscConfig+0x498>
 80018b6:	e018      	b.n	80018ea <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	69db      	ldr	r3, [r3, #28]
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d101      	bne.n	80018c4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e013      	b.n	80018ec <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80018c4:	4b0b      	ldr	r3, [pc, #44]	; (80018f4 <HAL_RCC_OscConfig+0x4f4>)
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6a1b      	ldr	r3, [r3, #32]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d106      	bne.n	80018e6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d001      	beq.n	80018ea <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e000      	b.n	80018ec <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80018ea:	2300      	movs	r3, #0
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3718      	adds	r7, #24
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	40021000 	.word	0x40021000
 80018f8:	40007000 	.word	0x40007000
 80018fc:	42420060 	.word	0x42420060

08001900 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d101      	bne.n	8001914 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e0d0      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001914:	4b6a      	ldr	r3, [pc, #424]	; (8001ac0 <HAL_RCC_ClockConfig+0x1c0>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 0307 	and.w	r3, r3, #7
 800191c:	683a      	ldr	r2, [r7, #0]
 800191e:	429a      	cmp	r2, r3
 8001920:	d910      	bls.n	8001944 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001922:	4b67      	ldr	r3, [pc, #412]	; (8001ac0 <HAL_RCC_ClockConfig+0x1c0>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f023 0207 	bic.w	r2, r3, #7
 800192a:	4965      	ldr	r1, [pc, #404]	; (8001ac0 <HAL_RCC_ClockConfig+0x1c0>)
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	4313      	orrs	r3, r2
 8001930:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001932:	4b63      	ldr	r3, [pc, #396]	; (8001ac0 <HAL_RCC_ClockConfig+0x1c0>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 0307 	and.w	r3, r3, #7
 800193a:	683a      	ldr	r2, [r7, #0]
 800193c:	429a      	cmp	r2, r3
 800193e:	d001      	beq.n	8001944 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	e0b8      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0302 	and.w	r3, r3, #2
 800194c:	2b00      	cmp	r3, #0
 800194e:	d020      	beq.n	8001992 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 0304 	and.w	r3, r3, #4
 8001958:	2b00      	cmp	r3, #0
 800195a:	d005      	beq.n	8001968 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800195c:	4b59      	ldr	r3, [pc, #356]	; (8001ac4 <HAL_RCC_ClockConfig+0x1c4>)
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	4a58      	ldr	r2, [pc, #352]	; (8001ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8001962:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001966:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0308 	and.w	r3, r3, #8
 8001970:	2b00      	cmp	r3, #0
 8001972:	d005      	beq.n	8001980 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001974:	4b53      	ldr	r3, [pc, #332]	; (8001ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	4a52      	ldr	r2, [pc, #328]	; (8001ac4 <HAL_RCC_ClockConfig+0x1c4>)
 800197a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800197e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001980:	4b50      	ldr	r3, [pc, #320]	; (8001ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	494d      	ldr	r1, [pc, #308]	; (8001ac4 <HAL_RCC_ClockConfig+0x1c4>)
 800198e:	4313      	orrs	r3, r2
 8001990:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	2b00      	cmp	r3, #0
 800199c:	d040      	beq.n	8001a20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d107      	bne.n	80019b6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019a6:	4b47      	ldr	r3, [pc, #284]	; (8001ac4 <HAL_RCC_ClockConfig+0x1c4>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d115      	bne.n	80019de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e07f      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d107      	bne.n	80019ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019be:	4b41      	ldr	r3, [pc, #260]	; (8001ac4 <HAL_RCC_ClockConfig+0x1c4>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d109      	bne.n	80019de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e073      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019ce:	4b3d      	ldr	r3, [pc, #244]	; (8001ac4 <HAL_RCC_ClockConfig+0x1c4>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0302 	and.w	r3, r3, #2
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d101      	bne.n	80019de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e06b      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019de:	4b39      	ldr	r3, [pc, #228]	; (8001ac4 <HAL_RCC_ClockConfig+0x1c4>)
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f023 0203 	bic.w	r2, r3, #3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	4936      	ldr	r1, [pc, #216]	; (8001ac4 <HAL_RCC_ClockConfig+0x1c4>)
 80019ec:	4313      	orrs	r3, r2
 80019ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019f0:	f7fe fea0 	bl	8000734 <HAL_GetTick>
 80019f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019f6:	e00a      	b.n	8001a0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019f8:	f7fe fe9c 	bl	8000734 <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d901      	bls.n	8001a0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e053      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a0e:	4b2d      	ldr	r3, [pc, #180]	; (8001ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f003 020c 	and.w	r2, r3, #12
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d1eb      	bne.n	80019f8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a20:	4b27      	ldr	r3, [pc, #156]	; (8001ac0 <HAL_RCC_ClockConfig+0x1c0>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 0307 	and.w	r3, r3, #7
 8001a28:	683a      	ldr	r2, [r7, #0]
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d210      	bcs.n	8001a50 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a2e:	4b24      	ldr	r3, [pc, #144]	; (8001ac0 <HAL_RCC_ClockConfig+0x1c0>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f023 0207 	bic.w	r2, r3, #7
 8001a36:	4922      	ldr	r1, [pc, #136]	; (8001ac0 <HAL_RCC_ClockConfig+0x1c0>)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a3e:	4b20      	ldr	r3, [pc, #128]	; (8001ac0 <HAL_RCC_ClockConfig+0x1c0>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0307 	and.w	r3, r3, #7
 8001a46:	683a      	ldr	r2, [r7, #0]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d001      	beq.n	8001a50 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e032      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0304 	and.w	r3, r3, #4
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d008      	beq.n	8001a6e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a5c:	4b19      	ldr	r3, [pc, #100]	; (8001ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	4916      	ldr	r1, [pc, #88]	; (8001ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0308 	and.w	r3, r3, #8
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d009      	beq.n	8001a8e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a7a:	4b12      	ldr	r3, [pc, #72]	; (8001ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	691b      	ldr	r3, [r3, #16]
 8001a86:	00db      	lsls	r3, r3, #3
 8001a88:	490e      	ldr	r1, [pc, #56]	; (8001ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a8e:	f000 f821 	bl	8001ad4 <HAL_RCC_GetSysClockFreq>
 8001a92:	4601      	mov	r1, r0
 8001a94:	4b0b      	ldr	r3, [pc, #44]	; (8001ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	091b      	lsrs	r3, r3, #4
 8001a9a:	f003 030f 	and.w	r3, r3, #15
 8001a9e:	4a0a      	ldr	r2, [pc, #40]	; (8001ac8 <HAL_RCC_ClockConfig+0x1c8>)
 8001aa0:	5cd3      	ldrb	r3, [r2, r3]
 8001aa2:	fa21 f303 	lsr.w	r3, r1, r3
 8001aa6:	4a09      	ldr	r2, [pc, #36]	; (8001acc <HAL_RCC_ClockConfig+0x1cc>)
 8001aa8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001aaa:	4b09      	ldr	r3, [pc, #36]	; (8001ad0 <HAL_RCC_ClockConfig+0x1d0>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7fe fdfe 	bl	80006b0 <HAL_InitTick>

  return HAL_OK;
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3710      	adds	r7, #16
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	40022000 	.word	0x40022000
 8001ac4:	40021000 	.word	0x40021000
 8001ac8:	0800358c 	.word	0x0800358c
 8001acc:	20000000 	.word	0x20000000
 8001ad0:	20000004 	.word	0x20000004

08001ad4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ad4:	b490      	push	{r4, r7}
 8001ad6:	b08a      	sub	sp, #40	; 0x28
 8001ad8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001ada:	4b2a      	ldr	r3, [pc, #168]	; (8001b84 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001adc:	1d3c      	adds	r4, r7, #4
 8001ade:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ae0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001ae4:	4b28      	ldr	r3, [pc, #160]	; (8001b88 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001ae6:	881b      	ldrh	r3, [r3, #0]
 8001ae8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001aea:	2300      	movs	r3, #0
 8001aec:	61fb      	str	r3, [r7, #28]
 8001aee:	2300      	movs	r3, #0
 8001af0:	61bb      	str	r3, [r7, #24]
 8001af2:	2300      	movs	r3, #0
 8001af4:	627b      	str	r3, [r7, #36]	; 0x24
 8001af6:	2300      	movs	r3, #0
 8001af8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001afa:	2300      	movs	r3, #0
 8001afc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001afe:	4b23      	ldr	r3, [pc, #140]	; (8001b8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	f003 030c 	and.w	r3, r3, #12
 8001b0a:	2b04      	cmp	r3, #4
 8001b0c:	d002      	beq.n	8001b14 <HAL_RCC_GetSysClockFreq+0x40>
 8001b0e:	2b08      	cmp	r3, #8
 8001b10:	d003      	beq.n	8001b1a <HAL_RCC_GetSysClockFreq+0x46>
 8001b12:	e02d      	b.n	8001b70 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b14:	4b1e      	ldr	r3, [pc, #120]	; (8001b90 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b16:	623b      	str	r3, [r7, #32]
      break;
 8001b18:	e02d      	b.n	8001b76 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	0c9b      	lsrs	r3, r3, #18
 8001b1e:	f003 030f 	and.w	r3, r3, #15
 8001b22:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001b26:	4413      	add	r3, r2
 8001b28:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001b2c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d013      	beq.n	8001b60 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b38:	4b14      	ldr	r3, [pc, #80]	; (8001b8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	0c5b      	lsrs	r3, r3, #17
 8001b3e:	f003 0301 	and.w	r3, r3, #1
 8001b42:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001b46:	4413      	add	r3, r2
 8001b48:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001b4c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	4a0f      	ldr	r2, [pc, #60]	; (8001b90 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b52:	fb02 f203 	mul.w	r2, r2, r3
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b5c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b5e:	e004      	b.n	8001b6a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	4a0c      	ldr	r2, [pc, #48]	; (8001b94 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001b64:	fb02 f303 	mul.w	r3, r2, r3
 8001b68:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6c:	623b      	str	r3, [r7, #32]
      break;
 8001b6e:	e002      	b.n	8001b76 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b70:	4b07      	ldr	r3, [pc, #28]	; (8001b90 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b72:	623b      	str	r3, [r7, #32]
      break;
 8001b74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b76:	6a3b      	ldr	r3, [r7, #32]
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3728      	adds	r7, #40	; 0x28
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bc90      	pop	{r4, r7}
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	08003578 	.word	0x08003578
 8001b88:	08003588 	.word	0x08003588
 8001b8c:	40021000 	.word	0x40021000
 8001b90:	007a1200 	.word	0x007a1200
 8001b94:	003d0900 	.word	0x003d0900

08001b98 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b085      	sub	sp, #20
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ba0:	4b0a      	ldr	r3, [pc, #40]	; (8001bcc <RCC_Delay+0x34>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a0a      	ldr	r2, [pc, #40]	; (8001bd0 <RCC_Delay+0x38>)
 8001ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8001baa:	0a5b      	lsrs	r3, r3, #9
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	fb02 f303 	mul.w	r3, r2, r3
 8001bb2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001bb4:	bf00      	nop
  }
  while (Delay --);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	1e5a      	subs	r2, r3, #1
 8001bba:	60fa      	str	r2, [r7, #12]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d1f9      	bne.n	8001bb4 <RCC_Delay+0x1c>
}
 8001bc0:	bf00      	nop
 8001bc2:	3714      	adds	r7, #20
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bc80      	pop	{r7}
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	20000000 	.word	0x20000000
 8001bd0:	10624dd3 	.word	0x10624dd3

08001bd4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b086      	sub	sp, #24
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	613b      	str	r3, [r7, #16]
 8001be0:	2300      	movs	r3, #0
 8001be2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 0301 	and.w	r3, r3, #1
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d07d      	beq.n	8001cec <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bf4:	4b4f      	ldr	r3, [pc, #316]	; (8001d34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bf6:	69db      	ldr	r3, [r3, #28]
 8001bf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d10d      	bne.n	8001c1c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c00:	4b4c      	ldr	r3, [pc, #304]	; (8001d34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c02:	69db      	ldr	r3, [r3, #28]
 8001c04:	4a4b      	ldr	r2, [pc, #300]	; (8001d34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c0a:	61d3      	str	r3, [r2, #28]
 8001c0c:	4b49      	ldr	r3, [pc, #292]	; (8001d34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c0e:	69db      	ldr	r3, [r3, #28]
 8001c10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c14:	60bb      	str	r3, [r7, #8]
 8001c16:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c1c:	4b46      	ldr	r3, [pc, #280]	; (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d118      	bne.n	8001c5a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c28:	4b43      	ldr	r3, [pc, #268]	; (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a42      	ldr	r2, [pc, #264]	; (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001c2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c32:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c34:	f7fe fd7e 	bl	8000734 <HAL_GetTick>
 8001c38:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c3a:	e008      	b.n	8001c4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c3c:	f7fe fd7a 	bl	8000734 <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b64      	cmp	r3, #100	; 0x64
 8001c48:	d901      	bls.n	8001c4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e06d      	b.n	8001d2a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c4e:	4b3a      	ldr	r3, [pc, #232]	; (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d0f0      	beq.n	8001c3c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001c5a:	4b36      	ldr	r3, [pc, #216]	; (8001d34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c5c:	6a1b      	ldr	r3, [r3, #32]
 8001c5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c62:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d02e      	beq.n	8001cc8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c72:	68fa      	ldr	r2, [r7, #12]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d027      	beq.n	8001cc8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001c78:	4b2e      	ldr	r3, [pc, #184]	; (8001d34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c7a:	6a1b      	ldr	r3, [r3, #32]
 8001c7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c80:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001c82:	4b2e      	ldr	r3, [pc, #184]	; (8001d3c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001c84:	2201      	movs	r2, #1
 8001c86:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001c88:	4b2c      	ldr	r3, [pc, #176]	; (8001d3c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001c8e:	4a29      	ldr	r2, [pc, #164]	; (8001d34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	f003 0301 	and.w	r3, r3, #1
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d014      	beq.n	8001cc8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c9e:	f7fe fd49 	bl	8000734 <HAL_GetTick>
 8001ca2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ca4:	e00a      	b.n	8001cbc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ca6:	f7fe fd45 	bl	8000734 <HAL_GetTick>
 8001caa:	4602      	mov	r2, r0
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d901      	bls.n	8001cbc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e036      	b.n	8001d2a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cbc:	4b1d      	ldr	r3, [pc, #116]	; (8001d34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cbe:	6a1b      	ldr	r3, [r3, #32]
 8001cc0:	f003 0302 	and.w	r3, r3, #2
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d0ee      	beq.n	8001ca6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001cc8:	4b1a      	ldr	r3, [pc, #104]	; (8001d34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cca:	6a1b      	ldr	r3, [r3, #32]
 8001ccc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	4917      	ldr	r1, [pc, #92]	; (8001d34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001cda:	7dfb      	ldrb	r3, [r7, #23]
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d105      	bne.n	8001cec <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ce0:	4b14      	ldr	r3, [pc, #80]	; (8001d34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ce2:	69db      	ldr	r3, [r3, #28]
 8001ce4:	4a13      	ldr	r2, [pc, #76]	; (8001d34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ce6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cea:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0302 	and.w	r3, r3, #2
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d008      	beq.n	8001d0a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001cf8:	4b0e      	ldr	r3, [pc, #56]	; (8001d34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	490b      	ldr	r1, [pc, #44]	; (8001d34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d06:	4313      	orrs	r3, r2
 8001d08:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0310 	and.w	r3, r3, #16
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d008      	beq.n	8001d28 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001d16:	4b07      	ldr	r3, [pc, #28]	; (8001d34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	68db      	ldr	r3, [r3, #12]
 8001d22:	4904      	ldr	r1, [pc, #16]	; (8001d34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d24:	4313      	orrs	r3, r2
 8001d26:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3718      	adds	r7, #24
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	40021000 	.word	0x40021000
 8001d38:	40007000 	.word	0x40007000
 8001d3c:	42420440 	.word	0x42420440

08001d40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d101      	bne.n	8001d52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e01d      	b.n	8001d8e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d106      	bne.n	8001d6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2200      	movs	r2, #0
 8001d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f7fe fbb4 	bl	80004d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2202      	movs	r2, #2
 8001d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	3304      	adds	r3, #4
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	4610      	mov	r0, r2
 8001d80:	f000 f8e4 	bl	8001f4c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2201      	movs	r2, #1
 8001d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001d96:	b480      	push	{r7}
 8001d98:	b085      	sub	sp, #20
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2202      	movs	r2, #2
 8001da2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	f003 0307 	and.w	r3, r3, #7
 8001db0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2b06      	cmp	r3, #6
 8001db6:	d007      	beq.n	8001dc8 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f042 0201 	orr.w	r2, r2, #1
 8001dc6:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3714      	adds	r7, #20
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bc80      	pop	{r7}
 8001dda:	4770      	bx	lr

08001ddc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d101      	bne.n	8001df4 <HAL_TIM_ConfigClockSource+0x18>
 8001df0:	2302      	movs	r3, #2
 8001df2:	e0a6      	b.n	8001f42 <HAL_TIM_ConfigClockSource+0x166>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2201      	movs	r2, #1
 8001df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2202      	movs	r2, #2
 8001e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001e12:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001e1a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	68fa      	ldr	r2, [r7, #12]
 8001e22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2b40      	cmp	r3, #64	; 0x40
 8001e2a:	d067      	beq.n	8001efc <HAL_TIM_ConfigClockSource+0x120>
 8001e2c:	2b40      	cmp	r3, #64	; 0x40
 8001e2e:	d80b      	bhi.n	8001e48 <HAL_TIM_ConfigClockSource+0x6c>
 8001e30:	2b10      	cmp	r3, #16
 8001e32:	d073      	beq.n	8001f1c <HAL_TIM_ConfigClockSource+0x140>
 8001e34:	2b10      	cmp	r3, #16
 8001e36:	d802      	bhi.n	8001e3e <HAL_TIM_ConfigClockSource+0x62>
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d06f      	beq.n	8001f1c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8001e3c:	e078      	b.n	8001f30 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001e3e:	2b20      	cmp	r3, #32
 8001e40:	d06c      	beq.n	8001f1c <HAL_TIM_ConfigClockSource+0x140>
 8001e42:	2b30      	cmp	r3, #48	; 0x30
 8001e44:	d06a      	beq.n	8001f1c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8001e46:	e073      	b.n	8001f30 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001e48:	2b70      	cmp	r3, #112	; 0x70
 8001e4a:	d00d      	beq.n	8001e68 <HAL_TIM_ConfigClockSource+0x8c>
 8001e4c:	2b70      	cmp	r3, #112	; 0x70
 8001e4e:	d804      	bhi.n	8001e5a <HAL_TIM_ConfigClockSource+0x7e>
 8001e50:	2b50      	cmp	r3, #80	; 0x50
 8001e52:	d033      	beq.n	8001ebc <HAL_TIM_ConfigClockSource+0xe0>
 8001e54:	2b60      	cmp	r3, #96	; 0x60
 8001e56:	d041      	beq.n	8001edc <HAL_TIM_ConfigClockSource+0x100>
      break;
 8001e58:	e06a      	b.n	8001f30 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001e5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e5e:	d066      	beq.n	8001f2e <HAL_TIM_ConfigClockSource+0x152>
 8001e60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e64:	d017      	beq.n	8001e96 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8001e66:	e063      	b.n	8001f30 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6818      	ldr	r0, [r3, #0]
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	6899      	ldr	r1, [r3, #8]
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	685a      	ldr	r2, [r3, #4]
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	f000 f941 	bl	80020fe <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001e8a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	68fa      	ldr	r2, [r7, #12]
 8001e92:	609a      	str	r2, [r3, #8]
      break;
 8001e94:	e04c      	b.n	8001f30 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6818      	ldr	r0, [r3, #0]
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	6899      	ldr	r1, [r3, #8]
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685a      	ldr	r2, [r3, #4]
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	f000 f92a 	bl	80020fe <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	689a      	ldr	r2, [r3, #8]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001eb8:	609a      	str	r2, [r3, #8]
      break;
 8001eba:	e039      	b.n	8001f30 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6818      	ldr	r0, [r3, #0]
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	6859      	ldr	r1, [r3, #4]
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	461a      	mov	r2, r3
 8001eca:	f000 f8a1 	bl	8002010 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	2150      	movs	r1, #80	; 0x50
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f000 f8f8 	bl	80020ca <TIM_ITRx_SetConfig>
      break;
 8001eda:	e029      	b.n	8001f30 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6818      	ldr	r0, [r3, #0]
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	6859      	ldr	r1, [r3, #4]
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	461a      	mov	r2, r3
 8001eea:	f000 f8bf 	bl	800206c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	2160      	movs	r1, #96	; 0x60
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f000 f8e8 	bl	80020ca <TIM_ITRx_SetConfig>
      break;
 8001efa:	e019      	b.n	8001f30 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6818      	ldr	r0, [r3, #0]
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	6859      	ldr	r1, [r3, #4]
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	461a      	mov	r2, r3
 8001f0a:	f000 f881 	bl	8002010 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	2140      	movs	r1, #64	; 0x40
 8001f14:	4618      	mov	r0, r3
 8001f16:	f000 f8d8 	bl	80020ca <TIM_ITRx_SetConfig>
      break;
 8001f1a:	e009      	b.n	8001f30 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4619      	mov	r1, r3
 8001f26:	4610      	mov	r0, r2
 8001f28:	f000 f8cf 	bl	80020ca <TIM_ITRx_SetConfig>
      break;
 8001f2c:	e000      	b.n	8001f30 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8001f2e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2201      	movs	r2, #1
 8001f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001f40:	2300      	movs	r3, #0
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3710      	adds	r7, #16
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
	...

08001f4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b085      	sub	sp, #20
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	4a29      	ldr	r2, [pc, #164]	; (8002004 <TIM_Base_SetConfig+0xb8>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d00b      	beq.n	8001f7c <TIM_Base_SetConfig+0x30>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f6a:	d007      	beq.n	8001f7c <TIM_Base_SetConfig+0x30>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	4a26      	ldr	r2, [pc, #152]	; (8002008 <TIM_Base_SetConfig+0xbc>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d003      	beq.n	8001f7c <TIM_Base_SetConfig+0x30>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	4a25      	ldr	r2, [pc, #148]	; (800200c <TIM_Base_SetConfig+0xc0>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d108      	bne.n	8001f8e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	68fa      	ldr	r2, [r7, #12]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a1c      	ldr	r2, [pc, #112]	; (8002004 <TIM_Base_SetConfig+0xb8>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d00b      	beq.n	8001fae <TIM_Base_SetConfig+0x62>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f9c:	d007      	beq.n	8001fae <TIM_Base_SetConfig+0x62>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a19      	ldr	r2, [pc, #100]	; (8002008 <TIM_Base_SetConfig+0xbc>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d003      	beq.n	8001fae <TIM_Base_SetConfig+0x62>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a18      	ldr	r2, [pc, #96]	; (800200c <TIM_Base_SetConfig+0xc0>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d108      	bne.n	8001fc0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	68db      	ldr	r3, [r3, #12]
 8001fba:	68fa      	ldr	r2, [r7, #12]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	695b      	ldr	r3, [r3, #20]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	68fa      	ldr	r2, [r7, #12]
 8001fd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	689a      	ldr	r2, [r3, #8]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	4a07      	ldr	r2, [pc, #28]	; (8002004 <TIM_Base_SetConfig+0xb8>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d103      	bne.n	8001ff4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	691a      	ldr	r2, [r3, #16]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	615a      	str	r2, [r3, #20]
}
 8001ffa:	bf00      	nop
 8001ffc:	3714      	adds	r7, #20
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bc80      	pop	{r7}
 8002002:	4770      	bx	lr
 8002004:	40012c00 	.word	0x40012c00
 8002008:	40000400 	.word	0x40000400
 800200c:	40000800 	.word	0x40000800

08002010 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002010:	b480      	push	{r7}
 8002012:	b087      	sub	sp, #28
 8002014:	af00      	add	r7, sp, #0
 8002016:	60f8      	str	r0, [r7, #12]
 8002018:	60b9      	str	r1, [r7, #8]
 800201a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	6a1b      	ldr	r3, [r3, #32]
 8002020:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	6a1b      	ldr	r3, [r3, #32]
 8002026:	f023 0201 	bic.w	r2, r3, #1
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	699b      	ldr	r3, [r3, #24]
 8002032:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800203a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	011b      	lsls	r3, r3, #4
 8002040:	693a      	ldr	r2, [r7, #16]
 8002042:	4313      	orrs	r3, r2
 8002044:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	f023 030a 	bic.w	r3, r3, #10
 800204c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800204e:	697a      	ldr	r2, [r7, #20]
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	4313      	orrs	r3, r2
 8002054:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	693a      	ldr	r2, [r7, #16]
 800205a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	697a      	ldr	r2, [r7, #20]
 8002060:	621a      	str	r2, [r3, #32]
}
 8002062:	bf00      	nop
 8002064:	371c      	adds	r7, #28
 8002066:	46bd      	mov	sp, r7
 8002068:	bc80      	pop	{r7}
 800206a:	4770      	bx	lr

0800206c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800206c:	b480      	push	{r7}
 800206e:	b087      	sub	sp, #28
 8002070:	af00      	add	r7, sp, #0
 8002072:	60f8      	str	r0, [r7, #12]
 8002074:	60b9      	str	r1, [r7, #8]
 8002076:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	6a1b      	ldr	r3, [r3, #32]
 800207c:	f023 0210 	bic.w	r2, r3, #16
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	699b      	ldr	r3, [r3, #24]
 8002088:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	6a1b      	ldr	r3, [r3, #32]
 800208e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002096:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	031b      	lsls	r3, r3, #12
 800209c:	697a      	ldr	r2, [r7, #20]
 800209e:	4313      	orrs	r3, r2
 80020a0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80020a8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	011b      	lsls	r3, r3, #4
 80020ae:	693a      	ldr	r2, [r7, #16]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	697a      	ldr	r2, [r7, #20]
 80020b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	693a      	ldr	r2, [r7, #16]
 80020be:	621a      	str	r2, [r3, #32]
}
 80020c0:	bf00      	nop
 80020c2:	371c      	adds	r7, #28
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bc80      	pop	{r7}
 80020c8:	4770      	bx	lr

080020ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80020ca:	b480      	push	{r7}
 80020cc:	b085      	sub	sp, #20
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
 80020d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80020e2:	683a      	ldr	r2, [r7, #0]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	f043 0307 	orr.w	r3, r3, #7
 80020ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	68fa      	ldr	r2, [r7, #12]
 80020f2:	609a      	str	r2, [r3, #8]
}
 80020f4:	bf00      	nop
 80020f6:	3714      	adds	r7, #20
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bc80      	pop	{r7}
 80020fc:	4770      	bx	lr

080020fe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80020fe:	b480      	push	{r7}
 8002100:	b087      	sub	sp, #28
 8002102:	af00      	add	r7, sp, #0
 8002104:	60f8      	str	r0, [r7, #12]
 8002106:	60b9      	str	r1, [r7, #8]
 8002108:	607a      	str	r2, [r7, #4]
 800210a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002118:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	021a      	lsls	r2, r3, #8
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	431a      	orrs	r2, r3
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	4313      	orrs	r3, r2
 8002126:	697a      	ldr	r2, [r7, #20]
 8002128:	4313      	orrs	r3, r2
 800212a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	697a      	ldr	r2, [r7, #20]
 8002130:	609a      	str	r2, [r3, #8]
}
 8002132:	bf00      	nop
 8002134:	371c      	adds	r7, #28
 8002136:	46bd      	mov	sp, r7
 8002138:	bc80      	pop	{r7}
 800213a:	4770      	bx	lr

0800213c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800213c:	b480      	push	{r7}
 800213e:	b085      	sub	sp, #20
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800214c:	2b01      	cmp	r3, #1
 800214e:	d101      	bne.n	8002154 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002150:	2302      	movs	r3, #2
 8002152:	e032      	b.n	80021ba <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2202      	movs	r2, #2
 8002160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800217a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	68fa      	ldr	r2, [r7, #12]
 8002182:	4313      	orrs	r3, r2
 8002184:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800218c:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	68ba      	ldr	r2, [r7, #8]
 8002194:	4313      	orrs	r3, r2
 8002196:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	68fa      	ldr	r2, [r7, #12]
 800219e:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	68ba      	ldr	r2, [r7, #8]
 80021a6:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2201      	movs	r2, #1
 80021ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2200      	movs	r2, #0
 80021b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3714      	adds	r7, #20
 80021be:	46bd      	mov	sp, r7
 80021c0:	bc80      	pop	{r7}
 80021c2:	4770      	bx	lr

080021c4 <__errno>:
 80021c4:	4b01      	ldr	r3, [pc, #4]	; (80021cc <__errno+0x8>)
 80021c6:	6818      	ldr	r0, [r3, #0]
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	2000000c 	.word	0x2000000c

080021d0 <__libc_init_array>:
 80021d0:	b570      	push	{r4, r5, r6, lr}
 80021d2:	2500      	movs	r5, #0
 80021d4:	4e0c      	ldr	r6, [pc, #48]	; (8002208 <__libc_init_array+0x38>)
 80021d6:	4c0d      	ldr	r4, [pc, #52]	; (800220c <__libc_init_array+0x3c>)
 80021d8:	1ba4      	subs	r4, r4, r6
 80021da:	10a4      	asrs	r4, r4, #2
 80021dc:	42a5      	cmp	r5, r4
 80021de:	d109      	bne.n	80021f4 <__libc_init_array+0x24>
 80021e0:	f001 f9b6 	bl	8003550 <_init>
 80021e4:	2500      	movs	r5, #0
 80021e6:	4e0a      	ldr	r6, [pc, #40]	; (8002210 <__libc_init_array+0x40>)
 80021e8:	4c0a      	ldr	r4, [pc, #40]	; (8002214 <__libc_init_array+0x44>)
 80021ea:	1ba4      	subs	r4, r4, r6
 80021ec:	10a4      	asrs	r4, r4, #2
 80021ee:	42a5      	cmp	r5, r4
 80021f0:	d105      	bne.n	80021fe <__libc_init_array+0x2e>
 80021f2:	bd70      	pop	{r4, r5, r6, pc}
 80021f4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80021f8:	4798      	blx	r3
 80021fa:	3501      	adds	r5, #1
 80021fc:	e7ee      	b.n	80021dc <__libc_init_array+0xc>
 80021fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002202:	4798      	blx	r3
 8002204:	3501      	adds	r5, #1
 8002206:	e7f2      	b.n	80021ee <__libc_init_array+0x1e>
 8002208:	08003650 	.word	0x08003650
 800220c:	08003650 	.word	0x08003650
 8002210:	08003650 	.word	0x08003650
 8002214:	08003654 	.word	0x08003654

08002218 <memset>:
 8002218:	4603      	mov	r3, r0
 800221a:	4402      	add	r2, r0
 800221c:	4293      	cmp	r3, r2
 800221e:	d100      	bne.n	8002222 <memset+0xa>
 8002220:	4770      	bx	lr
 8002222:	f803 1b01 	strb.w	r1, [r3], #1
 8002226:	e7f9      	b.n	800221c <memset+0x4>

08002228 <iprintf>:
 8002228:	b40f      	push	{r0, r1, r2, r3}
 800222a:	4b0a      	ldr	r3, [pc, #40]	; (8002254 <iprintf+0x2c>)
 800222c:	b513      	push	{r0, r1, r4, lr}
 800222e:	681c      	ldr	r4, [r3, #0]
 8002230:	b124      	cbz	r4, 800223c <iprintf+0x14>
 8002232:	69a3      	ldr	r3, [r4, #24]
 8002234:	b913      	cbnz	r3, 800223c <iprintf+0x14>
 8002236:	4620      	mov	r0, r4
 8002238:	f000 f84e 	bl	80022d8 <__sinit>
 800223c:	ab05      	add	r3, sp, #20
 800223e:	9a04      	ldr	r2, [sp, #16]
 8002240:	68a1      	ldr	r1, [r4, #8]
 8002242:	4620      	mov	r0, r4
 8002244:	9301      	str	r3, [sp, #4]
 8002246:	f000 f953 	bl	80024f0 <_vfiprintf_r>
 800224a:	b002      	add	sp, #8
 800224c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002250:	b004      	add	sp, #16
 8002252:	4770      	bx	lr
 8002254:	2000000c 	.word	0x2000000c

08002258 <std>:
 8002258:	2300      	movs	r3, #0
 800225a:	b510      	push	{r4, lr}
 800225c:	4604      	mov	r4, r0
 800225e:	e9c0 3300 	strd	r3, r3, [r0]
 8002262:	6083      	str	r3, [r0, #8]
 8002264:	8181      	strh	r1, [r0, #12]
 8002266:	6643      	str	r3, [r0, #100]	; 0x64
 8002268:	81c2      	strh	r2, [r0, #14]
 800226a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800226e:	6183      	str	r3, [r0, #24]
 8002270:	4619      	mov	r1, r3
 8002272:	2208      	movs	r2, #8
 8002274:	305c      	adds	r0, #92	; 0x5c
 8002276:	f7ff ffcf 	bl	8002218 <memset>
 800227a:	4b05      	ldr	r3, [pc, #20]	; (8002290 <std+0x38>)
 800227c:	6224      	str	r4, [r4, #32]
 800227e:	6263      	str	r3, [r4, #36]	; 0x24
 8002280:	4b04      	ldr	r3, [pc, #16]	; (8002294 <std+0x3c>)
 8002282:	62a3      	str	r3, [r4, #40]	; 0x28
 8002284:	4b04      	ldr	r3, [pc, #16]	; (8002298 <std+0x40>)
 8002286:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002288:	4b04      	ldr	r3, [pc, #16]	; (800229c <std+0x44>)
 800228a:	6323      	str	r3, [r4, #48]	; 0x30
 800228c:	bd10      	pop	{r4, pc}
 800228e:	bf00      	nop
 8002290:	08002a4d 	.word	0x08002a4d
 8002294:	08002a6f 	.word	0x08002a6f
 8002298:	08002aa7 	.word	0x08002aa7
 800229c:	08002acb 	.word	0x08002acb

080022a0 <_cleanup_r>:
 80022a0:	4901      	ldr	r1, [pc, #4]	; (80022a8 <_cleanup_r+0x8>)
 80022a2:	f000 b885 	b.w	80023b0 <_fwalk_reent>
 80022a6:	bf00      	nop
 80022a8:	08002da5 	.word	0x08002da5

080022ac <__sfmoreglue>:
 80022ac:	b570      	push	{r4, r5, r6, lr}
 80022ae:	2568      	movs	r5, #104	; 0x68
 80022b0:	1e4a      	subs	r2, r1, #1
 80022b2:	4355      	muls	r5, r2
 80022b4:	460e      	mov	r6, r1
 80022b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80022ba:	f000 f897 	bl	80023ec <_malloc_r>
 80022be:	4604      	mov	r4, r0
 80022c0:	b140      	cbz	r0, 80022d4 <__sfmoreglue+0x28>
 80022c2:	2100      	movs	r1, #0
 80022c4:	e9c0 1600 	strd	r1, r6, [r0]
 80022c8:	300c      	adds	r0, #12
 80022ca:	60a0      	str	r0, [r4, #8]
 80022cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80022d0:	f7ff ffa2 	bl	8002218 <memset>
 80022d4:	4620      	mov	r0, r4
 80022d6:	bd70      	pop	{r4, r5, r6, pc}

080022d8 <__sinit>:
 80022d8:	6983      	ldr	r3, [r0, #24]
 80022da:	b510      	push	{r4, lr}
 80022dc:	4604      	mov	r4, r0
 80022de:	bb33      	cbnz	r3, 800232e <__sinit+0x56>
 80022e0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80022e4:	6503      	str	r3, [r0, #80]	; 0x50
 80022e6:	4b12      	ldr	r3, [pc, #72]	; (8002330 <__sinit+0x58>)
 80022e8:	4a12      	ldr	r2, [pc, #72]	; (8002334 <__sinit+0x5c>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	6282      	str	r2, [r0, #40]	; 0x28
 80022ee:	4298      	cmp	r0, r3
 80022f0:	bf04      	itt	eq
 80022f2:	2301      	moveq	r3, #1
 80022f4:	6183      	streq	r3, [r0, #24]
 80022f6:	f000 f81f 	bl	8002338 <__sfp>
 80022fa:	6060      	str	r0, [r4, #4]
 80022fc:	4620      	mov	r0, r4
 80022fe:	f000 f81b 	bl	8002338 <__sfp>
 8002302:	60a0      	str	r0, [r4, #8]
 8002304:	4620      	mov	r0, r4
 8002306:	f000 f817 	bl	8002338 <__sfp>
 800230a:	2200      	movs	r2, #0
 800230c:	60e0      	str	r0, [r4, #12]
 800230e:	2104      	movs	r1, #4
 8002310:	6860      	ldr	r0, [r4, #4]
 8002312:	f7ff ffa1 	bl	8002258 <std>
 8002316:	2201      	movs	r2, #1
 8002318:	2109      	movs	r1, #9
 800231a:	68a0      	ldr	r0, [r4, #8]
 800231c:	f7ff ff9c 	bl	8002258 <std>
 8002320:	2202      	movs	r2, #2
 8002322:	2112      	movs	r1, #18
 8002324:	68e0      	ldr	r0, [r4, #12]
 8002326:	f7ff ff97 	bl	8002258 <std>
 800232a:	2301      	movs	r3, #1
 800232c:	61a3      	str	r3, [r4, #24]
 800232e:	bd10      	pop	{r4, pc}
 8002330:	0800359c 	.word	0x0800359c
 8002334:	080022a1 	.word	0x080022a1

08002338 <__sfp>:
 8002338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800233a:	4b1b      	ldr	r3, [pc, #108]	; (80023a8 <__sfp+0x70>)
 800233c:	4607      	mov	r7, r0
 800233e:	681e      	ldr	r6, [r3, #0]
 8002340:	69b3      	ldr	r3, [r6, #24]
 8002342:	b913      	cbnz	r3, 800234a <__sfp+0x12>
 8002344:	4630      	mov	r0, r6
 8002346:	f7ff ffc7 	bl	80022d8 <__sinit>
 800234a:	3648      	adds	r6, #72	; 0x48
 800234c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002350:	3b01      	subs	r3, #1
 8002352:	d503      	bpl.n	800235c <__sfp+0x24>
 8002354:	6833      	ldr	r3, [r6, #0]
 8002356:	b133      	cbz	r3, 8002366 <__sfp+0x2e>
 8002358:	6836      	ldr	r6, [r6, #0]
 800235a:	e7f7      	b.n	800234c <__sfp+0x14>
 800235c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002360:	b16d      	cbz	r5, 800237e <__sfp+0x46>
 8002362:	3468      	adds	r4, #104	; 0x68
 8002364:	e7f4      	b.n	8002350 <__sfp+0x18>
 8002366:	2104      	movs	r1, #4
 8002368:	4638      	mov	r0, r7
 800236a:	f7ff ff9f 	bl	80022ac <__sfmoreglue>
 800236e:	6030      	str	r0, [r6, #0]
 8002370:	2800      	cmp	r0, #0
 8002372:	d1f1      	bne.n	8002358 <__sfp+0x20>
 8002374:	230c      	movs	r3, #12
 8002376:	4604      	mov	r4, r0
 8002378:	603b      	str	r3, [r7, #0]
 800237a:	4620      	mov	r0, r4
 800237c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800237e:	4b0b      	ldr	r3, [pc, #44]	; (80023ac <__sfp+0x74>)
 8002380:	6665      	str	r5, [r4, #100]	; 0x64
 8002382:	e9c4 5500 	strd	r5, r5, [r4]
 8002386:	60a5      	str	r5, [r4, #8]
 8002388:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800238c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8002390:	2208      	movs	r2, #8
 8002392:	4629      	mov	r1, r5
 8002394:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002398:	f7ff ff3e 	bl	8002218 <memset>
 800239c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80023a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80023a4:	e7e9      	b.n	800237a <__sfp+0x42>
 80023a6:	bf00      	nop
 80023a8:	0800359c 	.word	0x0800359c
 80023ac:	ffff0001 	.word	0xffff0001

080023b0 <_fwalk_reent>:
 80023b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80023b4:	4680      	mov	r8, r0
 80023b6:	4689      	mov	r9, r1
 80023b8:	2600      	movs	r6, #0
 80023ba:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80023be:	b914      	cbnz	r4, 80023c6 <_fwalk_reent+0x16>
 80023c0:	4630      	mov	r0, r6
 80023c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80023c6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80023ca:	3f01      	subs	r7, #1
 80023cc:	d501      	bpl.n	80023d2 <_fwalk_reent+0x22>
 80023ce:	6824      	ldr	r4, [r4, #0]
 80023d0:	e7f5      	b.n	80023be <_fwalk_reent+0xe>
 80023d2:	89ab      	ldrh	r3, [r5, #12]
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d907      	bls.n	80023e8 <_fwalk_reent+0x38>
 80023d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80023dc:	3301      	adds	r3, #1
 80023de:	d003      	beq.n	80023e8 <_fwalk_reent+0x38>
 80023e0:	4629      	mov	r1, r5
 80023e2:	4640      	mov	r0, r8
 80023e4:	47c8      	blx	r9
 80023e6:	4306      	orrs	r6, r0
 80023e8:	3568      	adds	r5, #104	; 0x68
 80023ea:	e7ee      	b.n	80023ca <_fwalk_reent+0x1a>

080023ec <_malloc_r>:
 80023ec:	b570      	push	{r4, r5, r6, lr}
 80023ee:	1ccd      	adds	r5, r1, #3
 80023f0:	f025 0503 	bic.w	r5, r5, #3
 80023f4:	3508      	adds	r5, #8
 80023f6:	2d0c      	cmp	r5, #12
 80023f8:	bf38      	it	cc
 80023fa:	250c      	movcc	r5, #12
 80023fc:	2d00      	cmp	r5, #0
 80023fe:	4606      	mov	r6, r0
 8002400:	db01      	blt.n	8002406 <_malloc_r+0x1a>
 8002402:	42a9      	cmp	r1, r5
 8002404:	d903      	bls.n	800240e <_malloc_r+0x22>
 8002406:	230c      	movs	r3, #12
 8002408:	6033      	str	r3, [r6, #0]
 800240a:	2000      	movs	r0, #0
 800240c:	bd70      	pop	{r4, r5, r6, pc}
 800240e:	f000 fd77 	bl	8002f00 <__malloc_lock>
 8002412:	4a21      	ldr	r2, [pc, #132]	; (8002498 <_malloc_r+0xac>)
 8002414:	6814      	ldr	r4, [r2, #0]
 8002416:	4621      	mov	r1, r4
 8002418:	b991      	cbnz	r1, 8002440 <_malloc_r+0x54>
 800241a:	4c20      	ldr	r4, [pc, #128]	; (800249c <_malloc_r+0xb0>)
 800241c:	6823      	ldr	r3, [r4, #0]
 800241e:	b91b      	cbnz	r3, 8002428 <_malloc_r+0x3c>
 8002420:	4630      	mov	r0, r6
 8002422:	f000 fb03 	bl	8002a2c <_sbrk_r>
 8002426:	6020      	str	r0, [r4, #0]
 8002428:	4629      	mov	r1, r5
 800242a:	4630      	mov	r0, r6
 800242c:	f000 fafe 	bl	8002a2c <_sbrk_r>
 8002430:	1c43      	adds	r3, r0, #1
 8002432:	d124      	bne.n	800247e <_malloc_r+0x92>
 8002434:	230c      	movs	r3, #12
 8002436:	4630      	mov	r0, r6
 8002438:	6033      	str	r3, [r6, #0]
 800243a:	f000 fd62 	bl	8002f02 <__malloc_unlock>
 800243e:	e7e4      	b.n	800240a <_malloc_r+0x1e>
 8002440:	680b      	ldr	r3, [r1, #0]
 8002442:	1b5b      	subs	r3, r3, r5
 8002444:	d418      	bmi.n	8002478 <_malloc_r+0x8c>
 8002446:	2b0b      	cmp	r3, #11
 8002448:	d90f      	bls.n	800246a <_malloc_r+0x7e>
 800244a:	600b      	str	r3, [r1, #0]
 800244c:	18cc      	adds	r4, r1, r3
 800244e:	50cd      	str	r5, [r1, r3]
 8002450:	4630      	mov	r0, r6
 8002452:	f000 fd56 	bl	8002f02 <__malloc_unlock>
 8002456:	f104 000b 	add.w	r0, r4, #11
 800245a:	1d23      	adds	r3, r4, #4
 800245c:	f020 0007 	bic.w	r0, r0, #7
 8002460:	1ac3      	subs	r3, r0, r3
 8002462:	d0d3      	beq.n	800240c <_malloc_r+0x20>
 8002464:	425a      	negs	r2, r3
 8002466:	50e2      	str	r2, [r4, r3]
 8002468:	e7d0      	b.n	800240c <_malloc_r+0x20>
 800246a:	684b      	ldr	r3, [r1, #4]
 800246c:	428c      	cmp	r4, r1
 800246e:	bf16      	itet	ne
 8002470:	6063      	strne	r3, [r4, #4]
 8002472:	6013      	streq	r3, [r2, #0]
 8002474:	460c      	movne	r4, r1
 8002476:	e7eb      	b.n	8002450 <_malloc_r+0x64>
 8002478:	460c      	mov	r4, r1
 800247a:	6849      	ldr	r1, [r1, #4]
 800247c:	e7cc      	b.n	8002418 <_malloc_r+0x2c>
 800247e:	1cc4      	adds	r4, r0, #3
 8002480:	f024 0403 	bic.w	r4, r4, #3
 8002484:	42a0      	cmp	r0, r4
 8002486:	d005      	beq.n	8002494 <_malloc_r+0xa8>
 8002488:	1a21      	subs	r1, r4, r0
 800248a:	4630      	mov	r0, r6
 800248c:	f000 face 	bl	8002a2c <_sbrk_r>
 8002490:	3001      	adds	r0, #1
 8002492:	d0cf      	beq.n	8002434 <_malloc_r+0x48>
 8002494:	6025      	str	r5, [r4, #0]
 8002496:	e7db      	b.n	8002450 <_malloc_r+0x64>
 8002498:	2000009c 	.word	0x2000009c
 800249c:	200000a0 	.word	0x200000a0

080024a0 <__sfputc_r>:
 80024a0:	6893      	ldr	r3, [r2, #8]
 80024a2:	b410      	push	{r4}
 80024a4:	3b01      	subs	r3, #1
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	6093      	str	r3, [r2, #8]
 80024aa:	da07      	bge.n	80024bc <__sfputc_r+0x1c>
 80024ac:	6994      	ldr	r4, [r2, #24]
 80024ae:	42a3      	cmp	r3, r4
 80024b0:	db01      	blt.n	80024b6 <__sfputc_r+0x16>
 80024b2:	290a      	cmp	r1, #10
 80024b4:	d102      	bne.n	80024bc <__sfputc_r+0x1c>
 80024b6:	bc10      	pop	{r4}
 80024b8:	f000 bb0c 	b.w	8002ad4 <__swbuf_r>
 80024bc:	6813      	ldr	r3, [r2, #0]
 80024be:	1c58      	adds	r0, r3, #1
 80024c0:	6010      	str	r0, [r2, #0]
 80024c2:	7019      	strb	r1, [r3, #0]
 80024c4:	4608      	mov	r0, r1
 80024c6:	bc10      	pop	{r4}
 80024c8:	4770      	bx	lr

080024ca <__sfputs_r>:
 80024ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024cc:	4606      	mov	r6, r0
 80024ce:	460f      	mov	r7, r1
 80024d0:	4614      	mov	r4, r2
 80024d2:	18d5      	adds	r5, r2, r3
 80024d4:	42ac      	cmp	r4, r5
 80024d6:	d101      	bne.n	80024dc <__sfputs_r+0x12>
 80024d8:	2000      	movs	r0, #0
 80024da:	e007      	b.n	80024ec <__sfputs_r+0x22>
 80024dc:	463a      	mov	r2, r7
 80024de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80024e2:	4630      	mov	r0, r6
 80024e4:	f7ff ffdc 	bl	80024a0 <__sfputc_r>
 80024e8:	1c43      	adds	r3, r0, #1
 80024ea:	d1f3      	bne.n	80024d4 <__sfputs_r+0xa>
 80024ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080024f0 <_vfiprintf_r>:
 80024f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024f4:	460c      	mov	r4, r1
 80024f6:	b09d      	sub	sp, #116	; 0x74
 80024f8:	4617      	mov	r7, r2
 80024fa:	461d      	mov	r5, r3
 80024fc:	4606      	mov	r6, r0
 80024fe:	b118      	cbz	r0, 8002508 <_vfiprintf_r+0x18>
 8002500:	6983      	ldr	r3, [r0, #24]
 8002502:	b90b      	cbnz	r3, 8002508 <_vfiprintf_r+0x18>
 8002504:	f7ff fee8 	bl	80022d8 <__sinit>
 8002508:	4b7c      	ldr	r3, [pc, #496]	; (80026fc <_vfiprintf_r+0x20c>)
 800250a:	429c      	cmp	r4, r3
 800250c:	d158      	bne.n	80025c0 <_vfiprintf_r+0xd0>
 800250e:	6874      	ldr	r4, [r6, #4]
 8002510:	89a3      	ldrh	r3, [r4, #12]
 8002512:	0718      	lsls	r0, r3, #28
 8002514:	d55e      	bpl.n	80025d4 <_vfiprintf_r+0xe4>
 8002516:	6923      	ldr	r3, [r4, #16]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d05b      	beq.n	80025d4 <_vfiprintf_r+0xe4>
 800251c:	2300      	movs	r3, #0
 800251e:	9309      	str	r3, [sp, #36]	; 0x24
 8002520:	2320      	movs	r3, #32
 8002522:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002526:	2330      	movs	r3, #48	; 0x30
 8002528:	f04f 0b01 	mov.w	fp, #1
 800252c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002530:	9503      	str	r5, [sp, #12]
 8002532:	46b8      	mov	r8, r7
 8002534:	4645      	mov	r5, r8
 8002536:	f815 3b01 	ldrb.w	r3, [r5], #1
 800253a:	b10b      	cbz	r3, 8002540 <_vfiprintf_r+0x50>
 800253c:	2b25      	cmp	r3, #37	; 0x25
 800253e:	d154      	bne.n	80025ea <_vfiprintf_r+0xfa>
 8002540:	ebb8 0a07 	subs.w	sl, r8, r7
 8002544:	d00b      	beq.n	800255e <_vfiprintf_r+0x6e>
 8002546:	4653      	mov	r3, sl
 8002548:	463a      	mov	r2, r7
 800254a:	4621      	mov	r1, r4
 800254c:	4630      	mov	r0, r6
 800254e:	f7ff ffbc 	bl	80024ca <__sfputs_r>
 8002552:	3001      	adds	r0, #1
 8002554:	f000 80c2 	beq.w	80026dc <_vfiprintf_r+0x1ec>
 8002558:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800255a:	4453      	add	r3, sl
 800255c:	9309      	str	r3, [sp, #36]	; 0x24
 800255e:	f898 3000 	ldrb.w	r3, [r8]
 8002562:	2b00      	cmp	r3, #0
 8002564:	f000 80ba 	beq.w	80026dc <_vfiprintf_r+0x1ec>
 8002568:	2300      	movs	r3, #0
 800256a:	f04f 32ff 	mov.w	r2, #4294967295
 800256e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002572:	9304      	str	r3, [sp, #16]
 8002574:	9307      	str	r3, [sp, #28]
 8002576:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800257a:	931a      	str	r3, [sp, #104]	; 0x68
 800257c:	46a8      	mov	r8, r5
 800257e:	2205      	movs	r2, #5
 8002580:	f818 1b01 	ldrb.w	r1, [r8], #1
 8002584:	485e      	ldr	r0, [pc, #376]	; (8002700 <_vfiprintf_r+0x210>)
 8002586:	f000 fcad 	bl	8002ee4 <memchr>
 800258a:	9b04      	ldr	r3, [sp, #16]
 800258c:	bb78      	cbnz	r0, 80025ee <_vfiprintf_r+0xfe>
 800258e:	06d9      	lsls	r1, r3, #27
 8002590:	bf44      	itt	mi
 8002592:	2220      	movmi	r2, #32
 8002594:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002598:	071a      	lsls	r2, r3, #28
 800259a:	bf44      	itt	mi
 800259c:	222b      	movmi	r2, #43	; 0x2b
 800259e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80025a2:	782a      	ldrb	r2, [r5, #0]
 80025a4:	2a2a      	cmp	r2, #42	; 0x2a
 80025a6:	d02a      	beq.n	80025fe <_vfiprintf_r+0x10e>
 80025a8:	46a8      	mov	r8, r5
 80025aa:	2000      	movs	r0, #0
 80025ac:	250a      	movs	r5, #10
 80025ae:	9a07      	ldr	r2, [sp, #28]
 80025b0:	4641      	mov	r1, r8
 80025b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80025b6:	3b30      	subs	r3, #48	; 0x30
 80025b8:	2b09      	cmp	r3, #9
 80025ba:	d969      	bls.n	8002690 <_vfiprintf_r+0x1a0>
 80025bc:	b360      	cbz	r0, 8002618 <_vfiprintf_r+0x128>
 80025be:	e024      	b.n	800260a <_vfiprintf_r+0x11a>
 80025c0:	4b50      	ldr	r3, [pc, #320]	; (8002704 <_vfiprintf_r+0x214>)
 80025c2:	429c      	cmp	r4, r3
 80025c4:	d101      	bne.n	80025ca <_vfiprintf_r+0xda>
 80025c6:	68b4      	ldr	r4, [r6, #8]
 80025c8:	e7a2      	b.n	8002510 <_vfiprintf_r+0x20>
 80025ca:	4b4f      	ldr	r3, [pc, #316]	; (8002708 <_vfiprintf_r+0x218>)
 80025cc:	429c      	cmp	r4, r3
 80025ce:	bf08      	it	eq
 80025d0:	68f4      	ldreq	r4, [r6, #12]
 80025d2:	e79d      	b.n	8002510 <_vfiprintf_r+0x20>
 80025d4:	4621      	mov	r1, r4
 80025d6:	4630      	mov	r0, r6
 80025d8:	f000 fae0 	bl	8002b9c <__swsetup_r>
 80025dc:	2800      	cmp	r0, #0
 80025de:	d09d      	beq.n	800251c <_vfiprintf_r+0x2c>
 80025e0:	f04f 30ff 	mov.w	r0, #4294967295
 80025e4:	b01d      	add	sp, #116	; 0x74
 80025e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80025ea:	46a8      	mov	r8, r5
 80025ec:	e7a2      	b.n	8002534 <_vfiprintf_r+0x44>
 80025ee:	4a44      	ldr	r2, [pc, #272]	; (8002700 <_vfiprintf_r+0x210>)
 80025f0:	4645      	mov	r5, r8
 80025f2:	1a80      	subs	r0, r0, r2
 80025f4:	fa0b f000 	lsl.w	r0, fp, r0
 80025f8:	4318      	orrs	r0, r3
 80025fa:	9004      	str	r0, [sp, #16]
 80025fc:	e7be      	b.n	800257c <_vfiprintf_r+0x8c>
 80025fe:	9a03      	ldr	r2, [sp, #12]
 8002600:	1d11      	adds	r1, r2, #4
 8002602:	6812      	ldr	r2, [r2, #0]
 8002604:	9103      	str	r1, [sp, #12]
 8002606:	2a00      	cmp	r2, #0
 8002608:	db01      	blt.n	800260e <_vfiprintf_r+0x11e>
 800260a:	9207      	str	r2, [sp, #28]
 800260c:	e004      	b.n	8002618 <_vfiprintf_r+0x128>
 800260e:	4252      	negs	r2, r2
 8002610:	f043 0302 	orr.w	r3, r3, #2
 8002614:	9207      	str	r2, [sp, #28]
 8002616:	9304      	str	r3, [sp, #16]
 8002618:	f898 3000 	ldrb.w	r3, [r8]
 800261c:	2b2e      	cmp	r3, #46	; 0x2e
 800261e:	d10e      	bne.n	800263e <_vfiprintf_r+0x14e>
 8002620:	f898 3001 	ldrb.w	r3, [r8, #1]
 8002624:	2b2a      	cmp	r3, #42	; 0x2a
 8002626:	d138      	bne.n	800269a <_vfiprintf_r+0x1aa>
 8002628:	9b03      	ldr	r3, [sp, #12]
 800262a:	f108 0802 	add.w	r8, r8, #2
 800262e:	1d1a      	adds	r2, r3, #4
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	9203      	str	r2, [sp, #12]
 8002634:	2b00      	cmp	r3, #0
 8002636:	bfb8      	it	lt
 8002638:	f04f 33ff 	movlt.w	r3, #4294967295
 800263c:	9305      	str	r3, [sp, #20]
 800263e:	4d33      	ldr	r5, [pc, #204]	; (800270c <_vfiprintf_r+0x21c>)
 8002640:	2203      	movs	r2, #3
 8002642:	f898 1000 	ldrb.w	r1, [r8]
 8002646:	4628      	mov	r0, r5
 8002648:	f000 fc4c 	bl	8002ee4 <memchr>
 800264c:	b140      	cbz	r0, 8002660 <_vfiprintf_r+0x170>
 800264e:	2340      	movs	r3, #64	; 0x40
 8002650:	1b40      	subs	r0, r0, r5
 8002652:	fa03 f000 	lsl.w	r0, r3, r0
 8002656:	9b04      	ldr	r3, [sp, #16]
 8002658:	f108 0801 	add.w	r8, r8, #1
 800265c:	4303      	orrs	r3, r0
 800265e:	9304      	str	r3, [sp, #16]
 8002660:	f898 1000 	ldrb.w	r1, [r8]
 8002664:	2206      	movs	r2, #6
 8002666:	482a      	ldr	r0, [pc, #168]	; (8002710 <_vfiprintf_r+0x220>)
 8002668:	f108 0701 	add.w	r7, r8, #1
 800266c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002670:	f000 fc38 	bl	8002ee4 <memchr>
 8002674:	2800      	cmp	r0, #0
 8002676:	d037      	beq.n	80026e8 <_vfiprintf_r+0x1f8>
 8002678:	4b26      	ldr	r3, [pc, #152]	; (8002714 <_vfiprintf_r+0x224>)
 800267a:	bb1b      	cbnz	r3, 80026c4 <_vfiprintf_r+0x1d4>
 800267c:	9b03      	ldr	r3, [sp, #12]
 800267e:	3307      	adds	r3, #7
 8002680:	f023 0307 	bic.w	r3, r3, #7
 8002684:	3308      	adds	r3, #8
 8002686:	9303      	str	r3, [sp, #12]
 8002688:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800268a:	444b      	add	r3, r9
 800268c:	9309      	str	r3, [sp, #36]	; 0x24
 800268e:	e750      	b.n	8002532 <_vfiprintf_r+0x42>
 8002690:	fb05 3202 	mla	r2, r5, r2, r3
 8002694:	2001      	movs	r0, #1
 8002696:	4688      	mov	r8, r1
 8002698:	e78a      	b.n	80025b0 <_vfiprintf_r+0xc0>
 800269a:	2300      	movs	r3, #0
 800269c:	250a      	movs	r5, #10
 800269e:	4619      	mov	r1, r3
 80026a0:	f108 0801 	add.w	r8, r8, #1
 80026a4:	9305      	str	r3, [sp, #20]
 80026a6:	4640      	mov	r0, r8
 80026a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80026ac:	3a30      	subs	r2, #48	; 0x30
 80026ae:	2a09      	cmp	r2, #9
 80026b0:	d903      	bls.n	80026ba <_vfiprintf_r+0x1ca>
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d0c3      	beq.n	800263e <_vfiprintf_r+0x14e>
 80026b6:	9105      	str	r1, [sp, #20]
 80026b8:	e7c1      	b.n	800263e <_vfiprintf_r+0x14e>
 80026ba:	fb05 2101 	mla	r1, r5, r1, r2
 80026be:	2301      	movs	r3, #1
 80026c0:	4680      	mov	r8, r0
 80026c2:	e7f0      	b.n	80026a6 <_vfiprintf_r+0x1b6>
 80026c4:	ab03      	add	r3, sp, #12
 80026c6:	9300      	str	r3, [sp, #0]
 80026c8:	4622      	mov	r2, r4
 80026ca:	4b13      	ldr	r3, [pc, #76]	; (8002718 <_vfiprintf_r+0x228>)
 80026cc:	a904      	add	r1, sp, #16
 80026ce:	4630      	mov	r0, r6
 80026d0:	f3af 8000 	nop.w
 80026d4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80026d8:	4681      	mov	r9, r0
 80026da:	d1d5      	bne.n	8002688 <_vfiprintf_r+0x198>
 80026dc:	89a3      	ldrh	r3, [r4, #12]
 80026de:	065b      	lsls	r3, r3, #25
 80026e0:	f53f af7e 	bmi.w	80025e0 <_vfiprintf_r+0xf0>
 80026e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80026e6:	e77d      	b.n	80025e4 <_vfiprintf_r+0xf4>
 80026e8:	ab03      	add	r3, sp, #12
 80026ea:	9300      	str	r3, [sp, #0]
 80026ec:	4622      	mov	r2, r4
 80026ee:	4b0a      	ldr	r3, [pc, #40]	; (8002718 <_vfiprintf_r+0x228>)
 80026f0:	a904      	add	r1, sp, #16
 80026f2:	4630      	mov	r0, r6
 80026f4:	f000 f888 	bl	8002808 <_printf_i>
 80026f8:	e7ec      	b.n	80026d4 <_vfiprintf_r+0x1e4>
 80026fa:	bf00      	nop
 80026fc:	080035c0 	.word	0x080035c0
 8002700:	08003600 	.word	0x08003600
 8002704:	080035e0 	.word	0x080035e0
 8002708:	080035a0 	.word	0x080035a0
 800270c:	08003606 	.word	0x08003606
 8002710:	0800360a 	.word	0x0800360a
 8002714:	00000000 	.word	0x00000000
 8002718:	080024cb 	.word	0x080024cb

0800271c <_printf_common>:
 800271c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002720:	4691      	mov	r9, r2
 8002722:	461f      	mov	r7, r3
 8002724:	688a      	ldr	r2, [r1, #8]
 8002726:	690b      	ldr	r3, [r1, #16]
 8002728:	4606      	mov	r6, r0
 800272a:	4293      	cmp	r3, r2
 800272c:	bfb8      	it	lt
 800272e:	4613      	movlt	r3, r2
 8002730:	f8c9 3000 	str.w	r3, [r9]
 8002734:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002738:	460c      	mov	r4, r1
 800273a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800273e:	b112      	cbz	r2, 8002746 <_printf_common+0x2a>
 8002740:	3301      	adds	r3, #1
 8002742:	f8c9 3000 	str.w	r3, [r9]
 8002746:	6823      	ldr	r3, [r4, #0]
 8002748:	0699      	lsls	r1, r3, #26
 800274a:	bf42      	ittt	mi
 800274c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002750:	3302      	addmi	r3, #2
 8002752:	f8c9 3000 	strmi.w	r3, [r9]
 8002756:	6825      	ldr	r5, [r4, #0]
 8002758:	f015 0506 	ands.w	r5, r5, #6
 800275c:	d107      	bne.n	800276e <_printf_common+0x52>
 800275e:	f104 0a19 	add.w	sl, r4, #25
 8002762:	68e3      	ldr	r3, [r4, #12]
 8002764:	f8d9 2000 	ldr.w	r2, [r9]
 8002768:	1a9b      	subs	r3, r3, r2
 800276a:	42ab      	cmp	r3, r5
 800276c:	dc29      	bgt.n	80027c2 <_printf_common+0xa6>
 800276e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002772:	6822      	ldr	r2, [r4, #0]
 8002774:	3300      	adds	r3, #0
 8002776:	bf18      	it	ne
 8002778:	2301      	movne	r3, #1
 800277a:	0692      	lsls	r2, r2, #26
 800277c:	d42e      	bmi.n	80027dc <_printf_common+0xc0>
 800277e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002782:	4639      	mov	r1, r7
 8002784:	4630      	mov	r0, r6
 8002786:	47c0      	blx	r8
 8002788:	3001      	adds	r0, #1
 800278a:	d021      	beq.n	80027d0 <_printf_common+0xb4>
 800278c:	6823      	ldr	r3, [r4, #0]
 800278e:	68e5      	ldr	r5, [r4, #12]
 8002790:	f003 0306 	and.w	r3, r3, #6
 8002794:	2b04      	cmp	r3, #4
 8002796:	bf18      	it	ne
 8002798:	2500      	movne	r5, #0
 800279a:	f8d9 2000 	ldr.w	r2, [r9]
 800279e:	f04f 0900 	mov.w	r9, #0
 80027a2:	bf08      	it	eq
 80027a4:	1aad      	subeq	r5, r5, r2
 80027a6:	68a3      	ldr	r3, [r4, #8]
 80027a8:	6922      	ldr	r2, [r4, #16]
 80027aa:	bf08      	it	eq
 80027ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80027b0:	4293      	cmp	r3, r2
 80027b2:	bfc4      	itt	gt
 80027b4:	1a9b      	subgt	r3, r3, r2
 80027b6:	18ed      	addgt	r5, r5, r3
 80027b8:	341a      	adds	r4, #26
 80027ba:	454d      	cmp	r5, r9
 80027bc:	d11a      	bne.n	80027f4 <_printf_common+0xd8>
 80027be:	2000      	movs	r0, #0
 80027c0:	e008      	b.n	80027d4 <_printf_common+0xb8>
 80027c2:	2301      	movs	r3, #1
 80027c4:	4652      	mov	r2, sl
 80027c6:	4639      	mov	r1, r7
 80027c8:	4630      	mov	r0, r6
 80027ca:	47c0      	blx	r8
 80027cc:	3001      	adds	r0, #1
 80027ce:	d103      	bne.n	80027d8 <_printf_common+0xbc>
 80027d0:	f04f 30ff 	mov.w	r0, #4294967295
 80027d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80027d8:	3501      	adds	r5, #1
 80027da:	e7c2      	b.n	8002762 <_printf_common+0x46>
 80027dc:	2030      	movs	r0, #48	; 0x30
 80027de:	18e1      	adds	r1, r4, r3
 80027e0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80027e4:	1c5a      	adds	r2, r3, #1
 80027e6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80027ea:	4422      	add	r2, r4
 80027ec:	3302      	adds	r3, #2
 80027ee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80027f2:	e7c4      	b.n	800277e <_printf_common+0x62>
 80027f4:	2301      	movs	r3, #1
 80027f6:	4622      	mov	r2, r4
 80027f8:	4639      	mov	r1, r7
 80027fa:	4630      	mov	r0, r6
 80027fc:	47c0      	blx	r8
 80027fe:	3001      	adds	r0, #1
 8002800:	d0e6      	beq.n	80027d0 <_printf_common+0xb4>
 8002802:	f109 0901 	add.w	r9, r9, #1
 8002806:	e7d8      	b.n	80027ba <_printf_common+0x9e>

08002808 <_printf_i>:
 8002808:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800280c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002810:	460c      	mov	r4, r1
 8002812:	7e09      	ldrb	r1, [r1, #24]
 8002814:	b085      	sub	sp, #20
 8002816:	296e      	cmp	r1, #110	; 0x6e
 8002818:	4617      	mov	r7, r2
 800281a:	4606      	mov	r6, r0
 800281c:	4698      	mov	r8, r3
 800281e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002820:	f000 80b3 	beq.w	800298a <_printf_i+0x182>
 8002824:	d822      	bhi.n	800286c <_printf_i+0x64>
 8002826:	2963      	cmp	r1, #99	; 0x63
 8002828:	d036      	beq.n	8002898 <_printf_i+0x90>
 800282a:	d80a      	bhi.n	8002842 <_printf_i+0x3a>
 800282c:	2900      	cmp	r1, #0
 800282e:	f000 80b9 	beq.w	80029a4 <_printf_i+0x19c>
 8002832:	2958      	cmp	r1, #88	; 0x58
 8002834:	f000 8083 	beq.w	800293e <_printf_i+0x136>
 8002838:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800283c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002840:	e032      	b.n	80028a8 <_printf_i+0xa0>
 8002842:	2964      	cmp	r1, #100	; 0x64
 8002844:	d001      	beq.n	800284a <_printf_i+0x42>
 8002846:	2969      	cmp	r1, #105	; 0x69
 8002848:	d1f6      	bne.n	8002838 <_printf_i+0x30>
 800284a:	6820      	ldr	r0, [r4, #0]
 800284c:	6813      	ldr	r3, [r2, #0]
 800284e:	0605      	lsls	r5, r0, #24
 8002850:	f103 0104 	add.w	r1, r3, #4
 8002854:	d52a      	bpl.n	80028ac <_printf_i+0xa4>
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	6011      	str	r1, [r2, #0]
 800285a:	2b00      	cmp	r3, #0
 800285c:	da03      	bge.n	8002866 <_printf_i+0x5e>
 800285e:	222d      	movs	r2, #45	; 0x2d
 8002860:	425b      	negs	r3, r3
 8002862:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002866:	486f      	ldr	r0, [pc, #444]	; (8002a24 <_printf_i+0x21c>)
 8002868:	220a      	movs	r2, #10
 800286a:	e039      	b.n	80028e0 <_printf_i+0xd8>
 800286c:	2973      	cmp	r1, #115	; 0x73
 800286e:	f000 809d 	beq.w	80029ac <_printf_i+0x1a4>
 8002872:	d808      	bhi.n	8002886 <_printf_i+0x7e>
 8002874:	296f      	cmp	r1, #111	; 0x6f
 8002876:	d020      	beq.n	80028ba <_printf_i+0xb2>
 8002878:	2970      	cmp	r1, #112	; 0x70
 800287a:	d1dd      	bne.n	8002838 <_printf_i+0x30>
 800287c:	6823      	ldr	r3, [r4, #0]
 800287e:	f043 0320 	orr.w	r3, r3, #32
 8002882:	6023      	str	r3, [r4, #0]
 8002884:	e003      	b.n	800288e <_printf_i+0x86>
 8002886:	2975      	cmp	r1, #117	; 0x75
 8002888:	d017      	beq.n	80028ba <_printf_i+0xb2>
 800288a:	2978      	cmp	r1, #120	; 0x78
 800288c:	d1d4      	bne.n	8002838 <_printf_i+0x30>
 800288e:	2378      	movs	r3, #120	; 0x78
 8002890:	4865      	ldr	r0, [pc, #404]	; (8002a28 <_printf_i+0x220>)
 8002892:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002896:	e055      	b.n	8002944 <_printf_i+0x13c>
 8002898:	6813      	ldr	r3, [r2, #0]
 800289a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800289e:	1d19      	adds	r1, r3, #4
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	6011      	str	r1, [r2, #0]
 80028a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80028a8:	2301      	movs	r3, #1
 80028aa:	e08c      	b.n	80029c6 <_printf_i+0x1be>
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f010 0f40 	tst.w	r0, #64	; 0x40
 80028b2:	6011      	str	r1, [r2, #0]
 80028b4:	bf18      	it	ne
 80028b6:	b21b      	sxthne	r3, r3
 80028b8:	e7cf      	b.n	800285a <_printf_i+0x52>
 80028ba:	6813      	ldr	r3, [r2, #0]
 80028bc:	6825      	ldr	r5, [r4, #0]
 80028be:	1d18      	adds	r0, r3, #4
 80028c0:	6010      	str	r0, [r2, #0]
 80028c2:	0628      	lsls	r0, r5, #24
 80028c4:	d501      	bpl.n	80028ca <_printf_i+0xc2>
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	e002      	b.n	80028d0 <_printf_i+0xc8>
 80028ca:	0668      	lsls	r0, r5, #25
 80028cc:	d5fb      	bpl.n	80028c6 <_printf_i+0xbe>
 80028ce:	881b      	ldrh	r3, [r3, #0]
 80028d0:	296f      	cmp	r1, #111	; 0x6f
 80028d2:	bf14      	ite	ne
 80028d4:	220a      	movne	r2, #10
 80028d6:	2208      	moveq	r2, #8
 80028d8:	4852      	ldr	r0, [pc, #328]	; (8002a24 <_printf_i+0x21c>)
 80028da:	2100      	movs	r1, #0
 80028dc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80028e0:	6865      	ldr	r5, [r4, #4]
 80028e2:	2d00      	cmp	r5, #0
 80028e4:	60a5      	str	r5, [r4, #8]
 80028e6:	f2c0 8095 	blt.w	8002a14 <_printf_i+0x20c>
 80028ea:	6821      	ldr	r1, [r4, #0]
 80028ec:	f021 0104 	bic.w	r1, r1, #4
 80028f0:	6021      	str	r1, [r4, #0]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d13d      	bne.n	8002972 <_printf_i+0x16a>
 80028f6:	2d00      	cmp	r5, #0
 80028f8:	f040 808e 	bne.w	8002a18 <_printf_i+0x210>
 80028fc:	4665      	mov	r5, ip
 80028fe:	2a08      	cmp	r2, #8
 8002900:	d10b      	bne.n	800291a <_printf_i+0x112>
 8002902:	6823      	ldr	r3, [r4, #0]
 8002904:	07db      	lsls	r3, r3, #31
 8002906:	d508      	bpl.n	800291a <_printf_i+0x112>
 8002908:	6923      	ldr	r3, [r4, #16]
 800290a:	6862      	ldr	r2, [r4, #4]
 800290c:	429a      	cmp	r2, r3
 800290e:	bfde      	ittt	le
 8002910:	2330      	movle	r3, #48	; 0x30
 8002912:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002916:	f105 35ff 	addle.w	r5, r5, #4294967295
 800291a:	ebac 0305 	sub.w	r3, ip, r5
 800291e:	6123      	str	r3, [r4, #16]
 8002920:	f8cd 8000 	str.w	r8, [sp]
 8002924:	463b      	mov	r3, r7
 8002926:	aa03      	add	r2, sp, #12
 8002928:	4621      	mov	r1, r4
 800292a:	4630      	mov	r0, r6
 800292c:	f7ff fef6 	bl	800271c <_printf_common>
 8002930:	3001      	adds	r0, #1
 8002932:	d14d      	bne.n	80029d0 <_printf_i+0x1c8>
 8002934:	f04f 30ff 	mov.w	r0, #4294967295
 8002938:	b005      	add	sp, #20
 800293a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800293e:	4839      	ldr	r0, [pc, #228]	; (8002a24 <_printf_i+0x21c>)
 8002940:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002944:	6813      	ldr	r3, [r2, #0]
 8002946:	6821      	ldr	r1, [r4, #0]
 8002948:	1d1d      	adds	r5, r3, #4
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	6015      	str	r5, [r2, #0]
 800294e:	060a      	lsls	r2, r1, #24
 8002950:	d50b      	bpl.n	800296a <_printf_i+0x162>
 8002952:	07ca      	lsls	r2, r1, #31
 8002954:	bf44      	itt	mi
 8002956:	f041 0120 	orrmi.w	r1, r1, #32
 800295a:	6021      	strmi	r1, [r4, #0]
 800295c:	b91b      	cbnz	r3, 8002966 <_printf_i+0x15e>
 800295e:	6822      	ldr	r2, [r4, #0]
 8002960:	f022 0220 	bic.w	r2, r2, #32
 8002964:	6022      	str	r2, [r4, #0]
 8002966:	2210      	movs	r2, #16
 8002968:	e7b7      	b.n	80028da <_printf_i+0xd2>
 800296a:	064d      	lsls	r5, r1, #25
 800296c:	bf48      	it	mi
 800296e:	b29b      	uxthmi	r3, r3
 8002970:	e7ef      	b.n	8002952 <_printf_i+0x14a>
 8002972:	4665      	mov	r5, ip
 8002974:	fbb3 f1f2 	udiv	r1, r3, r2
 8002978:	fb02 3311 	mls	r3, r2, r1, r3
 800297c:	5cc3      	ldrb	r3, [r0, r3]
 800297e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002982:	460b      	mov	r3, r1
 8002984:	2900      	cmp	r1, #0
 8002986:	d1f5      	bne.n	8002974 <_printf_i+0x16c>
 8002988:	e7b9      	b.n	80028fe <_printf_i+0xf6>
 800298a:	6813      	ldr	r3, [r2, #0]
 800298c:	6825      	ldr	r5, [r4, #0]
 800298e:	1d18      	adds	r0, r3, #4
 8002990:	6961      	ldr	r1, [r4, #20]
 8002992:	6010      	str	r0, [r2, #0]
 8002994:	0628      	lsls	r0, r5, #24
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	d501      	bpl.n	800299e <_printf_i+0x196>
 800299a:	6019      	str	r1, [r3, #0]
 800299c:	e002      	b.n	80029a4 <_printf_i+0x19c>
 800299e:	066a      	lsls	r2, r5, #25
 80029a0:	d5fb      	bpl.n	800299a <_printf_i+0x192>
 80029a2:	8019      	strh	r1, [r3, #0]
 80029a4:	2300      	movs	r3, #0
 80029a6:	4665      	mov	r5, ip
 80029a8:	6123      	str	r3, [r4, #16]
 80029aa:	e7b9      	b.n	8002920 <_printf_i+0x118>
 80029ac:	6813      	ldr	r3, [r2, #0]
 80029ae:	1d19      	adds	r1, r3, #4
 80029b0:	6011      	str	r1, [r2, #0]
 80029b2:	681d      	ldr	r5, [r3, #0]
 80029b4:	6862      	ldr	r2, [r4, #4]
 80029b6:	2100      	movs	r1, #0
 80029b8:	4628      	mov	r0, r5
 80029ba:	f000 fa93 	bl	8002ee4 <memchr>
 80029be:	b108      	cbz	r0, 80029c4 <_printf_i+0x1bc>
 80029c0:	1b40      	subs	r0, r0, r5
 80029c2:	6060      	str	r0, [r4, #4]
 80029c4:	6863      	ldr	r3, [r4, #4]
 80029c6:	6123      	str	r3, [r4, #16]
 80029c8:	2300      	movs	r3, #0
 80029ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80029ce:	e7a7      	b.n	8002920 <_printf_i+0x118>
 80029d0:	6923      	ldr	r3, [r4, #16]
 80029d2:	462a      	mov	r2, r5
 80029d4:	4639      	mov	r1, r7
 80029d6:	4630      	mov	r0, r6
 80029d8:	47c0      	blx	r8
 80029da:	3001      	adds	r0, #1
 80029dc:	d0aa      	beq.n	8002934 <_printf_i+0x12c>
 80029de:	6823      	ldr	r3, [r4, #0]
 80029e0:	079b      	lsls	r3, r3, #30
 80029e2:	d413      	bmi.n	8002a0c <_printf_i+0x204>
 80029e4:	68e0      	ldr	r0, [r4, #12]
 80029e6:	9b03      	ldr	r3, [sp, #12]
 80029e8:	4298      	cmp	r0, r3
 80029ea:	bfb8      	it	lt
 80029ec:	4618      	movlt	r0, r3
 80029ee:	e7a3      	b.n	8002938 <_printf_i+0x130>
 80029f0:	2301      	movs	r3, #1
 80029f2:	464a      	mov	r2, r9
 80029f4:	4639      	mov	r1, r7
 80029f6:	4630      	mov	r0, r6
 80029f8:	47c0      	blx	r8
 80029fa:	3001      	adds	r0, #1
 80029fc:	d09a      	beq.n	8002934 <_printf_i+0x12c>
 80029fe:	3501      	adds	r5, #1
 8002a00:	68e3      	ldr	r3, [r4, #12]
 8002a02:	9a03      	ldr	r2, [sp, #12]
 8002a04:	1a9b      	subs	r3, r3, r2
 8002a06:	42ab      	cmp	r3, r5
 8002a08:	dcf2      	bgt.n	80029f0 <_printf_i+0x1e8>
 8002a0a:	e7eb      	b.n	80029e4 <_printf_i+0x1dc>
 8002a0c:	2500      	movs	r5, #0
 8002a0e:	f104 0919 	add.w	r9, r4, #25
 8002a12:	e7f5      	b.n	8002a00 <_printf_i+0x1f8>
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d1ac      	bne.n	8002972 <_printf_i+0x16a>
 8002a18:	7803      	ldrb	r3, [r0, #0]
 8002a1a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002a1e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002a22:	e76c      	b.n	80028fe <_printf_i+0xf6>
 8002a24:	08003611 	.word	0x08003611
 8002a28:	08003622 	.word	0x08003622

08002a2c <_sbrk_r>:
 8002a2c:	b538      	push	{r3, r4, r5, lr}
 8002a2e:	2300      	movs	r3, #0
 8002a30:	4c05      	ldr	r4, [pc, #20]	; (8002a48 <_sbrk_r+0x1c>)
 8002a32:	4605      	mov	r5, r0
 8002a34:	4608      	mov	r0, r1
 8002a36:	6023      	str	r3, [r4, #0]
 8002a38:	f7fd fd9e 	bl	8000578 <_sbrk>
 8002a3c:	1c43      	adds	r3, r0, #1
 8002a3e:	d102      	bne.n	8002a46 <_sbrk_r+0x1a>
 8002a40:	6823      	ldr	r3, [r4, #0]
 8002a42:	b103      	cbz	r3, 8002a46 <_sbrk_r+0x1a>
 8002a44:	602b      	str	r3, [r5, #0]
 8002a46:	bd38      	pop	{r3, r4, r5, pc}
 8002a48:	200001c4 	.word	0x200001c4

08002a4c <__sread>:
 8002a4c:	b510      	push	{r4, lr}
 8002a4e:	460c      	mov	r4, r1
 8002a50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002a54:	f000 faa2 	bl	8002f9c <_read_r>
 8002a58:	2800      	cmp	r0, #0
 8002a5a:	bfab      	itete	ge
 8002a5c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002a5e:	89a3      	ldrhlt	r3, [r4, #12]
 8002a60:	181b      	addge	r3, r3, r0
 8002a62:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002a66:	bfac      	ite	ge
 8002a68:	6563      	strge	r3, [r4, #84]	; 0x54
 8002a6a:	81a3      	strhlt	r3, [r4, #12]
 8002a6c:	bd10      	pop	{r4, pc}

08002a6e <__swrite>:
 8002a6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a72:	461f      	mov	r7, r3
 8002a74:	898b      	ldrh	r3, [r1, #12]
 8002a76:	4605      	mov	r5, r0
 8002a78:	05db      	lsls	r3, r3, #23
 8002a7a:	460c      	mov	r4, r1
 8002a7c:	4616      	mov	r6, r2
 8002a7e:	d505      	bpl.n	8002a8c <__swrite+0x1e>
 8002a80:	2302      	movs	r3, #2
 8002a82:	2200      	movs	r2, #0
 8002a84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002a88:	f000 f9b6 	bl	8002df8 <_lseek_r>
 8002a8c:	89a3      	ldrh	r3, [r4, #12]
 8002a8e:	4632      	mov	r2, r6
 8002a90:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002a94:	81a3      	strh	r3, [r4, #12]
 8002a96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002a9a:	463b      	mov	r3, r7
 8002a9c:	4628      	mov	r0, r5
 8002a9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002aa2:	f000 b869 	b.w	8002b78 <_write_r>

08002aa6 <__sseek>:
 8002aa6:	b510      	push	{r4, lr}
 8002aa8:	460c      	mov	r4, r1
 8002aaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002aae:	f000 f9a3 	bl	8002df8 <_lseek_r>
 8002ab2:	1c43      	adds	r3, r0, #1
 8002ab4:	89a3      	ldrh	r3, [r4, #12]
 8002ab6:	bf15      	itete	ne
 8002ab8:	6560      	strne	r0, [r4, #84]	; 0x54
 8002aba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002abe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002ac2:	81a3      	strheq	r3, [r4, #12]
 8002ac4:	bf18      	it	ne
 8002ac6:	81a3      	strhne	r3, [r4, #12]
 8002ac8:	bd10      	pop	{r4, pc}

08002aca <__sclose>:
 8002aca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ace:	f000 b8d3 	b.w	8002c78 <_close_r>
	...

08002ad4 <__swbuf_r>:
 8002ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ad6:	460e      	mov	r6, r1
 8002ad8:	4614      	mov	r4, r2
 8002ada:	4605      	mov	r5, r0
 8002adc:	b118      	cbz	r0, 8002ae6 <__swbuf_r+0x12>
 8002ade:	6983      	ldr	r3, [r0, #24]
 8002ae0:	b90b      	cbnz	r3, 8002ae6 <__swbuf_r+0x12>
 8002ae2:	f7ff fbf9 	bl	80022d8 <__sinit>
 8002ae6:	4b21      	ldr	r3, [pc, #132]	; (8002b6c <__swbuf_r+0x98>)
 8002ae8:	429c      	cmp	r4, r3
 8002aea:	d12a      	bne.n	8002b42 <__swbuf_r+0x6e>
 8002aec:	686c      	ldr	r4, [r5, #4]
 8002aee:	69a3      	ldr	r3, [r4, #24]
 8002af0:	60a3      	str	r3, [r4, #8]
 8002af2:	89a3      	ldrh	r3, [r4, #12]
 8002af4:	071a      	lsls	r2, r3, #28
 8002af6:	d52e      	bpl.n	8002b56 <__swbuf_r+0x82>
 8002af8:	6923      	ldr	r3, [r4, #16]
 8002afa:	b363      	cbz	r3, 8002b56 <__swbuf_r+0x82>
 8002afc:	6923      	ldr	r3, [r4, #16]
 8002afe:	6820      	ldr	r0, [r4, #0]
 8002b00:	b2f6      	uxtb	r6, r6
 8002b02:	1ac0      	subs	r0, r0, r3
 8002b04:	6963      	ldr	r3, [r4, #20]
 8002b06:	4637      	mov	r7, r6
 8002b08:	4283      	cmp	r3, r0
 8002b0a:	dc04      	bgt.n	8002b16 <__swbuf_r+0x42>
 8002b0c:	4621      	mov	r1, r4
 8002b0e:	4628      	mov	r0, r5
 8002b10:	f000 f948 	bl	8002da4 <_fflush_r>
 8002b14:	bb28      	cbnz	r0, 8002b62 <__swbuf_r+0x8e>
 8002b16:	68a3      	ldr	r3, [r4, #8]
 8002b18:	3001      	adds	r0, #1
 8002b1a:	3b01      	subs	r3, #1
 8002b1c:	60a3      	str	r3, [r4, #8]
 8002b1e:	6823      	ldr	r3, [r4, #0]
 8002b20:	1c5a      	adds	r2, r3, #1
 8002b22:	6022      	str	r2, [r4, #0]
 8002b24:	701e      	strb	r6, [r3, #0]
 8002b26:	6963      	ldr	r3, [r4, #20]
 8002b28:	4283      	cmp	r3, r0
 8002b2a:	d004      	beq.n	8002b36 <__swbuf_r+0x62>
 8002b2c:	89a3      	ldrh	r3, [r4, #12]
 8002b2e:	07db      	lsls	r3, r3, #31
 8002b30:	d519      	bpl.n	8002b66 <__swbuf_r+0x92>
 8002b32:	2e0a      	cmp	r6, #10
 8002b34:	d117      	bne.n	8002b66 <__swbuf_r+0x92>
 8002b36:	4621      	mov	r1, r4
 8002b38:	4628      	mov	r0, r5
 8002b3a:	f000 f933 	bl	8002da4 <_fflush_r>
 8002b3e:	b190      	cbz	r0, 8002b66 <__swbuf_r+0x92>
 8002b40:	e00f      	b.n	8002b62 <__swbuf_r+0x8e>
 8002b42:	4b0b      	ldr	r3, [pc, #44]	; (8002b70 <__swbuf_r+0x9c>)
 8002b44:	429c      	cmp	r4, r3
 8002b46:	d101      	bne.n	8002b4c <__swbuf_r+0x78>
 8002b48:	68ac      	ldr	r4, [r5, #8]
 8002b4a:	e7d0      	b.n	8002aee <__swbuf_r+0x1a>
 8002b4c:	4b09      	ldr	r3, [pc, #36]	; (8002b74 <__swbuf_r+0xa0>)
 8002b4e:	429c      	cmp	r4, r3
 8002b50:	bf08      	it	eq
 8002b52:	68ec      	ldreq	r4, [r5, #12]
 8002b54:	e7cb      	b.n	8002aee <__swbuf_r+0x1a>
 8002b56:	4621      	mov	r1, r4
 8002b58:	4628      	mov	r0, r5
 8002b5a:	f000 f81f 	bl	8002b9c <__swsetup_r>
 8002b5e:	2800      	cmp	r0, #0
 8002b60:	d0cc      	beq.n	8002afc <__swbuf_r+0x28>
 8002b62:	f04f 37ff 	mov.w	r7, #4294967295
 8002b66:	4638      	mov	r0, r7
 8002b68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	080035c0 	.word	0x080035c0
 8002b70:	080035e0 	.word	0x080035e0
 8002b74:	080035a0 	.word	0x080035a0

08002b78 <_write_r>:
 8002b78:	b538      	push	{r3, r4, r5, lr}
 8002b7a:	4605      	mov	r5, r0
 8002b7c:	4608      	mov	r0, r1
 8002b7e:	4611      	mov	r1, r2
 8002b80:	2200      	movs	r2, #0
 8002b82:	4c05      	ldr	r4, [pc, #20]	; (8002b98 <_write_r+0x20>)
 8002b84:	6022      	str	r2, [r4, #0]
 8002b86:	461a      	mov	r2, r3
 8002b88:	f000 faed 	bl	8003166 <_write>
 8002b8c:	1c43      	adds	r3, r0, #1
 8002b8e:	d102      	bne.n	8002b96 <_write_r+0x1e>
 8002b90:	6823      	ldr	r3, [r4, #0]
 8002b92:	b103      	cbz	r3, 8002b96 <_write_r+0x1e>
 8002b94:	602b      	str	r3, [r5, #0]
 8002b96:	bd38      	pop	{r3, r4, r5, pc}
 8002b98:	200001c4 	.word	0x200001c4

08002b9c <__swsetup_r>:
 8002b9c:	4b32      	ldr	r3, [pc, #200]	; (8002c68 <__swsetup_r+0xcc>)
 8002b9e:	b570      	push	{r4, r5, r6, lr}
 8002ba0:	681d      	ldr	r5, [r3, #0]
 8002ba2:	4606      	mov	r6, r0
 8002ba4:	460c      	mov	r4, r1
 8002ba6:	b125      	cbz	r5, 8002bb2 <__swsetup_r+0x16>
 8002ba8:	69ab      	ldr	r3, [r5, #24]
 8002baa:	b913      	cbnz	r3, 8002bb2 <__swsetup_r+0x16>
 8002bac:	4628      	mov	r0, r5
 8002bae:	f7ff fb93 	bl	80022d8 <__sinit>
 8002bb2:	4b2e      	ldr	r3, [pc, #184]	; (8002c6c <__swsetup_r+0xd0>)
 8002bb4:	429c      	cmp	r4, r3
 8002bb6:	d10f      	bne.n	8002bd8 <__swsetup_r+0x3c>
 8002bb8:	686c      	ldr	r4, [r5, #4]
 8002bba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002bbe:	b29a      	uxth	r2, r3
 8002bc0:	0715      	lsls	r5, r2, #28
 8002bc2:	d42c      	bmi.n	8002c1e <__swsetup_r+0x82>
 8002bc4:	06d0      	lsls	r0, r2, #27
 8002bc6:	d411      	bmi.n	8002bec <__swsetup_r+0x50>
 8002bc8:	2209      	movs	r2, #9
 8002bca:	6032      	str	r2, [r6, #0]
 8002bcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002bd0:	81a3      	strh	r3, [r4, #12]
 8002bd2:	f04f 30ff 	mov.w	r0, #4294967295
 8002bd6:	e03e      	b.n	8002c56 <__swsetup_r+0xba>
 8002bd8:	4b25      	ldr	r3, [pc, #148]	; (8002c70 <__swsetup_r+0xd4>)
 8002bda:	429c      	cmp	r4, r3
 8002bdc:	d101      	bne.n	8002be2 <__swsetup_r+0x46>
 8002bde:	68ac      	ldr	r4, [r5, #8]
 8002be0:	e7eb      	b.n	8002bba <__swsetup_r+0x1e>
 8002be2:	4b24      	ldr	r3, [pc, #144]	; (8002c74 <__swsetup_r+0xd8>)
 8002be4:	429c      	cmp	r4, r3
 8002be6:	bf08      	it	eq
 8002be8:	68ec      	ldreq	r4, [r5, #12]
 8002bea:	e7e6      	b.n	8002bba <__swsetup_r+0x1e>
 8002bec:	0751      	lsls	r1, r2, #29
 8002bee:	d512      	bpl.n	8002c16 <__swsetup_r+0x7a>
 8002bf0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002bf2:	b141      	cbz	r1, 8002c06 <__swsetup_r+0x6a>
 8002bf4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002bf8:	4299      	cmp	r1, r3
 8002bfa:	d002      	beq.n	8002c02 <__swsetup_r+0x66>
 8002bfc:	4630      	mov	r0, r6
 8002bfe:	f000 f981 	bl	8002f04 <_free_r>
 8002c02:	2300      	movs	r3, #0
 8002c04:	6363      	str	r3, [r4, #52]	; 0x34
 8002c06:	89a3      	ldrh	r3, [r4, #12]
 8002c08:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002c0c:	81a3      	strh	r3, [r4, #12]
 8002c0e:	2300      	movs	r3, #0
 8002c10:	6063      	str	r3, [r4, #4]
 8002c12:	6923      	ldr	r3, [r4, #16]
 8002c14:	6023      	str	r3, [r4, #0]
 8002c16:	89a3      	ldrh	r3, [r4, #12]
 8002c18:	f043 0308 	orr.w	r3, r3, #8
 8002c1c:	81a3      	strh	r3, [r4, #12]
 8002c1e:	6923      	ldr	r3, [r4, #16]
 8002c20:	b94b      	cbnz	r3, 8002c36 <__swsetup_r+0x9a>
 8002c22:	89a3      	ldrh	r3, [r4, #12]
 8002c24:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002c28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c2c:	d003      	beq.n	8002c36 <__swsetup_r+0x9a>
 8002c2e:	4621      	mov	r1, r4
 8002c30:	4630      	mov	r0, r6
 8002c32:	f000 f917 	bl	8002e64 <__smakebuf_r>
 8002c36:	89a2      	ldrh	r2, [r4, #12]
 8002c38:	f012 0301 	ands.w	r3, r2, #1
 8002c3c:	d00c      	beq.n	8002c58 <__swsetup_r+0xbc>
 8002c3e:	2300      	movs	r3, #0
 8002c40:	60a3      	str	r3, [r4, #8]
 8002c42:	6963      	ldr	r3, [r4, #20]
 8002c44:	425b      	negs	r3, r3
 8002c46:	61a3      	str	r3, [r4, #24]
 8002c48:	6923      	ldr	r3, [r4, #16]
 8002c4a:	b953      	cbnz	r3, 8002c62 <__swsetup_r+0xc6>
 8002c4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002c50:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8002c54:	d1ba      	bne.n	8002bcc <__swsetup_r+0x30>
 8002c56:	bd70      	pop	{r4, r5, r6, pc}
 8002c58:	0792      	lsls	r2, r2, #30
 8002c5a:	bf58      	it	pl
 8002c5c:	6963      	ldrpl	r3, [r4, #20]
 8002c5e:	60a3      	str	r3, [r4, #8]
 8002c60:	e7f2      	b.n	8002c48 <__swsetup_r+0xac>
 8002c62:	2000      	movs	r0, #0
 8002c64:	e7f7      	b.n	8002c56 <__swsetup_r+0xba>
 8002c66:	bf00      	nop
 8002c68:	2000000c 	.word	0x2000000c
 8002c6c:	080035c0 	.word	0x080035c0
 8002c70:	080035e0 	.word	0x080035e0
 8002c74:	080035a0 	.word	0x080035a0

08002c78 <_close_r>:
 8002c78:	b538      	push	{r3, r4, r5, lr}
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	4c05      	ldr	r4, [pc, #20]	; (8002c94 <_close_r+0x1c>)
 8002c7e:	4605      	mov	r5, r0
 8002c80:	4608      	mov	r0, r1
 8002c82:	6023      	str	r3, [r4, #0]
 8002c84:	f000 fa9e 	bl	80031c4 <_close>
 8002c88:	1c43      	adds	r3, r0, #1
 8002c8a:	d102      	bne.n	8002c92 <_close_r+0x1a>
 8002c8c:	6823      	ldr	r3, [r4, #0]
 8002c8e:	b103      	cbz	r3, 8002c92 <_close_r+0x1a>
 8002c90:	602b      	str	r3, [r5, #0]
 8002c92:	bd38      	pop	{r3, r4, r5, pc}
 8002c94:	200001c4 	.word	0x200001c4

08002c98 <__sflush_r>:
 8002c98:	898a      	ldrh	r2, [r1, #12]
 8002c9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c9e:	4605      	mov	r5, r0
 8002ca0:	0710      	lsls	r0, r2, #28
 8002ca2:	460c      	mov	r4, r1
 8002ca4:	d458      	bmi.n	8002d58 <__sflush_r+0xc0>
 8002ca6:	684b      	ldr	r3, [r1, #4]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	dc05      	bgt.n	8002cb8 <__sflush_r+0x20>
 8002cac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	dc02      	bgt.n	8002cb8 <__sflush_r+0x20>
 8002cb2:	2000      	movs	r0, #0
 8002cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002cb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002cba:	2e00      	cmp	r6, #0
 8002cbc:	d0f9      	beq.n	8002cb2 <__sflush_r+0x1a>
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002cc4:	682f      	ldr	r7, [r5, #0]
 8002cc6:	6a21      	ldr	r1, [r4, #32]
 8002cc8:	602b      	str	r3, [r5, #0]
 8002cca:	d032      	beq.n	8002d32 <__sflush_r+0x9a>
 8002ccc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002cce:	89a3      	ldrh	r3, [r4, #12]
 8002cd0:	075a      	lsls	r2, r3, #29
 8002cd2:	d505      	bpl.n	8002ce0 <__sflush_r+0x48>
 8002cd4:	6863      	ldr	r3, [r4, #4]
 8002cd6:	1ac0      	subs	r0, r0, r3
 8002cd8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002cda:	b10b      	cbz	r3, 8002ce0 <__sflush_r+0x48>
 8002cdc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002cde:	1ac0      	subs	r0, r0, r3
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002ce6:	6a21      	ldr	r1, [r4, #32]
 8002ce8:	4628      	mov	r0, r5
 8002cea:	47b0      	blx	r6
 8002cec:	1c43      	adds	r3, r0, #1
 8002cee:	89a3      	ldrh	r3, [r4, #12]
 8002cf0:	d106      	bne.n	8002d00 <__sflush_r+0x68>
 8002cf2:	6829      	ldr	r1, [r5, #0]
 8002cf4:	291d      	cmp	r1, #29
 8002cf6:	d848      	bhi.n	8002d8a <__sflush_r+0xf2>
 8002cf8:	4a29      	ldr	r2, [pc, #164]	; (8002da0 <__sflush_r+0x108>)
 8002cfa:	40ca      	lsrs	r2, r1
 8002cfc:	07d6      	lsls	r6, r2, #31
 8002cfe:	d544      	bpl.n	8002d8a <__sflush_r+0xf2>
 8002d00:	2200      	movs	r2, #0
 8002d02:	6062      	str	r2, [r4, #4]
 8002d04:	6922      	ldr	r2, [r4, #16]
 8002d06:	04d9      	lsls	r1, r3, #19
 8002d08:	6022      	str	r2, [r4, #0]
 8002d0a:	d504      	bpl.n	8002d16 <__sflush_r+0x7e>
 8002d0c:	1c42      	adds	r2, r0, #1
 8002d0e:	d101      	bne.n	8002d14 <__sflush_r+0x7c>
 8002d10:	682b      	ldr	r3, [r5, #0]
 8002d12:	b903      	cbnz	r3, 8002d16 <__sflush_r+0x7e>
 8002d14:	6560      	str	r0, [r4, #84]	; 0x54
 8002d16:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002d18:	602f      	str	r7, [r5, #0]
 8002d1a:	2900      	cmp	r1, #0
 8002d1c:	d0c9      	beq.n	8002cb2 <__sflush_r+0x1a>
 8002d1e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002d22:	4299      	cmp	r1, r3
 8002d24:	d002      	beq.n	8002d2c <__sflush_r+0x94>
 8002d26:	4628      	mov	r0, r5
 8002d28:	f000 f8ec 	bl	8002f04 <_free_r>
 8002d2c:	2000      	movs	r0, #0
 8002d2e:	6360      	str	r0, [r4, #52]	; 0x34
 8002d30:	e7c0      	b.n	8002cb4 <__sflush_r+0x1c>
 8002d32:	2301      	movs	r3, #1
 8002d34:	4628      	mov	r0, r5
 8002d36:	47b0      	blx	r6
 8002d38:	1c41      	adds	r1, r0, #1
 8002d3a:	d1c8      	bne.n	8002cce <__sflush_r+0x36>
 8002d3c:	682b      	ldr	r3, [r5, #0]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d0c5      	beq.n	8002cce <__sflush_r+0x36>
 8002d42:	2b1d      	cmp	r3, #29
 8002d44:	d001      	beq.n	8002d4a <__sflush_r+0xb2>
 8002d46:	2b16      	cmp	r3, #22
 8002d48:	d101      	bne.n	8002d4e <__sflush_r+0xb6>
 8002d4a:	602f      	str	r7, [r5, #0]
 8002d4c:	e7b1      	b.n	8002cb2 <__sflush_r+0x1a>
 8002d4e:	89a3      	ldrh	r3, [r4, #12]
 8002d50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d54:	81a3      	strh	r3, [r4, #12]
 8002d56:	e7ad      	b.n	8002cb4 <__sflush_r+0x1c>
 8002d58:	690f      	ldr	r7, [r1, #16]
 8002d5a:	2f00      	cmp	r7, #0
 8002d5c:	d0a9      	beq.n	8002cb2 <__sflush_r+0x1a>
 8002d5e:	0793      	lsls	r3, r2, #30
 8002d60:	bf18      	it	ne
 8002d62:	2300      	movne	r3, #0
 8002d64:	680e      	ldr	r6, [r1, #0]
 8002d66:	bf08      	it	eq
 8002d68:	694b      	ldreq	r3, [r1, #20]
 8002d6a:	eba6 0807 	sub.w	r8, r6, r7
 8002d6e:	600f      	str	r7, [r1, #0]
 8002d70:	608b      	str	r3, [r1, #8]
 8002d72:	f1b8 0f00 	cmp.w	r8, #0
 8002d76:	dd9c      	ble.n	8002cb2 <__sflush_r+0x1a>
 8002d78:	4643      	mov	r3, r8
 8002d7a:	463a      	mov	r2, r7
 8002d7c:	6a21      	ldr	r1, [r4, #32]
 8002d7e:	4628      	mov	r0, r5
 8002d80:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002d82:	47b0      	blx	r6
 8002d84:	2800      	cmp	r0, #0
 8002d86:	dc06      	bgt.n	8002d96 <__sflush_r+0xfe>
 8002d88:	89a3      	ldrh	r3, [r4, #12]
 8002d8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d8e:	81a3      	strh	r3, [r4, #12]
 8002d90:	f04f 30ff 	mov.w	r0, #4294967295
 8002d94:	e78e      	b.n	8002cb4 <__sflush_r+0x1c>
 8002d96:	4407      	add	r7, r0
 8002d98:	eba8 0800 	sub.w	r8, r8, r0
 8002d9c:	e7e9      	b.n	8002d72 <__sflush_r+0xda>
 8002d9e:	bf00      	nop
 8002da0:	20400001 	.word	0x20400001

08002da4 <_fflush_r>:
 8002da4:	b538      	push	{r3, r4, r5, lr}
 8002da6:	690b      	ldr	r3, [r1, #16]
 8002da8:	4605      	mov	r5, r0
 8002daa:	460c      	mov	r4, r1
 8002dac:	b1db      	cbz	r3, 8002de6 <_fflush_r+0x42>
 8002dae:	b118      	cbz	r0, 8002db8 <_fflush_r+0x14>
 8002db0:	6983      	ldr	r3, [r0, #24]
 8002db2:	b90b      	cbnz	r3, 8002db8 <_fflush_r+0x14>
 8002db4:	f7ff fa90 	bl	80022d8 <__sinit>
 8002db8:	4b0c      	ldr	r3, [pc, #48]	; (8002dec <_fflush_r+0x48>)
 8002dba:	429c      	cmp	r4, r3
 8002dbc:	d109      	bne.n	8002dd2 <_fflush_r+0x2e>
 8002dbe:	686c      	ldr	r4, [r5, #4]
 8002dc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002dc4:	b17b      	cbz	r3, 8002de6 <_fflush_r+0x42>
 8002dc6:	4621      	mov	r1, r4
 8002dc8:	4628      	mov	r0, r5
 8002dca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002dce:	f7ff bf63 	b.w	8002c98 <__sflush_r>
 8002dd2:	4b07      	ldr	r3, [pc, #28]	; (8002df0 <_fflush_r+0x4c>)
 8002dd4:	429c      	cmp	r4, r3
 8002dd6:	d101      	bne.n	8002ddc <_fflush_r+0x38>
 8002dd8:	68ac      	ldr	r4, [r5, #8]
 8002dda:	e7f1      	b.n	8002dc0 <_fflush_r+0x1c>
 8002ddc:	4b05      	ldr	r3, [pc, #20]	; (8002df4 <_fflush_r+0x50>)
 8002dde:	429c      	cmp	r4, r3
 8002de0:	bf08      	it	eq
 8002de2:	68ec      	ldreq	r4, [r5, #12]
 8002de4:	e7ec      	b.n	8002dc0 <_fflush_r+0x1c>
 8002de6:	2000      	movs	r0, #0
 8002de8:	bd38      	pop	{r3, r4, r5, pc}
 8002dea:	bf00      	nop
 8002dec:	080035c0 	.word	0x080035c0
 8002df0:	080035e0 	.word	0x080035e0
 8002df4:	080035a0 	.word	0x080035a0

08002df8 <_lseek_r>:
 8002df8:	b538      	push	{r3, r4, r5, lr}
 8002dfa:	4605      	mov	r5, r0
 8002dfc:	4608      	mov	r0, r1
 8002dfe:	4611      	mov	r1, r2
 8002e00:	2200      	movs	r2, #0
 8002e02:	4c05      	ldr	r4, [pc, #20]	; (8002e18 <_lseek_r+0x20>)
 8002e04:	6022      	str	r2, [r4, #0]
 8002e06:	461a      	mov	r2, r3
 8002e08:	f000 f99b 	bl	8003142 <_lseek>
 8002e0c:	1c43      	adds	r3, r0, #1
 8002e0e:	d102      	bne.n	8002e16 <_lseek_r+0x1e>
 8002e10:	6823      	ldr	r3, [r4, #0]
 8002e12:	b103      	cbz	r3, 8002e16 <_lseek_r+0x1e>
 8002e14:	602b      	str	r3, [r5, #0]
 8002e16:	bd38      	pop	{r3, r4, r5, pc}
 8002e18:	200001c4 	.word	0x200001c4

08002e1c <__swhatbuf_r>:
 8002e1c:	b570      	push	{r4, r5, r6, lr}
 8002e1e:	460e      	mov	r6, r1
 8002e20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e24:	b096      	sub	sp, #88	; 0x58
 8002e26:	2900      	cmp	r1, #0
 8002e28:	4614      	mov	r4, r2
 8002e2a:	461d      	mov	r5, r3
 8002e2c:	da07      	bge.n	8002e3e <__swhatbuf_r+0x22>
 8002e2e:	2300      	movs	r3, #0
 8002e30:	602b      	str	r3, [r5, #0]
 8002e32:	89b3      	ldrh	r3, [r6, #12]
 8002e34:	061a      	lsls	r2, r3, #24
 8002e36:	d410      	bmi.n	8002e5a <__swhatbuf_r+0x3e>
 8002e38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e3c:	e00e      	b.n	8002e5c <__swhatbuf_r+0x40>
 8002e3e:	466a      	mov	r2, sp
 8002e40:	f000 f8be 	bl	8002fc0 <_fstat_r>
 8002e44:	2800      	cmp	r0, #0
 8002e46:	dbf2      	blt.n	8002e2e <__swhatbuf_r+0x12>
 8002e48:	9a01      	ldr	r2, [sp, #4]
 8002e4a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002e4e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002e52:	425a      	negs	r2, r3
 8002e54:	415a      	adcs	r2, r3
 8002e56:	602a      	str	r2, [r5, #0]
 8002e58:	e7ee      	b.n	8002e38 <__swhatbuf_r+0x1c>
 8002e5a:	2340      	movs	r3, #64	; 0x40
 8002e5c:	2000      	movs	r0, #0
 8002e5e:	6023      	str	r3, [r4, #0]
 8002e60:	b016      	add	sp, #88	; 0x58
 8002e62:	bd70      	pop	{r4, r5, r6, pc}

08002e64 <__smakebuf_r>:
 8002e64:	898b      	ldrh	r3, [r1, #12]
 8002e66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002e68:	079d      	lsls	r5, r3, #30
 8002e6a:	4606      	mov	r6, r0
 8002e6c:	460c      	mov	r4, r1
 8002e6e:	d507      	bpl.n	8002e80 <__smakebuf_r+0x1c>
 8002e70:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002e74:	6023      	str	r3, [r4, #0]
 8002e76:	6123      	str	r3, [r4, #16]
 8002e78:	2301      	movs	r3, #1
 8002e7a:	6163      	str	r3, [r4, #20]
 8002e7c:	b002      	add	sp, #8
 8002e7e:	bd70      	pop	{r4, r5, r6, pc}
 8002e80:	ab01      	add	r3, sp, #4
 8002e82:	466a      	mov	r2, sp
 8002e84:	f7ff ffca 	bl	8002e1c <__swhatbuf_r>
 8002e88:	9900      	ldr	r1, [sp, #0]
 8002e8a:	4605      	mov	r5, r0
 8002e8c:	4630      	mov	r0, r6
 8002e8e:	f7ff faad 	bl	80023ec <_malloc_r>
 8002e92:	b948      	cbnz	r0, 8002ea8 <__smakebuf_r+0x44>
 8002e94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e98:	059a      	lsls	r2, r3, #22
 8002e9a:	d4ef      	bmi.n	8002e7c <__smakebuf_r+0x18>
 8002e9c:	f023 0303 	bic.w	r3, r3, #3
 8002ea0:	f043 0302 	orr.w	r3, r3, #2
 8002ea4:	81a3      	strh	r3, [r4, #12]
 8002ea6:	e7e3      	b.n	8002e70 <__smakebuf_r+0xc>
 8002ea8:	4b0d      	ldr	r3, [pc, #52]	; (8002ee0 <__smakebuf_r+0x7c>)
 8002eaa:	62b3      	str	r3, [r6, #40]	; 0x28
 8002eac:	89a3      	ldrh	r3, [r4, #12]
 8002eae:	6020      	str	r0, [r4, #0]
 8002eb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002eb4:	81a3      	strh	r3, [r4, #12]
 8002eb6:	9b00      	ldr	r3, [sp, #0]
 8002eb8:	6120      	str	r0, [r4, #16]
 8002eba:	6163      	str	r3, [r4, #20]
 8002ebc:	9b01      	ldr	r3, [sp, #4]
 8002ebe:	b15b      	cbz	r3, 8002ed8 <__smakebuf_r+0x74>
 8002ec0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002ec4:	4630      	mov	r0, r6
 8002ec6:	f000 f88d 	bl	8002fe4 <_isatty_r>
 8002eca:	b128      	cbz	r0, 8002ed8 <__smakebuf_r+0x74>
 8002ecc:	89a3      	ldrh	r3, [r4, #12]
 8002ece:	f023 0303 	bic.w	r3, r3, #3
 8002ed2:	f043 0301 	orr.w	r3, r3, #1
 8002ed6:	81a3      	strh	r3, [r4, #12]
 8002ed8:	89a3      	ldrh	r3, [r4, #12]
 8002eda:	431d      	orrs	r5, r3
 8002edc:	81a5      	strh	r5, [r4, #12]
 8002ede:	e7cd      	b.n	8002e7c <__smakebuf_r+0x18>
 8002ee0:	080022a1 	.word	0x080022a1

08002ee4 <memchr>:
 8002ee4:	b510      	push	{r4, lr}
 8002ee6:	b2c9      	uxtb	r1, r1
 8002ee8:	4402      	add	r2, r0
 8002eea:	4290      	cmp	r0, r2
 8002eec:	4603      	mov	r3, r0
 8002eee:	d101      	bne.n	8002ef4 <memchr+0x10>
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	e003      	b.n	8002efc <memchr+0x18>
 8002ef4:	781c      	ldrb	r4, [r3, #0]
 8002ef6:	3001      	adds	r0, #1
 8002ef8:	428c      	cmp	r4, r1
 8002efa:	d1f6      	bne.n	8002eea <memchr+0x6>
 8002efc:	4618      	mov	r0, r3
 8002efe:	bd10      	pop	{r4, pc}

08002f00 <__malloc_lock>:
 8002f00:	4770      	bx	lr

08002f02 <__malloc_unlock>:
 8002f02:	4770      	bx	lr

08002f04 <_free_r>:
 8002f04:	b538      	push	{r3, r4, r5, lr}
 8002f06:	4605      	mov	r5, r0
 8002f08:	2900      	cmp	r1, #0
 8002f0a:	d043      	beq.n	8002f94 <_free_r+0x90>
 8002f0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002f10:	1f0c      	subs	r4, r1, #4
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	bfb8      	it	lt
 8002f16:	18e4      	addlt	r4, r4, r3
 8002f18:	f7ff fff2 	bl	8002f00 <__malloc_lock>
 8002f1c:	4a1e      	ldr	r2, [pc, #120]	; (8002f98 <_free_r+0x94>)
 8002f1e:	6813      	ldr	r3, [r2, #0]
 8002f20:	4610      	mov	r0, r2
 8002f22:	b933      	cbnz	r3, 8002f32 <_free_r+0x2e>
 8002f24:	6063      	str	r3, [r4, #4]
 8002f26:	6014      	str	r4, [r2, #0]
 8002f28:	4628      	mov	r0, r5
 8002f2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002f2e:	f7ff bfe8 	b.w	8002f02 <__malloc_unlock>
 8002f32:	42a3      	cmp	r3, r4
 8002f34:	d90b      	bls.n	8002f4e <_free_r+0x4a>
 8002f36:	6821      	ldr	r1, [r4, #0]
 8002f38:	1862      	adds	r2, r4, r1
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	bf01      	itttt	eq
 8002f3e:	681a      	ldreq	r2, [r3, #0]
 8002f40:	685b      	ldreq	r3, [r3, #4]
 8002f42:	1852      	addeq	r2, r2, r1
 8002f44:	6022      	streq	r2, [r4, #0]
 8002f46:	6063      	str	r3, [r4, #4]
 8002f48:	6004      	str	r4, [r0, #0]
 8002f4a:	e7ed      	b.n	8002f28 <_free_r+0x24>
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	685a      	ldr	r2, [r3, #4]
 8002f50:	b10a      	cbz	r2, 8002f56 <_free_r+0x52>
 8002f52:	42a2      	cmp	r2, r4
 8002f54:	d9fa      	bls.n	8002f4c <_free_r+0x48>
 8002f56:	6819      	ldr	r1, [r3, #0]
 8002f58:	1858      	adds	r0, r3, r1
 8002f5a:	42a0      	cmp	r0, r4
 8002f5c:	d10b      	bne.n	8002f76 <_free_r+0x72>
 8002f5e:	6820      	ldr	r0, [r4, #0]
 8002f60:	4401      	add	r1, r0
 8002f62:	1858      	adds	r0, r3, r1
 8002f64:	4282      	cmp	r2, r0
 8002f66:	6019      	str	r1, [r3, #0]
 8002f68:	d1de      	bne.n	8002f28 <_free_r+0x24>
 8002f6a:	6810      	ldr	r0, [r2, #0]
 8002f6c:	6852      	ldr	r2, [r2, #4]
 8002f6e:	4401      	add	r1, r0
 8002f70:	6019      	str	r1, [r3, #0]
 8002f72:	605a      	str	r2, [r3, #4]
 8002f74:	e7d8      	b.n	8002f28 <_free_r+0x24>
 8002f76:	d902      	bls.n	8002f7e <_free_r+0x7a>
 8002f78:	230c      	movs	r3, #12
 8002f7a:	602b      	str	r3, [r5, #0]
 8002f7c:	e7d4      	b.n	8002f28 <_free_r+0x24>
 8002f7e:	6820      	ldr	r0, [r4, #0]
 8002f80:	1821      	adds	r1, r4, r0
 8002f82:	428a      	cmp	r2, r1
 8002f84:	bf01      	itttt	eq
 8002f86:	6811      	ldreq	r1, [r2, #0]
 8002f88:	6852      	ldreq	r2, [r2, #4]
 8002f8a:	1809      	addeq	r1, r1, r0
 8002f8c:	6021      	streq	r1, [r4, #0]
 8002f8e:	6062      	str	r2, [r4, #4]
 8002f90:	605c      	str	r4, [r3, #4]
 8002f92:	e7c9      	b.n	8002f28 <_free_r+0x24>
 8002f94:	bd38      	pop	{r3, r4, r5, pc}
 8002f96:	bf00      	nop
 8002f98:	2000009c 	.word	0x2000009c

08002f9c <_read_r>:
 8002f9c:	b538      	push	{r3, r4, r5, lr}
 8002f9e:	4605      	mov	r5, r0
 8002fa0:	4608      	mov	r0, r1
 8002fa2:	4611      	mov	r1, r2
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	4c05      	ldr	r4, [pc, #20]	; (8002fbc <_read_r+0x20>)
 8002fa8:	6022      	str	r2, [r4, #0]
 8002faa:	461a      	mov	r2, r3
 8002fac:	f000 f872 	bl	8003094 <_read>
 8002fb0:	1c43      	adds	r3, r0, #1
 8002fb2:	d102      	bne.n	8002fba <_read_r+0x1e>
 8002fb4:	6823      	ldr	r3, [r4, #0]
 8002fb6:	b103      	cbz	r3, 8002fba <_read_r+0x1e>
 8002fb8:	602b      	str	r3, [r5, #0]
 8002fba:	bd38      	pop	{r3, r4, r5, pc}
 8002fbc:	200001c4 	.word	0x200001c4

08002fc0 <_fstat_r>:
 8002fc0:	b538      	push	{r3, r4, r5, lr}
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	4c06      	ldr	r4, [pc, #24]	; (8002fe0 <_fstat_r+0x20>)
 8002fc6:	4605      	mov	r5, r0
 8002fc8:	4608      	mov	r0, r1
 8002fca:	4611      	mov	r1, r2
 8002fcc:	6023      	str	r3, [r4, #0]
 8002fce:	f000 f940 	bl	8003252 <_fstat>
 8002fd2:	1c43      	adds	r3, r0, #1
 8002fd4:	d102      	bne.n	8002fdc <_fstat_r+0x1c>
 8002fd6:	6823      	ldr	r3, [r4, #0]
 8002fd8:	b103      	cbz	r3, 8002fdc <_fstat_r+0x1c>
 8002fda:	602b      	str	r3, [r5, #0]
 8002fdc:	bd38      	pop	{r3, r4, r5, pc}
 8002fde:	bf00      	nop
 8002fe0:	200001c4 	.word	0x200001c4

08002fe4 <_isatty_r>:
 8002fe4:	b538      	push	{r3, r4, r5, lr}
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	4c05      	ldr	r4, [pc, #20]	; (8003000 <_isatty_r+0x1c>)
 8002fea:	4605      	mov	r5, r0
 8002fec:	4608      	mov	r0, r1
 8002fee:	6023      	str	r3, [r4, #0]
 8002ff0:	f000 fa92 	bl	8003518 <_isatty>
 8002ff4:	1c43      	adds	r3, r0, #1
 8002ff6:	d102      	bne.n	8002ffe <_isatty_r+0x1a>
 8002ff8:	6823      	ldr	r3, [r4, #0]
 8002ffa:	b103      	cbz	r3, 8002ffe <_isatty_r+0x1a>
 8002ffc:	602b      	str	r3, [r5, #0]
 8002ffe:	bd38      	pop	{r3, r4, r5, pc}
 8003000:	200001c4 	.word	0x200001c4

08003004 <findslot>:
 8003004:	4b0a      	ldr	r3, [pc, #40]	; (8003030 <findslot+0x2c>)
 8003006:	b510      	push	{r4, lr}
 8003008:	4604      	mov	r4, r0
 800300a:	6818      	ldr	r0, [r3, #0]
 800300c:	b118      	cbz	r0, 8003016 <findslot+0x12>
 800300e:	6983      	ldr	r3, [r0, #24]
 8003010:	b90b      	cbnz	r3, 8003016 <findslot+0x12>
 8003012:	f7ff f961 	bl	80022d8 <__sinit>
 8003016:	2c13      	cmp	r4, #19
 8003018:	d807      	bhi.n	800302a <findslot+0x26>
 800301a:	4806      	ldr	r0, [pc, #24]	; (8003034 <findslot+0x30>)
 800301c:	f850 3034 	ldr.w	r3, [r0, r4, lsl #3]
 8003020:	3301      	adds	r3, #1
 8003022:	d002      	beq.n	800302a <findslot+0x26>
 8003024:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8003028:	bd10      	pop	{r4, pc}
 800302a:	2000      	movs	r0, #0
 800302c:	e7fc      	b.n	8003028 <findslot+0x24>
 800302e:	bf00      	nop
 8003030:	2000000c 	.word	0x2000000c
 8003034:	200000b0 	.word	0x200000b0

08003038 <checkerror>:
 8003038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800303a:	1c43      	adds	r3, r0, #1
 800303c:	4605      	mov	r5, r0
 800303e:	d109      	bne.n	8003054 <checkerror+0x1c>
 8003040:	f7ff f8c0 	bl	80021c4 <__errno>
 8003044:	2413      	movs	r4, #19
 8003046:	4606      	mov	r6, r0
 8003048:	2700      	movs	r7, #0
 800304a:	4620      	mov	r0, r4
 800304c:	4639      	mov	r1, r7
 800304e:	beab      	bkpt	0x00ab
 8003050:	4604      	mov	r4, r0
 8003052:	6034      	str	r4, [r6, #0]
 8003054:	4628      	mov	r0, r5
 8003056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003058 <error>:
 8003058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800305a:	4605      	mov	r5, r0
 800305c:	f7ff f8b2 	bl	80021c4 <__errno>
 8003060:	2413      	movs	r4, #19
 8003062:	4606      	mov	r6, r0
 8003064:	2700      	movs	r7, #0
 8003066:	4620      	mov	r0, r4
 8003068:	4639      	mov	r1, r7
 800306a:	beab      	bkpt	0x00ab
 800306c:	4604      	mov	r4, r0
 800306e:	6034      	str	r4, [r6, #0]
 8003070:	4628      	mov	r0, r5
 8003072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003074 <_swiread>:
 8003074:	b530      	push	{r4, r5, lr}
 8003076:	b085      	sub	sp, #20
 8003078:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800307c:	9203      	str	r2, [sp, #12]
 800307e:	2406      	movs	r4, #6
 8003080:	ad01      	add	r5, sp, #4
 8003082:	4620      	mov	r0, r4
 8003084:	4629      	mov	r1, r5
 8003086:	beab      	bkpt	0x00ab
 8003088:	4604      	mov	r4, r0
 800308a:	4620      	mov	r0, r4
 800308c:	f7ff ffd4 	bl	8003038 <checkerror>
 8003090:	b005      	add	sp, #20
 8003092:	bd30      	pop	{r4, r5, pc}

08003094 <_read>:
 8003094:	b570      	push	{r4, r5, r6, lr}
 8003096:	460e      	mov	r6, r1
 8003098:	4615      	mov	r5, r2
 800309a:	f7ff ffb3 	bl	8003004 <findslot>
 800309e:	4604      	mov	r4, r0
 80030a0:	b930      	cbnz	r0, 80030b0 <_read+0x1c>
 80030a2:	f7ff f88f 	bl	80021c4 <__errno>
 80030a6:	2309      	movs	r3, #9
 80030a8:	6003      	str	r3, [r0, #0]
 80030aa:	f04f 30ff 	mov.w	r0, #4294967295
 80030ae:	bd70      	pop	{r4, r5, r6, pc}
 80030b0:	462a      	mov	r2, r5
 80030b2:	4631      	mov	r1, r6
 80030b4:	6800      	ldr	r0, [r0, #0]
 80030b6:	f7ff ffdd 	bl	8003074 <_swiread>
 80030ba:	1c43      	adds	r3, r0, #1
 80030bc:	bf1f      	itttt	ne
 80030be:	6863      	ldrne	r3, [r4, #4]
 80030c0:	1a28      	subne	r0, r5, r0
 80030c2:	181b      	addne	r3, r3, r0
 80030c4:	6063      	strne	r3, [r4, #4]
 80030c6:	e7f2      	b.n	80030ae <_read+0x1a>

080030c8 <_swilseek>:
 80030c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80030ca:	460c      	mov	r4, r1
 80030cc:	4616      	mov	r6, r2
 80030ce:	f7ff ff99 	bl	8003004 <findslot>
 80030d2:	4605      	mov	r5, r0
 80030d4:	b940      	cbnz	r0, 80030e8 <_swilseek+0x20>
 80030d6:	f7ff f875 	bl	80021c4 <__errno>
 80030da:	2309      	movs	r3, #9
 80030dc:	6003      	str	r3, [r0, #0]
 80030de:	f04f 34ff 	mov.w	r4, #4294967295
 80030e2:	4620      	mov	r0, r4
 80030e4:	b003      	add	sp, #12
 80030e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030e8:	2e02      	cmp	r6, #2
 80030ea:	d903      	bls.n	80030f4 <_swilseek+0x2c>
 80030ec:	f7ff f86a 	bl	80021c4 <__errno>
 80030f0:	2316      	movs	r3, #22
 80030f2:	e7f3      	b.n	80030dc <_swilseek+0x14>
 80030f4:	2e01      	cmp	r6, #1
 80030f6:	d112      	bne.n	800311e <_swilseek+0x56>
 80030f8:	6843      	ldr	r3, [r0, #4]
 80030fa:	18e4      	adds	r4, r4, r3
 80030fc:	d4f6      	bmi.n	80030ec <_swilseek+0x24>
 80030fe:	682b      	ldr	r3, [r5, #0]
 8003100:	260a      	movs	r6, #10
 8003102:	e9cd 3400 	strd	r3, r4, [sp]
 8003106:	466f      	mov	r7, sp
 8003108:	4630      	mov	r0, r6
 800310a:	4639      	mov	r1, r7
 800310c:	beab      	bkpt	0x00ab
 800310e:	4606      	mov	r6, r0
 8003110:	4630      	mov	r0, r6
 8003112:	f7ff ff91 	bl	8003038 <checkerror>
 8003116:	2800      	cmp	r0, #0
 8003118:	dbe1      	blt.n	80030de <_swilseek+0x16>
 800311a:	606c      	str	r4, [r5, #4]
 800311c:	e7e1      	b.n	80030e2 <_swilseek+0x1a>
 800311e:	2e02      	cmp	r6, #2
 8003120:	d1ed      	bne.n	80030fe <_swilseek+0x36>
 8003122:	6803      	ldr	r3, [r0, #0]
 8003124:	af02      	add	r7, sp, #8
 8003126:	f847 3d08 	str.w	r3, [r7, #-8]!
 800312a:	260c      	movs	r6, #12
 800312c:	4630      	mov	r0, r6
 800312e:	4639      	mov	r1, r7
 8003130:	beab      	bkpt	0x00ab
 8003132:	4606      	mov	r6, r0
 8003134:	4630      	mov	r0, r6
 8003136:	f7ff ff7f 	bl	8003038 <checkerror>
 800313a:	1c43      	adds	r3, r0, #1
 800313c:	d0cf      	beq.n	80030de <_swilseek+0x16>
 800313e:	4404      	add	r4, r0
 8003140:	e7dd      	b.n	80030fe <_swilseek+0x36>

08003142 <_lseek>:
 8003142:	f7ff bfc1 	b.w	80030c8 <_swilseek>

08003146 <_swiwrite>:
 8003146:	b530      	push	{r4, r5, lr}
 8003148:	b085      	sub	sp, #20
 800314a:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800314e:	9203      	str	r2, [sp, #12]
 8003150:	2405      	movs	r4, #5
 8003152:	ad01      	add	r5, sp, #4
 8003154:	4620      	mov	r0, r4
 8003156:	4629      	mov	r1, r5
 8003158:	beab      	bkpt	0x00ab
 800315a:	4604      	mov	r4, r0
 800315c:	4620      	mov	r0, r4
 800315e:	f7ff ff6b 	bl	8003038 <checkerror>
 8003162:	b005      	add	sp, #20
 8003164:	bd30      	pop	{r4, r5, pc}

08003166 <_write>:
 8003166:	b570      	push	{r4, r5, r6, lr}
 8003168:	460e      	mov	r6, r1
 800316a:	4615      	mov	r5, r2
 800316c:	f7ff ff4a 	bl	8003004 <findslot>
 8003170:	4604      	mov	r4, r0
 8003172:	b930      	cbnz	r0, 8003182 <_write+0x1c>
 8003174:	f7ff f826 	bl	80021c4 <__errno>
 8003178:	2309      	movs	r3, #9
 800317a:	6003      	str	r3, [r0, #0]
 800317c:	f04f 30ff 	mov.w	r0, #4294967295
 8003180:	bd70      	pop	{r4, r5, r6, pc}
 8003182:	462a      	mov	r2, r5
 8003184:	4631      	mov	r1, r6
 8003186:	6800      	ldr	r0, [r0, #0]
 8003188:	f7ff ffdd 	bl	8003146 <_swiwrite>
 800318c:	1e02      	subs	r2, r0, #0
 800318e:	dbf5      	blt.n	800317c <_write+0x16>
 8003190:	6863      	ldr	r3, [r4, #4]
 8003192:	1aa8      	subs	r0, r5, r2
 8003194:	4403      	add	r3, r0
 8003196:	42aa      	cmp	r2, r5
 8003198:	6063      	str	r3, [r4, #4]
 800319a:	d1f1      	bne.n	8003180 <_write+0x1a>
 800319c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80031a0:	2000      	movs	r0, #0
 80031a2:	f7ff bf59 	b.w	8003058 <error>

080031a6 <_swiclose>:
 80031a6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80031a8:	ad02      	add	r5, sp, #8
 80031aa:	f845 0d04 	str.w	r0, [r5, #-4]!
 80031ae:	2402      	movs	r4, #2
 80031b0:	4620      	mov	r0, r4
 80031b2:	4629      	mov	r1, r5
 80031b4:	beab      	bkpt	0x00ab
 80031b6:	4604      	mov	r4, r0
 80031b8:	4620      	mov	r0, r4
 80031ba:	f7ff ff3d 	bl	8003038 <checkerror>
 80031be:	b003      	add	sp, #12
 80031c0:	bd30      	pop	{r4, r5, pc}
	...

080031c4 <_close>:
 80031c4:	b538      	push	{r3, r4, r5, lr}
 80031c6:	4605      	mov	r5, r0
 80031c8:	f7ff ff1c 	bl	8003004 <findslot>
 80031cc:	4604      	mov	r4, r0
 80031ce:	b930      	cbnz	r0, 80031de <_close+0x1a>
 80031d0:	f7fe fff8 	bl	80021c4 <__errno>
 80031d4:	2309      	movs	r3, #9
 80031d6:	6003      	str	r3, [r0, #0]
 80031d8:	f04f 30ff 	mov.w	r0, #4294967295
 80031dc:	bd38      	pop	{r3, r4, r5, pc}
 80031de:	3d01      	subs	r5, #1
 80031e0:	2d01      	cmp	r5, #1
 80031e2:	d809      	bhi.n	80031f8 <_close+0x34>
 80031e4:	4b09      	ldr	r3, [pc, #36]	; (800320c <_close+0x48>)
 80031e6:	689a      	ldr	r2, [r3, #8]
 80031e8:	691b      	ldr	r3, [r3, #16]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d104      	bne.n	80031f8 <_close+0x34>
 80031ee:	f04f 33ff 	mov.w	r3, #4294967295
 80031f2:	6003      	str	r3, [r0, #0]
 80031f4:	2000      	movs	r0, #0
 80031f6:	e7f1      	b.n	80031dc <_close+0x18>
 80031f8:	6820      	ldr	r0, [r4, #0]
 80031fa:	f7ff ffd4 	bl	80031a6 <_swiclose>
 80031fe:	2800      	cmp	r0, #0
 8003200:	d1ec      	bne.n	80031dc <_close+0x18>
 8003202:	f04f 33ff 	mov.w	r3, #4294967295
 8003206:	6023      	str	r3, [r4, #0]
 8003208:	e7e8      	b.n	80031dc <_close+0x18>
 800320a:	bf00      	nop
 800320c:	200000b0 	.word	0x200000b0

08003210 <_swistat>:
 8003210:	b570      	push	{r4, r5, r6, lr}
 8003212:	460c      	mov	r4, r1
 8003214:	f7ff fef6 	bl	8003004 <findslot>
 8003218:	4606      	mov	r6, r0
 800321a:	b930      	cbnz	r0, 800322a <_swistat+0x1a>
 800321c:	f7fe ffd2 	bl	80021c4 <__errno>
 8003220:	2309      	movs	r3, #9
 8003222:	6003      	str	r3, [r0, #0]
 8003224:	f04f 30ff 	mov.w	r0, #4294967295
 8003228:	bd70      	pop	{r4, r5, r6, pc}
 800322a:	6863      	ldr	r3, [r4, #4]
 800322c:	250c      	movs	r5, #12
 800322e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003232:	6063      	str	r3, [r4, #4]
 8003234:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003238:	6463      	str	r3, [r4, #68]	; 0x44
 800323a:	4628      	mov	r0, r5
 800323c:	4631      	mov	r1, r6
 800323e:	beab      	bkpt	0x00ab
 8003240:	4605      	mov	r5, r0
 8003242:	4628      	mov	r0, r5
 8003244:	f7ff fef8 	bl	8003038 <checkerror>
 8003248:	1c43      	adds	r3, r0, #1
 800324a:	bf1c      	itt	ne
 800324c:	6120      	strne	r0, [r4, #16]
 800324e:	2000      	movne	r0, #0
 8003250:	e7ea      	b.n	8003228 <_swistat+0x18>

08003252 <_fstat>:
 8003252:	460b      	mov	r3, r1
 8003254:	b510      	push	{r4, lr}
 8003256:	2100      	movs	r1, #0
 8003258:	4604      	mov	r4, r0
 800325a:	2258      	movs	r2, #88	; 0x58
 800325c:	4618      	mov	r0, r3
 800325e:	f7fe ffdb 	bl	8002218 <memset>
 8003262:	4601      	mov	r1, r0
 8003264:	4620      	mov	r0, r4
 8003266:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800326a:	f7ff bfd1 	b.w	8003210 <_swistat>

0800326e <_stat>:
 800326e:	b538      	push	{r3, r4, r5, lr}
 8003270:	460d      	mov	r5, r1
 8003272:	4604      	mov	r4, r0
 8003274:	2258      	movs	r2, #88	; 0x58
 8003276:	2100      	movs	r1, #0
 8003278:	4628      	mov	r0, r5
 800327a:	f7fe ffcd 	bl	8002218 <memset>
 800327e:	4620      	mov	r0, r4
 8003280:	2100      	movs	r1, #0
 8003282:	f000 f811 	bl	80032a8 <_swiopen>
 8003286:	1c43      	adds	r3, r0, #1
 8003288:	4604      	mov	r4, r0
 800328a:	d00b      	beq.n	80032a4 <_stat+0x36>
 800328c:	686b      	ldr	r3, [r5, #4]
 800328e:	4629      	mov	r1, r5
 8003290:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003294:	606b      	str	r3, [r5, #4]
 8003296:	f7ff ffbb 	bl	8003210 <_swistat>
 800329a:	4605      	mov	r5, r0
 800329c:	4620      	mov	r0, r4
 800329e:	f7ff ff91 	bl	80031c4 <_close>
 80032a2:	462c      	mov	r4, r5
 80032a4:	4620      	mov	r0, r4
 80032a6:	bd38      	pop	{r3, r4, r5, pc}

080032a8 <_swiopen>:
 80032a8:	4b2b      	ldr	r3, [pc, #172]	; (8003358 <_swiopen+0xb0>)
 80032aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032ae:	4682      	mov	sl, r0
 80032b0:	460e      	mov	r6, r1
 80032b2:	2500      	movs	r5, #0
 80032b4:	4698      	mov	r8, r3
 80032b6:	b096      	sub	sp, #88	; 0x58
 80032b8:	f853 4035 	ldr.w	r4, [r3, r5, lsl #3]
 80032bc:	00ef      	lsls	r7, r5, #3
 80032be:	1c61      	adds	r1, r4, #1
 80032c0:	d036      	beq.n	8003330 <_swiopen+0x88>
 80032c2:	3501      	adds	r5, #1
 80032c4:	2d14      	cmp	r5, #20
 80032c6:	d1f7      	bne.n	80032b8 <_swiopen+0x10>
 80032c8:	f7fe ff7c 	bl	80021c4 <__errno>
 80032cc:	2318      	movs	r3, #24
 80032ce:	f04f 34ff 	mov.w	r4, #4294967295
 80032d2:	6003      	str	r3, [r0, #0]
 80032d4:	e03c      	b.n	8003350 <_swiopen+0xa8>
 80032d6:	f240 6301 	movw	r3, #1537	; 0x601
 80032da:	f3c6 4400 	ubfx	r4, r6, #16, #1
 80032de:	07b2      	lsls	r2, r6, #30
 80032e0:	bf48      	it	mi
 80032e2:	f044 0402 	orrmi.w	r4, r4, #2
 80032e6:	421e      	tst	r6, r3
 80032e8:	bf18      	it	ne
 80032ea:	f044 0404 	orrne.w	r4, r4, #4
 80032ee:	0733      	lsls	r3, r6, #28
 80032f0:	bf48      	it	mi
 80032f2:	f024 0404 	bicmi.w	r4, r4, #4
 80032f6:	4650      	mov	r0, sl
 80032f8:	bf48      	it	mi
 80032fa:	f044 0408 	orrmi.w	r4, r4, #8
 80032fe:	f8cd a000 	str.w	sl, [sp]
 8003302:	f7fc ff23 	bl	800014c <strlen>
 8003306:	e9cd 4001 	strd	r4, r0, [sp, #4]
 800330a:	2401      	movs	r4, #1
 800330c:	4620      	mov	r0, r4
 800330e:	4649      	mov	r1, r9
 8003310:	beab      	bkpt	0x00ab
 8003312:	4604      	mov	r4, r0
 8003314:	2c00      	cmp	r4, #0
 8003316:	db06      	blt.n	8003326 <_swiopen+0x7e>
 8003318:	2300      	movs	r3, #0
 800331a:	4447      	add	r7, r8
 800331c:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 8003320:	607b      	str	r3, [r7, #4]
 8003322:	462c      	mov	r4, r5
 8003324:	e014      	b.n	8003350 <_swiopen+0xa8>
 8003326:	4620      	mov	r0, r4
 8003328:	f7ff fe96 	bl	8003058 <error>
 800332c:	4604      	mov	r4, r0
 800332e:	e00f      	b.n	8003350 <_swiopen+0xa8>
 8003330:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 8003334:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003338:	46e9      	mov	r9, sp
 800333a:	d1cc      	bne.n	80032d6 <_swiopen+0x2e>
 800333c:	4649      	mov	r1, r9
 800333e:	4650      	mov	r0, sl
 8003340:	f7ff ff95 	bl	800326e <_stat>
 8003344:	3001      	adds	r0, #1
 8003346:	d0c6      	beq.n	80032d6 <_swiopen+0x2e>
 8003348:	f7fe ff3c 	bl	80021c4 <__errno>
 800334c:	2311      	movs	r3, #17
 800334e:	6003      	str	r3, [r0, #0]
 8003350:	4620      	mov	r0, r4
 8003352:	b016      	add	sp, #88	; 0x58
 8003354:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003358:	200000b0 	.word	0x200000b0

0800335c <_get_semihosting_exts>:
 800335c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003360:	4607      	mov	r7, r0
 8003362:	4688      	mov	r8, r1
 8003364:	4829      	ldr	r0, [pc, #164]	; (800340c <_get_semihosting_exts+0xb0>)
 8003366:	2100      	movs	r1, #0
 8003368:	4615      	mov	r5, r2
 800336a:	f7ff ff9d 	bl	80032a8 <_swiopen>
 800336e:	4604      	mov	r4, r0
 8003370:	462a      	mov	r2, r5
 8003372:	2100      	movs	r1, #0
 8003374:	4638      	mov	r0, r7
 8003376:	f7fe ff4f 	bl	8002218 <memset>
 800337a:	1c63      	adds	r3, r4, #1
 800337c:	d015      	beq.n	80033aa <_get_semihosting_exts+0x4e>
 800337e:	4620      	mov	r0, r4
 8003380:	f7ff fe40 	bl	8003004 <findslot>
 8003384:	260c      	movs	r6, #12
 8003386:	4681      	mov	r9, r0
 8003388:	4630      	mov	r0, r6
 800338a:	4649      	mov	r1, r9
 800338c:	beab      	bkpt	0x00ab
 800338e:	4606      	mov	r6, r0
 8003390:	4630      	mov	r0, r6
 8003392:	f7ff fe51 	bl	8003038 <checkerror>
 8003396:	2803      	cmp	r0, #3
 8003398:	dd02      	ble.n	80033a0 <_get_semihosting_exts+0x44>
 800339a:	3803      	subs	r0, #3
 800339c:	42a8      	cmp	r0, r5
 800339e:	dc08      	bgt.n	80033b2 <_get_semihosting_exts+0x56>
 80033a0:	4620      	mov	r0, r4
 80033a2:	f7ff ff0f 	bl	80031c4 <_close>
 80033a6:	f04f 34ff 	mov.w	r4, #4294967295
 80033aa:	4620      	mov	r0, r4
 80033ac:	b003      	add	sp, #12
 80033ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80033b2:	2204      	movs	r2, #4
 80033b4:	4620      	mov	r0, r4
 80033b6:	eb0d 0102 	add.w	r1, sp, r2
 80033ba:	f7ff fe6b 	bl	8003094 <_read>
 80033be:	2803      	cmp	r0, #3
 80033c0:	ddee      	ble.n	80033a0 <_get_semihosting_exts+0x44>
 80033c2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80033c6:	2b53      	cmp	r3, #83	; 0x53
 80033c8:	d1ea      	bne.n	80033a0 <_get_semihosting_exts+0x44>
 80033ca:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80033ce:	2b48      	cmp	r3, #72	; 0x48
 80033d0:	d1e6      	bne.n	80033a0 <_get_semihosting_exts+0x44>
 80033d2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80033d6:	2b46      	cmp	r3, #70	; 0x46
 80033d8:	d1e2      	bne.n	80033a0 <_get_semihosting_exts+0x44>
 80033da:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80033de:	2b42      	cmp	r3, #66	; 0x42
 80033e0:	d1de      	bne.n	80033a0 <_get_semihosting_exts+0x44>
 80033e2:	2201      	movs	r2, #1
 80033e4:	4641      	mov	r1, r8
 80033e6:	4620      	mov	r0, r4
 80033e8:	f7ff fe6e 	bl	80030c8 <_swilseek>
 80033ec:	2800      	cmp	r0, #0
 80033ee:	dbd7      	blt.n	80033a0 <_get_semihosting_exts+0x44>
 80033f0:	462a      	mov	r2, r5
 80033f2:	4639      	mov	r1, r7
 80033f4:	4620      	mov	r0, r4
 80033f6:	f7ff fe4d 	bl	8003094 <_read>
 80033fa:	4605      	mov	r5, r0
 80033fc:	4620      	mov	r0, r4
 80033fe:	f7ff fee1 	bl	80031c4 <_close>
 8003402:	4628      	mov	r0, r5
 8003404:	f7ff fe18 	bl	8003038 <checkerror>
 8003408:	4604      	mov	r4, r0
 800340a:	e7ce      	b.n	80033aa <_get_semihosting_exts+0x4e>
 800340c:	08003633 	.word	0x08003633

08003410 <initialise_semihosting_exts>:
 8003410:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003412:	2100      	movs	r1, #0
 8003414:	2201      	movs	r2, #1
 8003416:	4d09      	ldr	r5, [pc, #36]	; (800343c <initialise_semihosting_exts+0x2c>)
 8003418:	4c09      	ldr	r4, [pc, #36]	; (8003440 <initialise_semihosting_exts+0x30>)
 800341a:	a801      	add	r0, sp, #4
 800341c:	6029      	str	r1, [r5, #0]
 800341e:	6022      	str	r2, [r4, #0]
 8003420:	f7ff ff9c 	bl	800335c <_get_semihosting_exts>
 8003424:	2800      	cmp	r0, #0
 8003426:	dd07      	ble.n	8003438 <initialise_semihosting_exts+0x28>
 8003428:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800342c:	f003 0201 	and.w	r2, r3, #1
 8003430:	f003 0302 	and.w	r3, r3, #2
 8003434:	602a      	str	r2, [r5, #0]
 8003436:	6023      	str	r3, [r4, #0]
 8003438:	b003      	add	sp, #12
 800343a:	bd30      	pop	{r4, r5, pc}
 800343c:	20000070 	.word	0x20000070
 8003440:	20000074 	.word	0x20000074

08003444 <_has_ext_stdout_stderr>:
 8003444:	b510      	push	{r4, lr}
 8003446:	4c04      	ldr	r4, [pc, #16]	; (8003458 <_has_ext_stdout_stderr+0x14>)
 8003448:	6822      	ldr	r2, [r4, #0]
 800344a:	2a00      	cmp	r2, #0
 800344c:	da01      	bge.n	8003452 <_has_ext_stdout_stderr+0xe>
 800344e:	f7ff ffdf 	bl	8003410 <initialise_semihosting_exts>
 8003452:	6820      	ldr	r0, [r4, #0]
 8003454:	bd10      	pop	{r4, pc}
 8003456:	bf00      	nop
 8003458:	20000074 	.word	0x20000074

0800345c <initialise_monitor_handles>:
 800345c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003460:	2303      	movs	r3, #3
 8003462:	2400      	movs	r4, #0
 8003464:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 8003514 <initialise_monitor_handles+0xb8>
 8003468:	b085      	sub	sp, #20
 800346a:	f8cd 9004 	str.w	r9, [sp, #4]
 800346e:	f10d 0804 	add.w	r8, sp, #4
 8003472:	9303      	str	r3, [sp, #12]
 8003474:	2501      	movs	r5, #1
 8003476:	9402      	str	r4, [sp, #8]
 8003478:	4628      	mov	r0, r5
 800347a:	4641      	mov	r1, r8
 800347c:	beab      	bkpt	0x00ab
 800347e:	4605      	mov	r5, r0
 8003480:	4a20      	ldr	r2, [pc, #128]	; (8003504 <initialise_monitor_handles+0xa8>)
 8003482:	4623      	mov	r3, r4
 8003484:	f04f 31ff 	mov.w	r1, #4294967295
 8003488:	4614      	mov	r4, r2
 800348a:	4e1f      	ldr	r6, [pc, #124]	; (8003508 <initialise_monitor_handles+0xac>)
 800348c:	6035      	str	r5, [r6, #0]
 800348e:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
 8003492:	3301      	adds	r3, #1
 8003494:	2b14      	cmp	r3, #20
 8003496:	d1fa      	bne.n	800348e <initialise_monitor_handles+0x32>
 8003498:	f7ff ffd4 	bl	8003444 <_has_ext_stdout_stderr>
 800349c:	4d1b      	ldr	r5, [pc, #108]	; (800350c <initialise_monitor_handles+0xb0>)
 800349e:	b1d0      	cbz	r0, 80034d6 <initialise_monitor_handles+0x7a>
 80034a0:	f04f 0a03 	mov.w	sl, #3
 80034a4:	2304      	movs	r3, #4
 80034a6:	f8cd 9004 	str.w	r9, [sp, #4]
 80034aa:	2701      	movs	r7, #1
 80034ac:	f8cd a00c 	str.w	sl, [sp, #12]
 80034b0:	9302      	str	r3, [sp, #8]
 80034b2:	4638      	mov	r0, r7
 80034b4:	4641      	mov	r1, r8
 80034b6:	beab      	bkpt	0x00ab
 80034b8:	4683      	mov	fp, r0
 80034ba:	4b15      	ldr	r3, [pc, #84]	; (8003510 <initialise_monitor_handles+0xb4>)
 80034bc:	f8cd 9004 	str.w	r9, [sp, #4]
 80034c0:	f8c3 b000 	str.w	fp, [r3]
 80034c4:	2308      	movs	r3, #8
 80034c6:	f8cd a00c 	str.w	sl, [sp, #12]
 80034ca:	9302      	str	r3, [sp, #8]
 80034cc:	4638      	mov	r0, r7
 80034ce:	4641      	mov	r1, r8
 80034d0:	beab      	bkpt	0x00ab
 80034d2:	4607      	mov	r7, r0
 80034d4:	602f      	str	r7, [r5, #0]
 80034d6:	682b      	ldr	r3, [r5, #0]
 80034d8:	3301      	adds	r3, #1
 80034da:	bf02      	ittt	eq
 80034dc:	4b0c      	ldreq	r3, [pc, #48]	; (8003510 <initialise_monitor_handles+0xb4>)
 80034de:	681b      	ldreq	r3, [r3, #0]
 80034e0:	602b      	streq	r3, [r5, #0]
 80034e2:	6833      	ldr	r3, [r6, #0]
 80034e4:	2600      	movs	r6, #0
 80034e6:	6023      	str	r3, [r4, #0]
 80034e8:	6066      	str	r6, [r4, #4]
 80034ea:	f7ff ffab 	bl	8003444 <_has_ext_stdout_stderr>
 80034ee:	b130      	cbz	r0, 80034fe <initialise_monitor_handles+0xa2>
 80034f0:	4b07      	ldr	r3, [pc, #28]	; (8003510 <initialise_monitor_handles+0xb4>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	e9c4 3602 	strd	r3, r6, [r4, #8]
 80034f8:	682b      	ldr	r3, [r5, #0]
 80034fa:	e9c4 3604 	strd	r3, r6, [r4, #16]
 80034fe:	b005      	add	sp, #20
 8003500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003504:	200000b0 	.word	0x200000b0
 8003508:	200000a8 	.word	0x200000a8
 800350c:	200000a4 	.word	0x200000a4
 8003510:	200000ac 	.word	0x200000ac
 8003514:	08003649 	.word	0x08003649

08003518 <_isatty>:
 8003518:	b570      	push	{r4, r5, r6, lr}
 800351a:	f7ff fd73 	bl	8003004 <findslot>
 800351e:	2509      	movs	r5, #9
 8003520:	4604      	mov	r4, r0
 8003522:	b920      	cbnz	r0, 800352e <_isatty+0x16>
 8003524:	f7fe fe4e 	bl	80021c4 <__errno>
 8003528:	6005      	str	r5, [r0, #0]
 800352a:	4620      	mov	r0, r4
 800352c:	bd70      	pop	{r4, r5, r6, pc}
 800352e:	4628      	mov	r0, r5
 8003530:	4621      	mov	r1, r4
 8003532:	beab      	bkpt	0x00ab
 8003534:	4604      	mov	r4, r0
 8003536:	2c01      	cmp	r4, #1
 8003538:	d0f7      	beq.n	800352a <_isatty+0x12>
 800353a:	f7fe fe43 	bl	80021c4 <__errno>
 800353e:	2400      	movs	r4, #0
 8003540:	4606      	mov	r6, r0
 8003542:	2513      	movs	r5, #19
 8003544:	4628      	mov	r0, r5
 8003546:	4621      	mov	r1, r4
 8003548:	beab      	bkpt	0x00ab
 800354a:	4605      	mov	r5, r0
 800354c:	6035      	str	r5, [r6, #0]
 800354e:	e7ec      	b.n	800352a <_isatty+0x12>

08003550 <_init>:
 8003550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003552:	bf00      	nop
 8003554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003556:	bc08      	pop	{r3}
 8003558:	469e      	mov	lr, r3
 800355a:	4770      	bx	lr

0800355c <_fini>:
 800355c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800355e:	bf00      	nop
 8003560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003562:	bc08      	pop	{r3}
 8003564:	469e      	mov	lr, r3
 8003566:	4770      	bx	lr
